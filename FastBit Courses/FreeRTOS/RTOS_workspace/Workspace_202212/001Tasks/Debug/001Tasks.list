
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006130  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063f8  080063f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006400  08006400  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014490  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144a4  200144a4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f3a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d65  00000000  00000000  00034f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00037ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e8  00000000  00000000  00039048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a99  00000000  00000000  0003a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d2a  00000000  00000000  0005fcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6c39  00000000  00000000  000759f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c62c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005130  00000000  00000000  0015c67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080062c8 	.word	0x080062c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	080062c8 	.word	0x080062c8

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012ed0 	.word	0x20012ed0

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fc63 	bl	8000e58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Enable Data Watchpoint cycle count */
  DWT_CTRL |= (0x01);
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <main+0x9c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a23      	ldr	r2, [pc, #140]	; (8000624 <main+0x9c>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f851 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f8bb 	bl	800071c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 80005a6:	f004 f957 	bl	8004858 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005aa:	f005 f8cd 	bl	8005748 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(Task1_Handler, "Task-1", 100, NULL, 2, &task1_handle);
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <main+0xa0>)
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2302      	movs	r3, #2
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	491c      	ldr	r1, [pc, #112]	; (800062c <main+0xa4>)
 80005bc:	481c      	ldr	r0, [pc, #112]	; (8000630 <main+0xa8>)
 80005be:	f002 fc25 	bl	8002e0c <xTaskCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <main+0xac>)
 80005c6:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <main+0xac>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d00a      	beq.n	80005e6 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e2:	bf00      	nop
 80005e4:	e7fe      	b.n	80005e4 <main+0x5c>
  status = xTaskCreate(Task2_Handler, "Task-2", 100, NULL, 2, &task2_handle);
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <main+0xb0>)
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2302      	movs	r3, #2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2264      	movs	r2, #100	; 0x64
 80005f2:	4912      	ldr	r1, [pc, #72]	; (800063c <main+0xb4>)
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <main+0xb8>)
 80005f6:	f002 fc09 	bl	8002e0c <xTaskCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <main+0xac>)
 80005fe:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <main+0xac>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0x96>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	603b      	str	r3, [r7, #0]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0x94>

  //Start freeRTOS scheduler
  vTaskStartScheduler();
 800061e:	f002 fd7d 	bl	800311c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0x9a>
 8000624:	e0001000 	.word	0xe0001000
 8000628:	20000030 	.word	0x20000030
 800062c:	080062e0 	.word	0x080062e0
 8000630:	08000bd9 	.word	0x08000bd9
 8000634:	20000038 	.word	0x20000038
 8000638:	20000034 	.word	0x20000034
 800063c:	080062e8 	.word	0x080062e8
 8000640:	08000c01 	.word	0x08000c01

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fe30 	bl	80062b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a28      	ldr	r2, [pc, #160]	; (8000714 <SystemClock_Config+0xd0>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd4>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006bc:	2332      	movs	r3, #50	; 0x32
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fead 	bl	800142c <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d8:	f000 fab8 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f90e 	bl	800191c <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000706:	f000 faa1 	bl	8000c4c <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	; 0x38
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
 8000736:	4bb1      	ldr	r3, [pc, #708]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4ab0      	ldr	r2, [pc, #704]	; (80009fc <MX_GPIO_Init+0x2e0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4bae      	ldr	r3, [pc, #696]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	623b      	str	r3, [r7, #32]
 800074c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	4baa      	ldr	r3, [pc, #680]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4aa9      	ldr	r2, [pc, #676]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4ba7      	ldr	r3, [pc, #668]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0320 	and.w	r3, r3, #32
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4ba3      	ldr	r3, [pc, #652]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4aa2      	ldr	r2, [pc, #648]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4ba0      	ldr	r3, [pc, #640]	; (80009fc <MX_GPIO_Init+0x2e0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b9c      	ldr	r3, [pc, #624]	; (80009fc <MX_GPIO_Init+0x2e0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a9b      	ldr	r2, [pc, #620]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b99      	ldr	r3, [pc, #612]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b95      	ldr	r3, [pc, #596]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a94      	ldr	r2, [pc, #592]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b92      	ldr	r3, [pc, #584]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b8e      	ldr	r3, [pc, #568]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a8d      	ldr	r2, [pc, #564]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b8b      	ldr	r3, [pc, #556]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b87      	ldr	r3, [pc, #540]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a86      	ldr	r2, [pc, #536]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b84      	ldr	r3, [pc, #528]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b80      	ldr	r3, [pc, #512]	; (80009fc <MX_GPIO_Init+0x2e0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a7f      	ldr	r2, [pc, #508]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b7d      	ldr	r3, [pc, #500]	; (80009fc <MX_GPIO_Init+0x2e0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2136      	movs	r1, #54	; 0x36
 8000816:	487a      	ldr	r0, [pc, #488]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 8000818:	f000 fdee 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	4878      	ldr	r0, [pc, #480]	; (8000a04 <MX_GPIO_Init+0x2e8>)
 8000822:	f000 fde9 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800082c:	4876      	ldr	r0, [pc, #472]	; (8000a08 <MX_GPIO_Init+0x2ec>)
 800082e:	f000 fde3 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000838:	4874      	ldr	r0, [pc, #464]	; (8000a0c <MX_GPIO_Init+0x2f0>)
 800083a:	f000 fddd 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800083e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000850:	230c      	movs	r3, #12
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	486d      	ldr	r0, [pc, #436]	; (8000a10 <MX_GPIO_Init+0x2f4>)
 800085c:	f000 fc20 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000860:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000872:	2305      	movs	r3, #5
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	4864      	ldr	r0, [pc, #400]	; (8000a10 <MX_GPIO_Init+0x2f4>)
 800087e:	f000 fc0f 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000894:	230e      	movs	r3, #14
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	485c      	ldr	r0, [pc, #368]	; (8000a10 <MX_GPIO_Init+0x2f4>)
 80008a0:	f000 fbfe 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80008a4:	2301      	movs	r3, #1
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b4:	230c      	movs	r3, #12
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	4850      	ldr	r0, [pc, #320]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80008c0:	f000 fbee 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin LD6_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin|LD6_Pin;
 80008c4:	2336      	movs	r3, #54	; 0x36
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4849      	ldr	r0, [pc, #292]	; (8000a00 <MX_GPIO_Init+0x2e4>)
 80008dc:	f000 fbe0 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008e0:	f248 0307 	movw	r3, #32775	; 0x8007
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4843      	ldr	r0, [pc, #268]	; (8000a04 <MX_GPIO_Init+0x2e8>)
 80008f8:	f000 fbd2 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80008fc:	f641 0358 	movw	r3, #6232	; 0x1858
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800090e:	230e      	movs	r3, #14
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	483a      	ldr	r0, [pc, #232]	; (8000a04 <MX_GPIO_Init+0x2e8>)
 800091a:	f000 fbc1 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	4833      	ldr	r0, [pc, #204]	; (8000a04 <MX_GPIO_Init+0x2e8>)
 8000936:	f000 fbb3 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800093a:	2303      	movs	r3, #3
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800094a:	2309      	movs	r3, #9
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	482f      	ldr	r0, [pc, #188]	; (8000a14 <MX_GPIO_Init+0x2f8>)
 8000956:	f000 fba3 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800095a:	2304      	movs	r3, #4
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	4829      	ldr	r0, [pc, #164]	; (8000a14 <MX_GPIO_Init+0x2f8>)
 800096e:	f000 fb97 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000972:	f248 1333 	movw	r3, #33075	; 0x8133
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000984:	230c      	movs	r3, #12
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	481f      	ldr	r0, [pc, #124]	; (8000a0c <MX_GPIO_Init+0x2f0>)
 8000990:	f000 fb86 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000994:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a6:	230c      	movs	r3, #12
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4819      	ldr	r0, [pc, #100]	; (8000a18 <MX_GPIO_Init+0x2fc>)
 80009b2:	f000 fb75 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009b6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c8:	230e      	movs	r3, #14
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4810      	ldr	r0, [pc, #64]	; (8000a14 <MX_GPIO_Init+0x2f8>)
 80009d4:	f000 fb64 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80009d8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80009ea:	230c      	movs	r3, #12
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <MX_GPIO_Init+0x2f8>)
 80009f6:	f000 fb53 	bl	80010a0 <HAL_GPIO_Init>
 80009fa:	e00f      	b.n	8000a1c <MX_GPIO_Init+0x300>
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40021800 	.word	0x40021800
 8000a10:	40021400 	.word	0x40021400
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40021000 	.word	0x40021000

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4864      	ldr	r0, [pc, #400]	; (8000bc4 <MX_GPIO_Init+0x4a8>)
 8000a32:	f000 fb35 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a36:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	485d      	ldr	r0, [pc, #372]	; (8000bc8 <MX_GPIO_Init+0x4ac>)
 8000a54:	f000 fb24 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4856      	ldr	r0, [pc, #344]	; (8000bc8 <MX_GPIO_Init+0x4ac>)
 8000a6e:	f000 fb17 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	484f      	ldr	r0, [pc, #316]	; (8000bc8 <MX_GPIO_Init+0x4ac>)
 8000a8c:	f000 fb08 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a90:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aa2:	230e      	movs	r3, #14
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4847      	ldr	r0, [pc, #284]	; (8000bcc <MX_GPIO_Init+0x4b0>)
 8000aae:	f000 faf7 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ab2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac4:	230e      	movs	r3, #14
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	4840      	ldr	r0, [pc, #256]	; (8000bd0 <MX_GPIO_Init+0x4b4>)
 8000ad0:	f000 fae6 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <MX_GPIO_Init+0x4b4>)
 8000af2:	f000 fad5 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4830      	ldr	r0, [pc, #192]	; (8000bd4 <MX_GPIO_Init+0x4b8>)
 8000b14:	f000 fac4 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4827      	ldr	r0, [pc, #156]	; (8000bd4 <MX_GPIO_Init+0x4b8>)
 8000b36:	f000 fab3 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b3a:	2348      	movs	r3, #72	; 0x48
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b4a:	230e      	movs	r3, #14
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	481c      	ldr	r0, [pc, #112]	; (8000bc8 <MX_GPIO_Init+0x4ac>)
 8000b56:	f000 faa3 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b6c:	2309      	movs	r3, #9
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4815      	ldr	r0, [pc, #84]	; (8000bcc <MX_GPIO_Init+0x4b0>)
 8000b78:	f000 fa92 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000b7c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_GPIO_Init+0x4b0>)
 8000b96:	f000 fa83 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b9a:	2360      	movs	r3, #96	; 0x60
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000baa:	230c      	movs	r3, #12
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <MX_GPIO_Init+0x4a8>)
 8000bb6:	f000 fa73 	bl	80010a0 <HAL_GPIO_Init>

}
 8000bba:	bf00      	nop
 8000bbc:	3738      	adds	r7, #56	; 0x38
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40020c00 	.word	0x40020c00
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameters){
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	while(1){
		GPIOG->ODR &= ~(0x03 << 13); //Reset both LEDs
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <Task1_Handler+0x24>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <Task1_Handler+0x24>)
 8000be6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000bea:	6153      	str	r3, [r2, #20]
		GPIOG->ODR |= (0x01 << 13); //Turn on GREEN LED
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <Task1_Handler+0x24>)
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	4a02      	ldr	r2, [pc, #8]	; (8000bfc <Task1_Handler+0x24>)
 8000bf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bf6:	6153      	str	r3, [r2, #20]
		GPIOG->ODR &= ~(0x03 << 13); //Reset both LEDs
 8000bf8:	e7f2      	b.n	8000be0 <Task1_Handler+0x8>
 8000bfa:	bf00      	nop
 8000bfc:	40021800 	.word	0x40021800

08000c00 <Task2_Handler>:
//		taskYIELD();
	}
	GPIOG->ODR &= ~(0x01 << 13);
	vTaskDelete(task1_handle);
}
static void Task2_Handler(void* parameters){
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	while(1){
		GPIOG->ODR &= ~(0x03 << 13); //Reset both LEDs
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <Task2_Handler+0x24>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <Task2_Handler+0x24>)
 8000c0e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000c12:	6153      	str	r3, [r2, #20]
		GPIOG->ODR |= (0x01 << 14); //Turn on RED LED
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <Task2_Handler+0x24>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	4a02      	ldr	r2, [pc, #8]	; (8000c24 <Task2_Handler+0x24>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6153      	str	r3, [r2, #20]
		GPIOG->ODR &= ~(0x03 << 13); //Reset both LEDs
 8000c20:	e7f2      	b.n	8000c08 <Task2_Handler+0x8>
 8000c22:	bf00      	nop
 8000c24:	40021800 	.word	0x40021800

08000c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3a:	f000 f92f 	bl	8000e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40001000 	.word	0x40001000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c96:	f003 fc27 	bl	80044e8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <HAL_InitTick+0xe4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <HAL_InitTick+0xe4>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <HAL_InitTick+0xe4>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd4:	f107 0210 	add.w	r2, r7, #16
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 f828 	bl	8001d34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d103      	bne.n	8000cf6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cee:	f001 f80d 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8000cf2:	6378      	str	r0, [r7, #52]	; 0x34
 8000cf4:	e004      	b.n	8000d00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cf6:	f001 f809 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d02:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <HAL_InitTick+0xe8>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	0c9b      	lsrs	r3, r3, #18
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_InitTick+0xec>)
 8000d10:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <HAL_InitTick+0xf0>)
 8000d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_InitTick+0xec>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <HAL_InitTick+0xec>)
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_InitTick+0xec>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_InitTick+0xec>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_InitTick+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d34:	4817      	ldr	r0, [pc, #92]	; (8000d94 <HAL_InitTick+0xec>)
 8000d36:	f001 f82f 	bl	8001d98 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d11b      	bne.n	8000d80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d48:	4812      	ldr	r0, [pc, #72]	; (8000d94 <HAL_InitTick+0xec>)
 8000d4a:	f001 f87f 	bl	8001e4c <HAL_TIM_Base_Start_IT>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d5c:	2036      	movs	r0, #54	; 0x36
 8000d5e:	f000 f991 	bl	8001084 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d808      	bhi.n	8000d7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2036      	movs	r0, #54	; 0x36
 8000d6e:	f000 f96d 	bl	800104c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_InitTick+0xf4>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e002      	b.n	8000d80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	431bde83 	.word	0x431bde83
 8000d94:	2000003c 	.word	0x2000003c
 8000d98:	40001000 	.word	0x40001000
 8000d9c:	20000004 	.word	0x20000004

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM6_DAC_IRQHandler+0x10>)
 8000dd2:	f001 f8ab 	bl	8001f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000003c 	.word	0x2000003c

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0a:	490e      	ldr	r1, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e20:	4c0b      	ldr	r4, [pc, #44]	; (8000e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffd7 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f005 f9ff 	bl	8006234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fba7 	bl	8000588 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e48:	08006408 	.word	0x08006408
  ldr r2, =_sbss
 8000e4c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e50:	200144a4 	.word	0x200144a4

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f8d8 	bl	8001036 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff ff0e 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fee4 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000084 	.word	0x20000084

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000084 	.word	0x20000084

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff4c 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105e:	f7ff ff61 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 8001062:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	6978      	ldr	r0, [r7, #20]
 800106a:	f7ff ffb1 	bl	8000fd0 <NVIC_EncodePriority>
 800106e:	4602      	mov	r2, r0
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff80 	bl	8000f7c <__NVIC_SetPriority>
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff54 	bl	8000f40 <__NVIC_EnableIRQ>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	e177      	b.n	80013ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	f040 8166 	bne.w	80013a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d005      	beq.n	80010f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d130      	bne.n	8001154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	f003 0201 	and.w	r2, r3, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b03      	cmp	r3, #3
 800115e:	d017      	beq.n	8001190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d123      	bne.n	80011e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	69b9      	ldr	r1, [r7, #24]
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0203 	and.w	r2, r3, #3
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80c0 	beq.w	80013a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <HAL_GPIO_Init+0x324>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a65      	ldr	r2, [pc, #404]	; (80013c4 <HAL_GPIO_Init+0x324>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b63      	ldr	r3, [pc, #396]	; (80013c4 <HAL_GPIO_Init+0x324>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001242:	4a61      	ldr	r2, [pc, #388]	; (80013c8 <HAL_GPIO_Init+0x328>)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a58      	ldr	r2, [pc, #352]	; (80013cc <HAL_GPIO_Init+0x32c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d037      	beq.n	80012de <HAL_GPIO_Init+0x23e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a57      	ldr	r2, [pc, #348]	; (80013d0 <HAL_GPIO_Init+0x330>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d031      	beq.n	80012da <HAL_GPIO_Init+0x23a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a56      	ldr	r2, [pc, #344]	; (80013d4 <HAL_GPIO_Init+0x334>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d02b      	beq.n	80012d6 <HAL_GPIO_Init+0x236>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a55      	ldr	r2, [pc, #340]	; (80013d8 <HAL_GPIO_Init+0x338>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d025      	beq.n	80012d2 <HAL_GPIO_Init+0x232>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a54      	ldr	r2, [pc, #336]	; (80013dc <HAL_GPIO_Init+0x33c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d01f      	beq.n	80012ce <HAL_GPIO_Init+0x22e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a53      	ldr	r2, [pc, #332]	; (80013e0 <HAL_GPIO_Init+0x340>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d019      	beq.n	80012ca <HAL_GPIO_Init+0x22a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a52      	ldr	r2, [pc, #328]	; (80013e4 <HAL_GPIO_Init+0x344>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0x226>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a51      	ldr	r2, [pc, #324]	; (80013e8 <HAL_GPIO_Init+0x348>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x222>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a50      	ldr	r2, [pc, #320]	; (80013ec <HAL_GPIO_Init+0x34c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x21e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4f      	ldr	r2, [pc, #316]	; (80013f0 <HAL_GPIO_Init+0x350>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x21a>
 80012b6:	2309      	movs	r3, #9
 80012b8:	e012      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012ba:	230a      	movs	r3, #10
 80012bc:	e010      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012be:	2308      	movs	r3, #8
 80012c0:	e00e      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012c2:	2307      	movs	r3, #7
 80012c4:	e00c      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012c6:	2306      	movs	r3, #6
 80012c8:	e00a      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012ca:	2305      	movs	r3, #5
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x240>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x328>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fe:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <HAL_GPIO_Init+0x354>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001322:	4a34      	ldr	r2, [pc, #208]	; (80013f4 <HAL_GPIO_Init+0x354>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001328:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <HAL_GPIO_Init+0x354>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800134c:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <HAL_GPIO_Init+0x354>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_GPIO_Init+0x354>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001376:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <HAL_GPIO_Init+0x354>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_GPIO_Init+0x354>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <HAL_GPIO_Init+0x354>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f ae84 	bls.w	80010bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40021400 	.word	0x40021400
 80013e4:	40021800 	.word	0x40021800
 80013e8:	40021c00 	.word	0x40021c00
 80013ec:	40022000 	.word	0x40022000
 80013f0:	40022400 	.word	0x40022400
 80013f4:	40013c00 	.word	0x40013c00

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e267      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d075      	beq.n	8001536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b04      	cmp	r3, #4
 8001454:	d00c      	beq.n	8001470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4b85      	ldr	r3, [pc, #532]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145e:	2b08      	cmp	r3, #8
 8001460:	d112      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001462:	4b82      	ldr	r3, [pc, #520]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146e:	d10b      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4b7e      	ldr	r3, [pc, #504]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <HAL_RCC_OscConfig+0x108>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d157      	bne.n	8001534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e242      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x74>
 8001492:	4b76      	ldr	r3, [pc, #472]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a75      	ldr	r2, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e01d      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
 80014aa:	4b70      	ldr	r3, [pc, #448]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6f      	ldr	r2, [pc, #444]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b6d      	ldr	r3, [pc, #436]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6c      	ldr	r2, [pc, #432]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014c4:	4b69      	ldr	r3, [pc, #420]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a68      	ldr	r2, [pc, #416]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b66      	ldr	r3, [pc, #408]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a65      	ldr	r2, [pc, #404]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fcee 	bl	8000ec4 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fcea 	bl	8000ec4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e207      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b5b      	ldr	r3, [pc, #364]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0xc0>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fcda 	bl	8000ec4 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fcd6 	bl	8000ec4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1f3      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	4b51      	ldr	r3, [pc, #324]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0xe8>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d063      	beq.n	800160a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154e:	4b47      	ldr	r3, [pc, #284]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001556:	2b08      	cmp	r3, #8
 8001558:	d11c      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <HAL_RCC_OscConfig+0x240>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d116      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d001      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e1c7      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	4b3b      	ldr	r3, [pc, #236]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4937      	ldr	r1, [pc, #220]	; (800166c <HAL_RCC_OscConfig+0x240>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	e03a      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159c:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_RCC_OscConfig+0x244>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fc8f 	bl	8000ec4 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fc8b 	bl	8000ec4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1a8      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4925      	ldr	r1, [pc, #148]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
 80015dc:	e015      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_RCC_OscConfig+0x244>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fc6e 	bl	8000ec4 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ec:	f7ff fc6a 	bl	8000ec4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e187      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d036      	beq.n	8001684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d016      	beq.n	800164c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_RCC_OscConfig+0x248>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fc4e 	bl	8000ec4 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fc4a 	bl	8000ec4 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e167      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x200>
 800164a:	e01b      	b.n	8001684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_OscConfig+0x248>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fc37 	bl	8000ec4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	e00e      	b.n	8001678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fc33 	bl	8000ec4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d907      	bls.n	8001678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e150      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
 800166c:	40023800 	.word	0x40023800
 8001670:	42470000 	.word	0x42470000
 8001674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ea      	bne.n	800165a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8097 	beq.w	80017c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b81      	ldr	r3, [pc, #516]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b7d      	ldr	r3, [pc, #500]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a7c      	ldr	r2, [pc, #496]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b7a      	ldr	r3, [pc, #488]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b77      	ldr	r3, [pc, #476]	; (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b74      	ldr	r3, [pc, #464]	; (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a73      	ldr	r2, [pc, #460]	; (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fbf3 	bl	8000ec4 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff fbef 	bl	8000ec4 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e10c      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x2ea>
 8001708:	4b64      	ldr	r3, [pc, #400]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a63      	ldr	r2, [pc, #396]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e01c      	b.n	8001750 <HAL_RCC_OscConfig+0x324>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b05      	cmp	r3, #5
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x30c>
 800171e:	4b5f      	ldr	r3, [pc, #380]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a5e      	ldr	r2, [pc, #376]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a5b      	ldr	r2, [pc, #364]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0x324>
 8001738:	4b58      	ldr	r3, [pc, #352]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a57      	ldr	r2, [pc, #348]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800174a:	f023 0304 	bic.w	r3, r3, #4
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d015      	beq.n	8001784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fbb4 	bl	8000ec4 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff fbb0 	bl	8000ec4 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0cb      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	4b49      	ldr	r3, [pc, #292]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0ee      	beq.n	8001760 <HAL_RCC_OscConfig+0x334>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fb9e 	bl	8000ec4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff fb9a 	bl	8000ec4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0b5      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ee      	bne.n	800178c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a38      	ldr	r2, [pc, #224]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80017ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a1 	beq.w	800190c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d05c      	beq.n	8001890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d141      	bne.n	8001862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <HAL_RCC_OscConfig+0x478>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb6e 	bl	8000ec4 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fb6a 	bl	8000ec4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e087      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	491b      	ldr	r1, [pc, #108]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x478>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fb43 	bl	8000ec4 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff fb3f 	bl	8000ec4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e05c      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x416>
 8001860:	e054      	b.n	800190c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_RCC_OscConfig+0x478>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fb2c 	bl	8000ec4 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fb28 	bl	8000ec4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e045      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x444>
 800188e:	e03d      	b.n	800190c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e038      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000
 80018a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x4ec>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d028      	beq.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d121      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d11a      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d8:	4013      	ands	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d111      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	3b01      	subs	r3, #1
 80018f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0cc      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d90c      	bls.n	8001958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0b8      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800197a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	494d      	ldr	r1, [pc, #308]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d044      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d119      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e07f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d003      	beq.n	80019da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	4b3f      	ldr	r3, [pc, #252]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e067      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 0203 	bic.w	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4934      	ldr	r1, [pc, #208]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a0c:	f7ff fa5a 	bl	8000ec4 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff fa56 	bl	8000ec4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e04f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 020c 	and.w	r2, r3, #12
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1eb      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d20c      	bcs.n	8001a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e032      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4916      	ldr	r1, [pc, #88]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa2:	f000 f821 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	490a      	ldr	r1, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	5ccb      	ldrb	r3, [r1, r3]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f8f0 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	080063b8 	.word	0x080063b8
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aec:	b094      	sub	sp, #80	; 0x50
 8001aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	647b      	str	r3, [r7, #68]	; 0x44
 8001af4:	2300      	movs	r3, #0
 8001af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af8:	2300      	movs	r3, #0
 8001afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b00:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d00d      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x40>
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	f200 80e1 	bhi.w	8001cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x34>
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d003      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b1a:	e0db      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b20:	e0db      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b22:	4b73      	ldr	r3, [pc, #460]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b26:	e0d8      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b28:	4b6f      	ldr	r3, [pc, #444]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b32:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3e:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	099b      	lsrs	r3, r3, #6
 8001b44:	2200      	movs	r2, #0
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
 8001b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	0159      	lsls	r1, r3, #5
 8001b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6c:	0150      	lsls	r0, r2, #5
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4621      	mov	r1, r4
 8001b74:	1a51      	subs	r1, r2, r1
 8001b76:	6139      	str	r1, [r7, #16]
 8001b78:	4629      	mov	r1, r5
 8001b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b8c:	4659      	mov	r1, fp
 8001b8e:	018b      	lsls	r3, r1, #6
 8001b90:	4651      	mov	r1, sl
 8001b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b96:	4651      	mov	r1, sl
 8001b98:	018a      	lsls	r2, r1, #6
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba0:	4659      	mov	r1, fp
 8001ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	eb18 0303 	adds.w	r3, r8, r3
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	eb49 0303 	adc.w	r3, r9, r3
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bda:	4629      	mov	r1, r5
 8001bdc:	024b      	lsls	r3, r1, #9
 8001bde:	4621      	mov	r1, r4
 8001be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be4:	4621      	mov	r1, r4
 8001be6:	024a      	lsls	r2, r1, #9
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bee:	2200      	movs	r2, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bf8:	f7fe fb44 	bl	8000284 <__aeabi_uldivmod>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4613      	mov	r3, r2
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c04:	e058      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c06:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	4611      	mov	r1, r2
 8001c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c20:	4642      	mov	r2, r8
 8001c22:	464b      	mov	r3, r9
 8001c24:	f04f 0000 	mov.w	r0, #0
 8001c28:	f04f 0100 	mov.w	r1, #0
 8001c2c:	0159      	lsls	r1, r3, #5
 8001c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c32:	0150      	lsls	r0, r2, #5
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4641      	mov	r1, r8
 8001c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c3e:	4649      	mov	r1, r9
 8001c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c58:	ebb2 040a 	subs.w	r4, r2, sl
 8001c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	00eb      	lsls	r3, r5, #3
 8001c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6e:	00e2      	lsls	r2, r4, #3
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	4643      	mov	r3, r8
 8001c76:	18e3      	adds	r3, r4, r3
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	eb45 0303 	adc.w	r3, r5, r3
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8e:	4629      	mov	r1, r5
 8001c90:	028b      	lsls	r3, r1, #10
 8001c92:	4621      	mov	r1, r4
 8001c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c98:	4621      	mov	r1, r4
 8001c9a:	028a      	lsls	r2, r1, #10
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	61fa      	str	r2, [r7, #28]
 8001ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cac:	f7fe faea 	bl	8000284 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd2:	e002      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3750      	adds	r7, #80	; 0x50
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	00f42400 	.word	0x00f42400
 8001cf0:	007a1200 	.word	0x007a1200

08001cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000000 	.word	0x20000000

08001d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d10:	f7ff fff0 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0a9b      	lsrs	r3, r3, #10
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	080063c8 	.word	0x080063c8

08001d34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	220f      	movs	r2, #15
 8001d42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_GetClockConfig+0x5c>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_RCC_GetClockConfig+0x5c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	08db      	lsrs	r3, r3, #3
 8001d6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <HAL_RCC_GetClockConfig+0x60>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 020f 	and.w	r2, r3, #15
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	601a      	str	r2, [r3, #0]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e041      	b.n	8001e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f839 	bl	8001e36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f000 f9d8 	bl	800218c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d001      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e04e      	b.n	8001f02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d022      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d01d      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d018      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x80>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_TIM_Base_Start_IT+0xd0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_TIM_Base_Start_IT+0xd4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x80>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x80>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d111      	bne.n	8001ef0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d010      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eee:	e007      	b.n	8001f00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	40000c00 	.word	0x40000c00
 8001f20:	40010400 	.word	0x40010400
 8001f24:	40014000 	.word	0x40014000
 8001f28:	40001800 	.word	0x40001800

08001f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d122      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d11b      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0202 	mvn.w	r2, #2
 8001f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8ee 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8e0 	bl	800213c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8f1 	bl	8002164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0204 	mvn.w	r2, #4
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8c4 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8b6 	bl	800213c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f8c7 	bl	8002164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d122      	bne.n	8002030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d11b      	bne.n	8002030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0208 	mvn.w	r2, #8
 8002000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2204      	movs	r2, #4
 8002006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f89a 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f88c 	bl	800213c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f89d 	bl	8002164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b10      	cmp	r3, #16
 800203c:	d122      	bne.n	8002084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b10      	cmp	r3, #16
 800204a:	d11b      	bne.n	8002084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0210 	mvn.w	r2, #16
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2208      	movs	r2, #8
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f870 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f862 	bl	800213c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f873 	bl	8002164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0201 	mvn.w	r2, #1
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fdbc 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	2b80      	cmp	r3, #128	; 0x80
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c8:	2b80      	cmp	r3, #128	; 0x80
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f902 	bl	80022e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e6:	2b40      	cmp	r3, #64	; 0x40
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f838 	bl	8002178 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b20      	cmp	r3, #32
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b20      	cmp	r3, #32
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0220 	mvn.w	r2, #32
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8cc 	bl	80022cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a40      	ldr	r2, [pc, #256]	; (80022a0 <TIM_Base_SetConfig+0x114>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021aa:	d00f      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a3d      	ldr	r2, [pc, #244]	; (80022a4 <TIM_Base_SetConfig+0x118>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00b      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <TIM_Base_SetConfig+0x11c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d007      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <TIM_Base_SetConfig+0x120>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d003      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <TIM_Base_SetConfig+0x124>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d108      	bne.n	80021de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <TIM_Base_SetConfig+0x114>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d02b      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d027      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <TIM_Base_SetConfig+0x118>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d023      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <TIM_Base_SetConfig+0x11c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01f      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <TIM_Base_SetConfig+0x120>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01b      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <TIM_Base_SetConfig+0x124>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d017      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <TIM_Base_SetConfig+0x128>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a27      	ldr	r2, [pc, #156]	; (80022b8 <TIM_Base_SetConfig+0x12c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00f      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a26      	ldr	r2, [pc, #152]	; (80022bc <TIM_Base_SetConfig+0x130>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00b      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <TIM_Base_SetConfig+0x134>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <TIM_Base_SetConfig+0x138>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d003      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <TIM_Base_SetConfig+0x13c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d108      	bne.n	8002250 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <TIM_Base_SetConfig+0x114>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d003      	beq.n	8002284 <TIM_Base_SetConfig+0xf8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <TIM_Base_SetConfig+0x124>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d103      	bne.n	800228c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	615a      	str	r2, [r3, #20]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40000400 	.word	0x40000400
 80022a8:	40000800 	.word	0x40000800
 80022ac:	40000c00 	.word	0x40000c00
 80022b0:	40010400 	.word	0x40010400
 80022b4:	40014000 	.word	0x40014000
 80022b8:	40014400 	.word	0x40014400
 80022bc:	40014800 	.word	0x40014800
 80022c0:	40001800 	.word	0x40001800
 80022c4:	40001c00 	.word	0x40001c00
 80022c8:	40002000 	.word	0x40002000

080022cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002300:	f000 ff6e 	bl	80031e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <pvPortMalloc+0x160>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800230c:	f000 f908 	bl	8002520 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002316:	2208      	movs	r2, #8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	3308      	adds	r3, #8
 8002322:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	43db      	mvns	r3, r3
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	429a      	cmp	r2, r3
 800232c:	d804      	bhi.n	8002338 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	4413      	add	r3, r2
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	e001      	b.n	800233c <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db70      	blt.n	8002424 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d06d      	beq.n	8002424 <pvPortMalloc+0x130>
 8002348:	4b43      	ldr	r3, [pc, #268]	; (8002458 <pvPortMalloc+0x164>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d868      	bhi.n	8002424 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002352:	4b42      	ldr	r3, [pc, #264]	; (800245c <pvPortMalloc+0x168>)
 8002354:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <pvPortMalloc+0x168>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800235c:	e004      	b.n	8002368 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	d903      	bls.n	800237a <pvPortMalloc+0x86>
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f1      	bne.n	800235e <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800237a:	4b36      	ldr	r3, [pc, #216]	; (8002454 <pvPortMalloc+0x160>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	429a      	cmp	r2, r3
 8002382:	d04f      	beq.n	8002424 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2208      	movs	r2, #8
 800238a:	4413      	add	r3, r2
 800238c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1ad2      	subs	r2, r2, r3
 800239e:	2308      	movs	r3, #8
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d91f      	bls.n	80023e6 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <pvPortMalloc+0xda>
        __asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	613b      	str	r3, [r7, #16]
    }
 80023ca:	bf00      	nop
 80023cc:	e7fe      	b.n	80023cc <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	1ad2      	subs	r2, r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80023e0:	6978      	ldr	r0, [r7, #20]
 80023e2:	f000 f8f9 	bl	80025d8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <pvPortMalloc+0x164>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	4a19      	ldr	r2, [pc, #100]	; (8002458 <pvPortMalloc+0x164>)
 80023f2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <pvPortMalloc+0x164>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <pvPortMalloc+0x16c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d203      	bcs.n	8002408 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <pvPortMalloc+0x164>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <pvPortMalloc+0x16c>)
 8002406:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <pvPortMalloc+0x170>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3301      	adds	r3, #1
 8002420:	4a10      	ldr	r2, [pc, #64]	; (8002464 <pvPortMalloc+0x170>)
 8002422:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002424:	f000 feea 	bl	80031fc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <pvPortMalloc+0x154>
        __asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002436:	f383 8811 	msr	BASEPRI, r3
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	60fb      	str	r3, [r7, #12]
    }
 8002444:	bf00      	nop
 8002446:	e7fe      	b.n	8002446 <pvPortMalloc+0x152>
    return pvReturn;
 8002448:	69fb      	ldr	r3, [r7, #28]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3728      	adds	r7, #40	; 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20012c90 	.word	0x20012c90
 8002458:	20012c94 	.word	0x20012c94
 800245c:	20012c88 	.word	0x20012c88
 8002460:	20012c98 	.word	0x20012c98
 8002464:	20012c9c 	.word	0x20012c9c

08002468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d049      	beq.n	800250e <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800247a:	2308      	movs	r3, #8
 800247c:	425b      	negs	r3, r3
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4413      	add	r3, r2
 8002482:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <vPortFree+0x3e>
        __asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	60fb      	str	r3, [r7, #12]
    }
 80024a2:	bf00      	nop
 80024a4:	e7fe      	b.n	80024a4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <vPortFree+0x5c>
        __asm volatile
 80024ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	60bb      	str	r3, [r7, #8]
    }
 80024c0:	bf00      	nop
 80024c2:	e7fe      	b.n	80024c2 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	0fdb      	lsrs	r3, r3, #31
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d118      	bne.n	800250e <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80024e8:	f000 fe7a 	bl	80031e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <vPortFree+0xb0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <vPortFree+0xb0>)
 80024f8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024fa:	6938      	ldr	r0, [r7, #16]
 80024fc:	f000 f86c 	bl	80025d8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <vPortFree+0xb4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <vPortFree+0xb4>)
 8002508:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800250a:	f000 fe77 	bl	80031fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20012c94 	.word	0x20012c94
 800251c:	20012ca0 	.word	0x20012ca0

08002520 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002526:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800252a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <prvHeapInit+0xa4>)
 800252e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3307      	adds	r3, #7
 800253e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0307 	bic.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <prvHeapInit+0xa4>)
 8002550:	4413      	add	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002558:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <prvHeapInit+0xa8>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <prvHeapInit+0xa8>)
 8002560:	2200      	movs	r2, #0
 8002562:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4413      	add	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800256c:	2208      	movs	r2, #8
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0307 	bic.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a13      	ldr	r2, [pc, #76]	; (80025cc <prvHeapInit+0xac>)
 8002580:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <prvHeapInit+0xac>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <prvHeapInit+0xac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	1ad2      	subs	r2, r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <prvHeapInit+0xac>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <prvHeapInit+0xb0>)
 80025ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <prvHeapInit+0xb4>)
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000088 	.word	0x20000088
 80025c8:	20012c88 	.word	0x20012c88
 80025cc:	20012c90 	.word	0x20012c90
 80025d0:	20012c98 	.word	0x20012c98
 80025d4:	20012c94 	.word	0x20012c94

080025d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <prvInsertBlockIntoFreeList+0xac>)
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e002      	b.n	80025ec <prvInsertBlockIntoFreeList+0x14>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d8f7      	bhi.n	80025e6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	4413      	add	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	d108      	bne.n	800261a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	441a      	add	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	441a      	add	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d118      	bne.n	8002660 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <prvInsertBlockIntoFreeList+0xb0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d00d      	beq.n	8002656 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	441a      	add	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e008      	b.n	8002668 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <prvInsertBlockIntoFreeList+0xb0>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e003      	b.n	8002668 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d002      	beq.n	8002676 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20012c88 	.word	0x20012c88
 8002688:	20012c90 	.word	0x20012c90

0800268c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f103 0208 	add.w	r2, r3, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f103 0208 	add.w	r2, r3, #8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0208 	add.w	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d103      	bne.n	8002706 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e00c      	b.n	8002720 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3308      	adds	r3, #8
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e002      	b.n	8002714 <vListInsert+0x2e>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	d2f6      	bcs.n	800270e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	601a      	str	r2, [r3, #0]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6892      	ldr	r2, [r2, #8]
 800276e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6852      	ldr	r2, [r2, #4]
 8002778:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d103      	bne.n	800278c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	1e5a      	subs	r2, r3, #1
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80027b6:	2301      	movs	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <xQueueGenericReset+0x2e>
        __asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	60fb      	str	r3, [r7, #12]
    }
 80027d6:	bf00      	nop
 80027d8:	e7fe      	b.n	80027d8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05d      	beq.n	800289c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d059      	beq.n	800289c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	2100      	movs	r1, #0
 80027f2:	fba3 2302 	umull	r2, r3, r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d000      	beq.n	80027fc <xQueueGenericReset+0x50>
 80027fa:	2101      	movs	r1, #1
 80027fc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d14c      	bne.n	800289c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002802:	f001 feef 	bl	80045e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	6939      	ldr	r1, [r7, #16]
 8002810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	441a      	add	r2, r3
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2200      	movs	r2, #0
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	3b01      	subs	r3, #1
 8002834:	6939      	ldr	r1, [r7, #16]
 8002836:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	441a      	add	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	22ff      	movs	r2, #255	; 0xff
 8002846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	22ff      	movs	r2, #255	; 0xff
 800284e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d114      	bne.n	8002882 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01a      	beq.n	8002896 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	3310      	adds	r3, #16
 8002864:	4618      	mov	r0, r3
 8002866:	f000 ffdb 	bl	8003820 <xTaskRemoveFromEventList>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002870:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <xQueueGenericReset+0x11c>)
 8002872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	e009      	b.n	8002896 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	3310      	adds	r3, #16
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff00 	bl	800268c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	3324      	adds	r3, #36	; 0x24
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fefb 	bl	800268c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002896:	f001 fed5 	bl	8004644 <vPortExitCritical>
 800289a:	e001      	b.n	80028a0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <xQueueGenericReset+0x110>
        __asm volatile
 80028a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	60bb      	str	r3, [r7, #8]
    }
 80028b8:	bf00      	nop
 80028ba:	e7fe      	b.n	80028ba <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80028bc:	697b      	ldr	r3, [r7, #20]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	4613      	mov	r3, r2
 80028d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d02e      	beq.n	8002942 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80028e4:	2100      	movs	r1, #0
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	fba3 2302 	umull	r2, r3, r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d000      	beq.n	80028f4 <xQueueGenericCreate+0x28>
 80028f2:	2101      	movs	r1, #1
 80028f4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d123      	bne.n	8002942 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002902:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002906:	d81c      	bhi.n	8002942 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	3350      	adds	r3, #80	; 0x50
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fcec 	bl	80022f4 <pvPortMalloc>
 800291c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01c      	beq.n	800295e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3350      	adds	r3, #80	; 0x50
 800292c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f814 	bl	8002968 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002940:	e00d      	b.n	800295e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <xQueueGenericCreate+0x92>
        __asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	613b      	str	r3, [r7, #16]
    }
 800295a:	bf00      	nop
 800295c:	e7fe      	b.n	800295c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800295e:	69fb      	ldr	r3, [r7, #28]
    }
 8002960:	4618      	mov	r0, r3
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e002      	b.n	800298a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002996:	2101      	movs	r1, #1
 8002998:	69b8      	ldr	r0, [r7, #24]
 800299a:	f7ff ff07 	bl	80027ac <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	68f9      	ldr	r1, [r7, #12]
 80029ac:	2073      	movs	r0, #115	; 0x73
 80029ae:	f002 fdc3 	bl	8005538 <SEGGER_SYSVIEW_RecordU32x3>
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b08f      	sub	sp, #60	; 0x3c
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10a      	bne.n	80029ec <xQueueReceive+0x30>
        __asm volatile
 80029d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029da:	f383 8811 	msr	BASEPRI, r3
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	623b      	str	r3, [r7, #32]
    }
 80029e8:	bf00      	nop
 80029ea:	e7fe      	b.n	80029ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <xQueueReceive+0x3e>
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <xQueueReceive+0x42>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <xQueueReceive+0x44>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xQueueReceive+0x5e>
        __asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	61fb      	str	r3, [r7, #28]
    }
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a1a:	f001 f913 	bl	8003c44 <xTaskGetSchedulerState>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <xQueueReceive+0x6e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <xQueueReceive+0x72>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <xQueueReceive+0x74>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <xQueueReceive+0x8e>
        __asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	61bb      	str	r3, [r7, #24]
    }
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a4a:	f001 fdcb 	bl	80045e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d02f      	beq.n	8002aba <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a5e:	f000 f8bd 	bl	8002bdc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 fa93 	bl	8005f90 <SEGGER_SYSVIEW_ShrinkId>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f003 fa8f 	bl	8005f90 <SEGGER_SYSVIEW_ShrinkId>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2101      	movs	r1, #1
 8002a78:	9100      	str	r1, [sp, #0]
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	205c      	movs	r0, #92	; 0x5c
 8002a7e:	f002 fdd1 	bl	8005624 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	1e5a      	subs	r2, r3, #1
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00f      	beq.n	8002ab2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	3310      	adds	r3, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fec2 	bl	8003820 <xTaskRemoveFromEventList>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002aa2:	4b4d      	ldr	r3, [pc, #308]	; (8002bd8 <xQueueReceive+0x21c>)
 8002aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002ab2:	f001 fdc7 	bl	8004644 <vPortExitCritical>
                return pdPASS;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e08a      	b.n	8002bd0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d113      	bne.n	8002ae8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ac0:	f001 fdc0 	bl	8004644 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 fa62 	bl	8005f90 <SEGGER_SYSVIEW_ShrinkId>
 8002acc:	4604      	mov	r4, r0
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f003 fa5e 	bl	8005f90 <SEGGER_SYSVIEW_ShrinkId>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	9100      	str	r1, [sp, #0]
 8002adc:	4621      	mov	r1, r4
 8002ade:	205c      	movs	r0, #92	; 0x5c
 8002ae0:	f002 fda0 	bl	8005624 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e073      	b.n	8002bd0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 ff6c 	bl	80039d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002afc:	f001 fda2 	bl	8004644 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b00:	f000 fb6e 	bl	80031e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b04:	f001 fd6e 	bl	80045e4 <vPortEnterCritical>
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d103      	bne.n	8002b1e <xQueueReceive+0x162>
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d103      	bne.n	8002b34 <xQueueReceive+0x178>
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b34:	f001 fd86 	bl	8004644 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b38:	1d3a      	adds	r2, r7, #4
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 ff5b 	bl	80039fc <xTaskCheckForTimeOut>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d124      	bne.n	8002b96 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b4e:	f000 f8bd 	bl	8002ccc <prvIsQueueEmpty>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d018      	beq.n	8002b8a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fdf1 	bl	8003748 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b68:	f000 f85e 	bl	8002c28 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b6c:	f000 fb46 	bl	80031fc <xTaskResumeAll>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f47f af69 	bne.w	8002a4a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <xQueueReceive+0x21c>)
 8002b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	e75f      	b.n	8002a4a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8c:	f000 f84c 	bl	8002c28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b90:	f000 fb34 	bl	80031fc <xTaskResumeAll>
 8002b94:	e759      	b.n	8002a4a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b98:	f000 f846 	bl	8002c28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b9c:	f000 fb2e 	bl	80031fc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ba2:	f000 f893 	bl	8002ccc <prvIsQueueEmpty>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f43f af4e 	beq.w	8002a4a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 f9ed 	bl	8005f90 <SEGGER_SYSVIEW_ShrinkId>
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f003 f9e9 	bl	8005f90 <SEGGER_SYSVIEW_ShrinkId>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	9100      	str	r1, [sp, #0]
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	205c      	movs	r0, #92	; 0x5c
 8002bca:	f002 fd2b 	bl	8005624 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bce:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3734      	adds	r7, #52	; 0x34
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	441a      	add	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d303      	bcc.n	8002c10 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68d9      	ldr	r1, [r3, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	f003 fb3e 	bl	800629c <memcpy>
    }
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c30:	f001 fcd8 	bl	80045e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c3a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c3c:	e011      	b.n	8002c62 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3324      	adds	r3, #36	; 0x24
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fde8 	bl	8003820 <xTaskRemoveFromEventList>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002c56:	f000 ff37 	bl	8003ac8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	dce9      	bgt.n	8002c3e <prvUnlockQueue+0x16>
 8002c6a:	e000      	b.n	8002c6e <prvUnlockQueue+0x46>
                    break;
 8002c6c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	22ff      	movs	r2, #255	; 0xff
 8002c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002c76:	f001 fce5 	bl	8004644 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c7a:	f001 fcb3 	bl	80045e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c84:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c86:	e011      	b.n	8002cac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3310      	adds	r3, #16
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fdc3 	bl	8003820 <xTaskRemoveFromEventList>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ca0:	f000 ff12 	bl	8003ac8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ca4:	7bbb      	ldrb	r3, [r7, #14]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dce9      	bgt.n	8002c88 <prvUnlockQueue+0x60>
 8002cb4:	e000      	b.n	8002cb8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002cb6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	22ff      	movs	r2, #255	; 0xff
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002cc0:	f001 fcc0 	bl	8004644 <vPortExitCritical>
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002cd4:	f001 fc86 	bl	80045e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	e001      	b.n	8002cea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cea:	f001 fcab 	bl	8004644 <vPortExitCritical>

    return xReturn;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	60fb      	str	r3, [r7, #12]
    }
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d024      	beq.n	8002d72 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e01e      	b.n	8002d6c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <vQueueAddToRegistry+0xa8>)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d105      	bne.n	8002d4a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <vQueueAddToRegistry+0xa8>)
 8002d44:	4413      	add	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
                    break;
 8002d48:	e013      	b.n	8002d72 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <vQueueAddToRegistry+0x6e>
 8002d50:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <vQueueAddToRegistry+0xa8>)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <vQueueAddToRegistry+0xa8>)
 8002d62:	4413      	add	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b07      	cmp	r3, #7
 8002d70:	d9dd      	bls.n	8002d2e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00f      	beq.n	8002d98 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 f902 	bl	8005f90 <SEGGER_SYSVIEW_ShrinkId>
 8002d8c:	4601      	mov	r1, r0
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	2071      	movs	r0, #113	; 0x71
 8002d94:	f002 fb76 	bl	8005484 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20012ca4 	.word	0x20012ca4

08002da4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002db4:	f001 fc16 	bl	80045e4 <vPortEnterCritical>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dbe:	b25b      	sxtb	r3, r3
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d103      	bne.n	8002dce <vQueueWaitForMessageRestricted+0x2a>
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd4:	b25b      	sxtb	r3, r3
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dda:	d103      	bne.n	8002de4 <vQueueWaitForMessageRestricted+0x40>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de4:	f001 fc2e 	bl	8004644 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3324      	adds	r3, #36	; 0x24
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fcc9 	bl	8003790 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff12 	bl	8002c28 <prvUnlockQueue>
    }
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af04      	add	r7, sp, #16
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fa67 	bl	80022f4 <pvPortMalloc>
 8002e26:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d013      	beq.n	8002e56 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e2e:	2058      	movs	r0, #88	; 0x58
 8002e30:	f7ff fa60 	bl	80022f4 <pvPortMalloc>
 8002e34:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002e3c:	2258      	movs	r2, #88	; 0x58
 8002e3e:	2100      	movs	r1, #0
 8002e40:	69f8      	ldr	r0, [r7, #28]
 8002e42:	f003 fa39 	bl	80062b8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e4c:	e005      	b.n	8002e5a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f7ff fb0a 	bl	8002468 <vPortFree>
 8002e54:	e001      	b.n	8002e5a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e60:	88fa      	ldrh	r2, [r7, #6]
 8002e62:	2300      	movs	r3, #0
 8002e64:	9303      	str	r3, [sp, #12]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	9302      	str	r3, [sp, #8]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f80e 	bl	8002e98 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e7c:	69f8      	ldr	r0, [r7, #28]
 8002e7e:	f000 f899 	bl	8002fb4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e002      	b.n	8002e8e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
    }
 8002e90:	4618      	mov	r0, r3
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	21a5      	movs	r1, #165	; 0xa5
 8002eb2:	f003 fa01 	bl	80062b8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f023 0307 	bic.w	r3, r3, #7
 8002ece:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	617b      	str	r3, [r7, #20]
    }
 8002eec:	bf00      	nop
 8002eee:	e7fe      	b.n	8002eee <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01e      	beq.n	8002f34 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e012      	b.n	8002f22 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	7819      	ldrb	r1, [r3, #0]
 8002f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3334      	adds	r3, #52	; 0x34
 8002f0c:	460a      	mov	r2, r1
 8002f0e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	2b09      	cmp	r3, #9
 8002f26:	d9e9      	bls.n	8002efc <prvInitialiseNewTask+0x64>
 8002f28:	e000      	b.n	8002f2c <prvInitialiseNewTask+0x94>
            {
                break;
 8002f2a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d90a      	bls.n	8002f50 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	613b      	str	r3, [r7, #16]
    }
 8002f4c:	bf00      	nop
 8002f4e:	e7fe      	b.n	8002f4e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d901      	bls.n	8002f5a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f56:	2304      	movs	r3, #4
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f64:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	3304      	adds	r3, #4
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fbae 	bl	80026cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	3318      	adds	r3, #24
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fba9 	bl	80026cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	f1c3 0205 	rsb	r2, r3, #5
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	68f9      	ldr	r1, [r7, #12]
 8002f94:	69b8      	ldr	r0, [r7, #24]
 8002f96:	f001 f977 	bl	8004288 <pxPortInitialiseStack>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002faa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fac:	bf00      	nop
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002fb4:	b5b0      	push	{r4, r5, r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002fbc:	f001 fb12 	bl	80045e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002fc0:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <prvAddNewTaskToReadyList+0x14c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	4a4e      	ldr	r2, [pc, #312]	; (8003100 <prvAddNewTaskToReadyList+0x14c>)
 8002fc8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002fca:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <prvAddNewTaskToReadyList+0x150>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002fd2:	4a4c      	ldr	r2, [pc, #304]	; (8003104 <prvAddNewTaskToReadyList+0x150>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fd8:	4b49      	ldr	r3, [pc, #292]	; (8003100 <prvAddNewTaskToReadyList+0x14c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d110      	bne.n	8003002 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002fe0:	f000 fd96 	bl	8003b10 <prvInitialiseTaskLists>
 8002fe4:	e00d      	b.n	8003002 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002fe6:	4b48      	ldr	r3, [pc, #288]	; (8003108 <prvAddNewTaskToReadyList+0x154>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fee:	4b45      	ldr	r3, [pc, #276]	; (8003104 <prvAddNewTaskToReadyList+0x150>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d802      	bhi.n	8003002 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ffc:	4a41      	ldr	r2, [pc, #260]	; (8003104 <prvAddNewTaskToReadyList+0x150>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003002:	4b42      	ldr	r3, [pc, #264]	; (800310c <prvAddNewTaskToReadyList+0x158>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	4a40      	ldr	r2, [pc, #256]	; (800310c <prvAddNewTaskToReadyList+0x158>)
 800300a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800300c:	4b3f      	ldr	r3, [pc, #252]	; (800310c <prvAddNewTaskToReadyList+0x158>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <prvAddNewTaskToReadyList+0x94>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fef1 	bl	8005e04 <SEGGER_SYSVIEW_OnTaskCreate>
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	461d      	mov	r5, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461c      	mov	r4, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	1ae3      	subs	r3, r4, r3
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	462b      	mov	r3, r5
 8003044:	f001 fcaa 	bl	800499c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4618      	mov	r0, r3
 800304c:	f002 ff5e 	bl	8005f0c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <prvAddNewTaskToReadyList+0x15c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4313      	orrs	r3, r2
 800305e:	4a2c      	ldr	r2, [pc, #176]	; (8003110 <prvAddNewTaskToReadyList+0x15c>)
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	492b      	ldr	r1, [pc, #172]	; (8003114 <prvAddNewTaskToReadyList+0x160>)
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3304      	adds	r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	3204      	adds	r2, #4
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	1d1a      	adds	r2, r3, #4
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <prvAddNewTaskToReadyList+0x160>)
 80030a6:	441a      	add	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	615a      	str	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b0:	4918      	ldr	r1, [pc, #96]	; (8003114 <prvAddNewTaskToReadyList+0x160>)
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	1c59      	adds	r1, r3, #1
 80030c0:	4814      	ldr	r0, [pc, #80]	; (8003114 <prvAddNewTaskToReadyList+0x160>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4403      	add	r3, r0
 80030cc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030ce:	f001 fab9 	bl	8004644 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <prvAddNewTaskToReadyList+0x154>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00e      	beq.n	80030f8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <prvAddNewTaskToReadyList+0x150>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d207      	bcs.n	80030f8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <prvAddNewTaskToReadyList+0x164>)
 80030ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003100:	20012dbc 	.word	0x20012dbc
 8003104:	20012ce4 	.word	0x20012ce4
 8003108:	20012dc8 	.word	0x20012dc8
 800310c:	20012dd8 	.word	0x20012dd8
 8003110:	20012dc4 	.word	0x20012dc4
 8003114:	20012ce8 	.word	0x20012ce8
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003122:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <vTaskStartScheduler+0xa4>)
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	2300      	movs	r3, #0
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	2282      	movs	r2, #130	; 0x82
 800312e:	4925      	ldr	r1, [pc, #148]	; (80031c4 <vTaskStartScheduler+0xa8>)
 8003130:	4825      	ldr	r0, [pc, #148]	; (80031c8 <vTaskStartScheduler+0xac>)
 8003132:	f7ff fe6b 	bl	8002e0c <xTaskCreate>
 8003136:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d102      	bne.n	8003144 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800313e:	f000 fe1f 	bl	8003d80 <xTimerCreateTimerTask>
 8003142:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d124      	bne.n	8003194 <vTaskStartScheduler+0x78>
        __asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	60bb      	str	r3, [r7, #8]
    }
 800315c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <vTaskStartScheduler+0xb0>)
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <vTaskStartScheduler+0xb4>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <vTaskStartScheduler+0xb8>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003172:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <vTaskStartScheduler+0xbc>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <vTaskStartScheduler+0xa4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d102      	bne.n	8003184 <vTaskStartScheduler+0x68>
 800317e:	f002 fe25 	bl	8005dcc <SEGGER_SYSVIEW_OnIdle>
 8003182:	e004      	b.n	800318e <vTaskStartScheduler+0x72>
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <vTaskStartScheduler+0xbc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f002 fe7d 	bl	8005e88 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800318e:	f001 f909 	bl	80043a4 <xPortStartScheduler>
 8003192:	e00e      	b.n	80031b2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d10a      	bne.n	80031b2 <vTaskStartScheduler+0x96>
        __asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	607b      	str	r3, [r7, #4]
    }
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <vTaskStartScheduler+0xc0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20012de0 	.word	0x20012de0
 80031c4:	080062f0 	.word	0x080062f0
 80031c8:	08003ae1 	.word	0x08003ae1
 80031cc:	20012ddc 	.word	0x20012ddc
 80031d0:	20012dc8 	.word	0x20012dc8
 80031d4:	20012dc0 	.word	0x20012dc0
 80031d8:	20012ce4 	.word	0x20012ce4
 80031dc:	2000000c 	.word	0x2000000c

080031e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <vTaskSuspendAll+0x18>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	4a03      	ldr	r2, [pc, #12]	; (80031f8 <vTaskSuspendAll+0x18>)
 80031ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	20012de4 	.word	0x20012de4

080031fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800320a:	4b73      	ldr	r3, [pc, #460]	; (80033d8 <xTaskResumeAll+0x1dc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <xTaskResumeAll+0x2c>
        __asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	607b      	str	r3, [r7, #4]
    }
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003228:	f001 f9dc 	bl	80045e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <xTaskResumeAll+0x1dc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3b01      	subs	r3, #1
 8003232:	4a69      	ldr	r2, [pc, #420]	; (80033d8 <xTaskResumeAll+0x1dc>)
 8003234:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003236:	4b68      	ldr	r3, [pc, #416]	; (80033d8 <xTaskResumeAll+0x1dc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 80c4 	bne.w	80033c8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <xTaskResumeAll+0x1e0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80bf 	beq.w	80033c8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800324a:	e08e      	b.n	800336a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800324c:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <xTaskResumeAll+0x1e4>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	6a12      	ldr	r2, [r2, #32]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	69d2      	ldr	r2, [r2, #28]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3318      	adds	r3, #24
 8003276:	429a      	cmp	r2, r3
 8003278:	d103      	bne.n	8003282 <xTaskResumeAll+0x86>
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	6a1a      	ldr	r2, [r3, #32]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	2200      	movs	r2, #0
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	68d2      	ldr	r2, [r2, #12]
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	6892      	ldr	r2, [r2, #8]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3304      	adds	r3, #4
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d103      	bne.n	80032c0 <xTaskResumeAll+0xc4>
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2200      	movs	r2, #0
 80032c4:	615a      	str	r2, [r3, #20]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1e5a      	subs	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fe1a 	bl	8005f0c <SEGGER_SYSVIEW_OnTaskStartReady>
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	2201      	movs	r2, #1
 80032de:	409a      	lsls	r2, r3
 80032e0:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <xTaskResumeAll+0x1e8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	4a3f      	ldr	r2, [pc, #252]	; (80033e4 <xTaskResumeAll+0x1e8>)
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	493e      	ldr	r1, [pc, #248]	; (80033e8 <xTaskResumeAll+0x1ec>)
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3304      	adds	r3, #4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	3204      	adds	r2, #4
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	1d1a      	adds	r2, r3, #4
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4a2e      	ldr	r2, [pc, #184]	; (80033e8 <xTaskResumeAll+0x1ec>)
 800332e:	441a      	add	r2, r3
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	615a      	str	r2, [r3, #20]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	492b      	ldr	r1, [pc, #172]	; (80033e8 <xTaskResumeAll+0x1ec>)
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	4827      	ldr	r0, [pc, #156]	; (80033e8 <xTaskResumeAll+0x1ec>)
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4403      	add	r3, r0
 8003354:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <xTaskResumeAll+0x1f0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003364:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <xTaskResumeAll+0x1f4>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <xTaskResumeAll+0x1e4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f47f af6c 	bne.w	800324c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800337a:	f000 fc47 	bl	8003c0c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <xTaskResumeAll+0x1f8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800338a:	f000 f859 	bl	8003440 <xTaskIncrementTick>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003394:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <xTaskResumeAll+0x1f4>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3b01      	subs	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f1      	bne.n	800338a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <xTaskResumeAll+0x1f8>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <xTaskResumeAll+0x1f4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80033b4:	2301      	movs	r3, #1
 80033b6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <xTaskResumeAll+0x1fc>)
 80033ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80033c8:	f001 f93c 	bl	8004644 <vPortExitCritical>

    return xAlreadyYielded;
 80033cc:	69bb      	ldr	r3, [r7, #24]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20012de4 	.word	0x20012de4
 80033dc:	20012dbc 	.word	0x20012dbc
 80033e0:	20012d7c 	.word	0x20012d7c
 80033e4:	20012dc4 	.word	0x20012dc4
 80033e8:	20012ce8 	.word	0x20012ce8
 80033ec:	20012ce4 	.word	0x20012ce4
 80033f0:	20012dd0 	.word	0x20012dd0
 80033f4:	20012dcc 	.word	0x20012dcc
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <xTaskGetTickCount+0x1c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003408:	687b      	ldr	r3, [r7, #4]
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20012dc0 	.word	0x20012dc0

0800341c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003422:	f001 f9cb 	bl	80047bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <xTaskGetTickCountFromISR+0x20>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003430:	683b      	ldr	r3, [r7, #0]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20012dc0 	.word	0x20012dc0

08003440 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	; 0x28
 8003444:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344a:	4b7f      	ldr	r3, [pc, #508]	; (8003648 <xTaskIncrementTick+0x208>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 80f0 	bne.w	8003634 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003454:	4b7d      	ldr	r3, [pc, #500]	; (800364c <xTaskIncrementTick+0x20c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800345c:	4a7b      	ldr	r2, [pc, #492]	; (800364c <xTaskIncrementTick+0x20c>)
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d120      	bne.n	80034aa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003468:	4b79      	ldr	r3, [pc, #484]	; (8003650 <xTaskIncrementTick+0x210>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <xTaskIncrementTick+0x48>
        __asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	607b      	str	r3, [r7, #4]
    }
 8003484:	bf00      	nop
 8003486:	e7fe      	b.n	8003486 <xTaskIncrementTick+0x46>
 8003488:	4b71      	ldr	r3, [pc, #452]	; (8003650 <xTaskIncrementTick+0x210>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	4b71      	ldr	r3, [pc, #452]	; (8003654 <xTaskIncrementTick+0x214>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6f      	ldr	r2, [pc, #444]	; (8003650 <xTaskIncrementTick+0x210>)
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4a6f      	ldr	r2, [pc, #444]	; (8003654 <xTaskIncrementTick+0x214>)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b6e      	ldr	r3, [pc, #440]	; (8003658 <xTaskIncrementTick+0x218>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	4a6d      	ldr	r2, [pc, #436]	; (8003658 <xTaskIncrementTick+0x218>)
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	f000 fbb1 	bl	8003c0c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80034aa:	4b6c      	ldr	r3, [pc, #432]	; (800365c <xTaskIncrementTick+0x21c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a3a      	ldr	r2, [r7, #32]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	f0c0 80aa 	bcc.w	800360a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b6:	4b66      	ldr	r3, [pc, #408]	; (8003650 <xTaskIncrementTick+0x210>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c0:	4b66      	ldr	r3, [pc, #408]	; (800365c <xTaskIncrementTick+0x21c>)
 80034c2:	f04f 32ff 	mov.w	r2, #4294967295
 80034c6:	601a      	str	r2, [r3, #0]
                    break;
 80034c8:	e09f      	b.n	800360a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ca:	4b61      	ldr	r3, [pc, #388]	; (8003650 <xTaskIncrementTick+0x210>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80034da:	6a3a      	ldr	r2, [r7, #32]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d203      	bcs.n	80034ea <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80034e2:	4a5e      	ldr	r2, [pc, #376]	; (800365c <xTaskIncrementTick+0x21c>)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80034e8:	e08f      	b.n	800360a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	68d2      	ldr	r2, [r2, #12]
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	3304      	adds	r3, #4
 800350c:	429a      	cmp	r2, r3
 800350e:	d103      	bne.n	8003518 <xTaskIncrementTick+0xd8>
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2200      	movs	r2, #0
 800351c:	615a      	str	r2, [r3, #20]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1e5a      	subs	r2, r3, #1
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01e      	beq.n	800356e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	6a12      	ldr	r2, [r2, #32]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	69d2      	ldr	r2, [r2, #28]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	3318      	adds	r3, #24
 8003552:	429a      	cmp	r2, r3
 8003554:	d103      	bne.n	800355e <xTaskIncrementTick+0x11e>
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2200      	movs	r2, #0
 8003562:	629a      	str	r2, [r3, #40]	; 0x28
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1e5a      	subs	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4618      	mov	r0, r3
 8003572:	f002 fccb 	bl	8005f0c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	2201      	movs	r2, #1
 800357c:	409a      	lsls	r2, r3
 800357e:	4b38      	ldr	r3, [pc, #224]	; (8003660 <xTaskIncrementTick+0x220>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	4a36      	ldr	r2, [pc, #216]	; (8003660 <xTaskIncrementTick+0x220>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	4935      	ldr	r1, [pc, #212]	; (8003664 <xTaskIncrementTick+0x224>)
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3304      	adds	r3, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	3204      	adds	r2, #4
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	1d1a      	adds	r2, r3, #4
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4a26      	ldr	r2, [pc, #152]	; (8003664 <xTaskIncrementTick+0x224>)
 80035cc:	441a      	add	r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	615a      	str	r2, [r3, #20]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d6:	4923      	ldr	r1, [pc, #140]	; (8003664 <xTaskIncrementTick+0x224>)
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	1c59      	adds	r1, r3, #1
 80035e6:	481f      	ldr	r0, [pc, #124]	; (8003664 <xTaskIncrementTick+0x224>)
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4403      	add	r3, r0
 80035f2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <xTaskIncrementTick+0x228>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	429a      	cmp	r2, r3
 8003600:	f67f af59 	bls.w	80034b6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003604:	2301      	movs	r3, #1
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003608:	e755      	b.n	80034b6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800360a:	4b17      	ldr	r3, [pc, #92]	; (8003668 <xTaskIncrementTick+0x228>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003610:	4914      	ldr	r1, [pc, #80]	; (8003664 <xTaskIncrementTick+0x224>)
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d901      	bls.n	8003626 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003622:	2301      	movs	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <xTaskIncrementTick+0x22c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	e004      	b.n	800363e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <xTaskIncrementTick+0x230>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <xTaskIncrementTick+0x230>)
 800363c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003640:	4618      	mov	r0, r3
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20012de4 	.word	0x20012de4
 800364c:	20012dc0 	.word	0x20012dc0
 8003650:	20012d74 	.word	0x20012d74
 8003654:	20012d78 	.word	0x20012d78
 8003658:	20012dd4 	.word	0x20012dd4
 800365c:	20012ddc 	.word	0x20012ddc
 8003660:	20012dc4 	.word	0x20012dc4
 8003664:	20012ce8 	.word	0x20012ce8
 8003668:	20012ce4 	.word	0x20012ce4
 800366c:	20012dd0 	.word	0x20012dd0
 8003670:	20012dcc 	.word	0x20012dcc

08003674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800367a:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <vTaskSwitchContext+0xbc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003682:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <vTaskSwitchContext+0xc0>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003688:	e04d      	b.n	8003726 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800368a:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <vTaskSwitchContext+0xc0>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003690:	4b29      	ldr	r3, [pc, #164]	; (8003738 <vTaskSwitchContext+0xc4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	f1c3 031f 	rsb	r3, r3, #31
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	4925      	ldr	r1, [pc, #148]	; (800373c <vTaskSwitchContext+0xc8>)
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	607b      	str	r3, [r7, #4]
    }
 80036cc:	bf00      	nop
 80036ce:	e7fe      	b.n	80036ce <vTaskSwitchContext+0x5a>
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4a18      	ldr	r2, [pc, #96]	; (800373c <vTaskSwitchContext+0xc8>)
 80036dc:	4413      	add	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	3308      	adds	r3, #8
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d104      	bne.n	8003700 <vTaskSwitchContext+0x8c>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <vTaskSwitchContext+0xcc>)
 8003708:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <vTaskSwitchContext+0xcc>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <vTaskSwitchContext+0xd0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d102      	bne.n	800371c <vTaskSwitchContext+0xa8>
 8003716:	f002 fb59 	bl	8005dcc <SEGGER_SYSVIEW_OnIdle>
}
 800371a:	e004      	b.n	8003726 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <vTaskSwitchContext+0xcc>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f002 fbb1 	bl	8005e88 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20012de4 	.word	0x20012de4
 8003734:	20012dd0 	.word	0x20012dd0
 8003738:	20012dc4 	.word	0x20012dc4
 800373c:	20012ce8 	.word	0x20012ce8
 8003740:	20012ce4 	.word	0x20012ce4
 8003744:	20012de0 	.word	0x20012de0

08003748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	60fb      	str	r3, [r7, #12]
    }
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <vTaskPlaceOnEventList+0x44>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3318      	adds	r3, #24
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe ffb5 	bl	80026e6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800377c:	2101      	movs	r1, #1
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	f000 fa7e 	bl	8003c80 <prvAddCurrentTaskToDelayedList>
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20012ce4 	.word	0x20012ce4

08003790 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	613b      	str	r3, [r7, #16]
    }
 80037b4:	bf00      	nop
 80037b6:	e7fe      	b.n	80037b6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <vTaskPlaceOnEventListRestricted+0x8c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	61da      	str	r2, [r3, #28]
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <vTaskPlaceOnEventListRestricted+0x8c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6892      	ldr	r2, [r2, #8]
 80037ce:	621a      	str	r2, [r3, #32]
 80037d0:	4b12      	ldr	r3, [pc, #72]	; (800381c <vTaskPlaceOnEventListRestricted+0x8c>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	3218      	adds	r2, #24
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <vTaskPlaceOnEventListRestricted+0x8c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f103 0218 	add.w	r2, r3, #24
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <vTaskPlaceOnEventListRestricted+0x8c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003806:	2024      	movs	r0, #36	; 0x24
 8003808:	f001 fde2 	bl	80053d0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	68b8      	ldr	r0, [r7, #8]
 8003810:	f000 fa36 	bl	8003c80 <prvAddCurrentTaskToDelayedList>
    }
 8003814:	bf00      	nop
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20012ce4 	.word	0x20012ce4

08003820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	60fb      	str	r3, [r7, #12]
    }
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	6a3a      	ldr	r2, [r7, #32]
 8003858:	6a12      	ldr	r2, [r2, #32]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	6a3a      	ldr	r2, [r7, #32]
 8003862:	69d2      	ldr	r2, [r2, #28]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	3318      	adds	r3, #24
 800386e:	429a      	cmp	r2, r3
 8003870:	d103      	bne.n	800387a <xTaskRemoveFromEventList+0x5a>
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	6a1a      	ldr	r2, [r3, #32]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	2200      	movs	r2, #0
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800388a:	4b4b      	ldr	r3, [pc, #300]	; (80039b8 <xTaskRemoveFromEventList+0x198>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d162      	bne.n	8003958 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	6a3a      	ldr	r2, [r7, #32]
 800389e:	68d2      	ldr	r2, [r2, #12]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	6a3a      	ldr	r2, [r7, #32]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	3304      	adds	r3, #4
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d103      	bne.n	80038c0 <xTaskRemoveFromEventList+0xa0>
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	2200      	movs	r2, #0
 80038c4:	615a      	str	r2, [r3, #20]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	1e5a      	subs	r2, r3, #1
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 fb1a 	bl	8005f0c <SEGGER_SYSVIEW_OnTaskStartReady>
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	4b36      	ldr	r3, [pc, #216]	; (80039bc <xTaskRemoveFromEventList+0x19c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	4a35      	ldr	r2, [pc, #212]	; (80039bc <xTaskRemoveFromEventList+0x19c>)
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	4934      	ldr	r1, [pc, #208]	; (80039c0 <xTaskRemoveFromEventList+0x1a0>)
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3304      	adds	r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	3204      	adds	r2, #4
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	1d1a      	adds	r2, r3, #4
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4a24      	ldr	r2, [pc, #144]	; (80039c0 <xTaskRemoveFromEventList+0x1a0>)
 800392e:	441a      	add	r2, r3
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	615a      	str	r2, [r3, #20]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	4921      	ldr	r1, [pc, #132]	; (80039c0 <xTaskRemoveFromEventList+0x1a0>)
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	481d      	ldr	r0, [pc, #116]	; (80039c0 <xTaskRemoveFromEventList+0x1a0>)
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4403      	add	r3, r0
 8003954:	6019      	str	r1, [r3, #0]
 8003956:	e01b      	b.n	8003990 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <xTaskRemoveFromEventList+0x1a4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	61da      	str	r2, [r3, #28]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	621a      	str	r2, [r3, #32]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	3218      	adds	r2, #24
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f103 0218 	add.w	r2, r3, #24
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	4a10      	ldr	r2, [pc, #64]	; (80039c4 <xTaskRemoveFromEventList+0x1a4>)
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <xTaskRemoveFromEventList+0x1a4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <xTaskRemoveFromEventList+0x1a4>)
 800398e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <xTaskRemoveFromEventList+0x1a8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	429a      	cmp	r2, r3
 800399c:	d905      	bls.n	80039aa <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800399e:	2301      	movs	r3, #1
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <xTaskRemoveFromEventList+0x1ac>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e001      	b.n	80039ae <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20012de4 	.word	0x20012de4
 80039bc:	20012dc4 	.word	0x20012dc4
 80039c0:	20012ce8 	.word	0x20012ce8
 80039c4:	20012d7c 	.word	0x20012d7c
 80039c8:	20012ce4 	.word	0x20012ce4
 80039cc:	20012dd0 	.word	0x20012dd0

080039d0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <vTaskInternalSetTimeOutState+0x24>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <vTaskInternalSetTimeOutState+0x28>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	605a      	str	r2, [r3, #4]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	20012dd4 	.word	0x20012dd4
 80039f8:	20012dc0 	.word	0x20012dc0

080039fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	613b      	str	r3, [r7, #16]
    }
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	60fb      	str	r3, [r7, #12]
    }
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003a3e:	f000 fdd1 	bl	80045e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a42:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <xTaskCheckForTimeOut+0xc4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d102      	bne.n	8003a62 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	e026      	b.n	8003ab0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <xTaskCheckForTimeOut+0xc8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d00a      	beq.n	8003a84 <xTaskCheckForTimeOut+0x88>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d305      	bcc.n	8003a84 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e015      	b.n	8003ab0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d20b      	bcs.n	8003aa6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	1ad2      	subs	r2, r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff98 	bl	80039d0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	e004      	b.n	8003ab0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ab0:	f000 fdc8 	bl	8004644 <vPortExitCritical>

    return xReturn;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20012dc0 	.word	0x20012dc0
 8003ac4:	20012dd4 	.word	0x20012dd4

08003ac8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <vTaskMissedYield+0x14>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20012dd0 	.word	0x20012dd0

08003ae0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ae8:	f000 f852 	bl	8003b90 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <prvIdleTask+0x28>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d9f9      	bls.n	8003ae8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <prvIdleTask+0x2c>)
 8003af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b04:	e7f0      	b.n	8003ae8 <prvIdleTask+0x8>
 8003b06:	bf00      	nop
 8003b08:	20012ce8 	.word	0x20012ce8
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	e00c      	b.n	8003b36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <prvInitialiseTaskLists+0x60>)
 8003b28:	4413      	add	r3, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fdae 	bl	800268c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3301      	adds	r3, #1
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d9ef      	bls.n	8003b1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b3c:	480d      	ldr	r0, [pc, #52]	; (8003b74 <prvInitialiseTaskLists+0x64>)
 8003b3e:	f7fe fda5 	bl	800268c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b42:	480d      	ldr	r0, [pc, #52]	; (8003b78 <prvInitialiseTaskLists+0x68>)
 8003b44:	f7fe fda2 	bl	800268c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b48:	480c      	ldr	r0, [pc, #48]	; (8003b7c <prvInitialiseTaskLists+0x6c>)
 8003b4a:	f7fe fd9f 	bl	800268c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003b4e:	480c      	ldr	r0, [pc, #48]	; (8003b80 <prvInitialiseTaskLists+0x70>)
 8003b50:	f7fe fd9c 	bl	800268c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003b54:	480b      	ldr	r0, [pc, #44]	; (8003b84 <prvInitialiseTaskLists+0x74>)
 8003b56:	f7fe fd99 	bl	800268c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <prvInitialiseTaskLists+0x78>)
 8003b5c:	4a05      	ldr	r2, [pc, #20]	; (8003b74 <prvInitialiseTaskLists+0x64>)
 8003b5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <prvInitialiseTaskLists+0x7c>)
 8003b62:	4a05      	ldr	r2, [pc, #20]	; (8003b78 <prvInitialiseTaskLists+0x68>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20012ce8 	.word	0x20012ce8
 8003b74:	20012d4c 	.word	0x20012d4c
 8003b78:	20012d60 	.word	0x20012d60
 8003b7c:	20012d7c 	.word	0x20012d7c
 8003b80:	20012d90 	.word	0x20012d90
 8003b84:	20012da8 	.word	0x20012da8
 8003b88:	20012d74 	.word	0x20012d74
 8003b8c:	20012d78 	.word	0x20012d78

08003b90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b96:	e019      	b.n	8003bcc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003b98:	f000 fd24 	bl	80045e4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <prvCheckTasksWaitingTermination+0x50>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fdd5 	bl	8002758 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <prvCheckTasksWaitingTermination+0x54>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <prvCheckTasksWaitingTermination+0x54>)
 8003bb6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <prvCheckTasksWaitingTermination+0x58>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <prvCheckTasksWaitingTermination+0x58>)
 8003bc0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003bc2:	f000 fd3f 	bl	8004644 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f810 	bl	8003bec <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <prvCheckTasksWaitingTermination+0x58>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e1      	bne.n	8003b98 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20012d90 	.word	0x20012d90
 8003be4:	20012dbc 	.word	0x20012dbc
 8003be8:	20012da4 	.word	0x20012da4

08003bec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe fc35 	bl	8002468 <vPortFree>
            vPortFree( pxTCB );
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe fc32 	bl	8002468 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <prvResetNextTaskUnblockTime+0x30>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d104      	bne.n	8003c24 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <prvResetNextTaskUnblockTime+0x34>)
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c22:	e005      	b.n	8003c30 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <prvResetNextTaskUnblockTime+0x30>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <prvResetNextTaskUnblockTime+0x34>)
 8003c2e:	6013      	str	r3, [r2, #0]
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20012d74 	.word	0x20012d74
 8003c40:	20012ddc 	.word	0x20012ddc

08003c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <xTaskGetSchedulerState+0x34>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003c52:	2301      	movs	r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	e008      	b.n	8003c6a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <xTaskGetSchedulerState+0x38>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003c60:	2302      	movs	r3, #2
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	e001      	b.n	8003c6a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003c6a:	687b      	ldr	r3, [r7, #4]
    }
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	20012dc8 	.word	0x20012dc8
 8003c7c:	20012de4 	.word	0x20012de4

08003c80 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c90:	4b35      	ldr	r3, [pc, #212]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fd5e 	bl	8002758 <uxListRemove>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ca2:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	2201      	movs	r2, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	4a2d      	ldr	r2, [pc, #180]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003cb8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d124      	bne.n	8003d0c <prvAddCurrentTaskToDelayedList+0x8c>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d021      	beq.n	8003d0c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc8:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	609a      	str	r2, [r3, #8]
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	60da      	str	r2, [r3, #12]
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	3204      	adds	r2, #4
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	1d1a      	adds	r2, r3, #4
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	609a      	str	r2, [r3, #8]
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cfc:	615a      	str	r2, [r3, #20]
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3301      	adds	r3, #1
 8003d04:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d0a:	e026      	b.n	8003d5a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d209      	bcs.n	8003d38 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f7fe fcd8 	bl	80026e6 <vListInsert>
}
 8003d36:	e010      	b.n	8003d5a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7fe fcce 	bl	80026e6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d202      	bcs.n	8003d5a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003d54:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6013      	str	r3, [r2, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20012dc0 	.word	0x20012dc0
 8003d68:	20012ce4 	.word	0x20012ce4
 8003d6c:	20012dc4 	.word	0x20012dc4
 8003d70:	20012da8 	.word	0x20012da8
 8003d74:	20012d78 	.word	0x20012d78
 8003d78:	20012d74 	.word	0x20012d74
 8003d7c:	20012ddc 	.word	0x20012ddc

08003d80 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d8a:	f000 fa47 	bl	800421c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <xTimerCreateTimerTask+0x54>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <xTimerCreateTimerTask+0x58>)
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003da4:	490d      	ldr	r1, [pc, #52]	; (8003ddc <xTimerCreateTimerTask+0x5c>)
 8003da6:	480e      	ldr	r0, [pc, #56]	; (8003de0 <xTimerCreateTimerTask+0x60>)
 8003da8:	f7ff f830 	bl	8002e0c <xTaskCreate>
 8003dac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	603b      	str	r3, [r7, #0]
    }
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003dca:	687b      	ldr	r3, [r7, #4]
    }
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20012e18 	.word	0x20012e18
 8003dd8:	20012e1c 	.word	0x20012e1c
 8003ddc:	080062f8 	.word	0x080062f8
 8003de0:	08003e89 	.word	0x08003e89

08003de4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003df0:	e008      	b.n	8003e04 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	4413      	add	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	18d1      	adds	r1, r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f8dd 	bl	8003fd0 <prvInsertTimerInActiveList>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ea      	bne.n	8003df2 <prvReloadTimer+0xe>
        }
    }
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <prvProcessExpiredTimer+0x5c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fc89 	bl	8002758 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ffc3 	bl	8003de4 <prvReloadTimer>
 8003e5e:	e008      	b.n	8003e72 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	4798      	blx	r3
    }
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20012e10 	.word	0x20012e10

08003e88 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e90:	f107 0308 	add.w	r3, r7, #8
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f857 	bl	8003f48 <prvGetNextExpireTime>
 8003e9a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f803 	bl	8003eac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ea6:	f000 f8d5 	bl	8004054 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eaa:	e7f1      	b.n	8003e90 <prvTimerTask+0x8>

08003eac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003eb6:	f7ff f993 	bl	80031e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eba:	f107 0308 	add.w	r3, r7, #8
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f866 	bl	8003f90 <prvSampleTimeNow>
 8003ec4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d130      	bne.n	8003f2e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <prvProcessTimerOrBlockTask+0x3c>
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d806      	bhi.n	8003ee8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003eda:	f7ff f98f 	bl	80031fc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ffa1 	bl	8003e28 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ee6:	e024      	b.n	8003f32 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <prvProcessTimerOrBlockTask+0x90>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <prvProcessTimerOrBlockTask+0x50>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <prvProcessTimerOrBlockTask+0x52>
 8003efc:	2300      	movs	r3, #0
 8003efe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <prvProcessTimerOrBlockTask+0x94>)
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f7fe ff49 	bl	8002da4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f12:	f7ff f973 	bl	80031fc <xTaskResumeAll>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <prvProcessTimerOrBlockTask+0x98>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
    }
 8003f2c:	e001      	b.n	8003f32 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f2e:	f7ff f965 	bl	80031fc <xTaskResumeAll>
    }
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20012e14 	.word	0x20012e14
 8003f40:	20012e18 	.word	0x20012e18
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <prvGetNextExpireTime+0x44>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <prvGetNextExpireTime+0x16>
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	e000      	b.n	8003f60 <prvGetNextExpireTime+0x18>
 8003f5e:	2200      	movs	r2, #0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <prvGetNextExpireTime+0x44>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e001      	b.n	8003f7c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20012e10 	.word	0x20012e10

08003f90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f98:	f7ff fa30 	bl	80033fc <xTaskGetTickCount>
 8003f9c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <prvSampleTimeNow+0x3c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d205      	bcs.n	8003fb4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003fa8:	f000 f912 	bl	80041d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e002      	b.n	8003fba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003fba:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <prvSampleTimeNow+0x3c>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
    }
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20012e20 	.word	0x20012e20

08003fd0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d812      	bhi.n	800401c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e01b      	b.n	8004042 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <prvInsertTimerInActiveList+0x7c>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f7fe fb66 	bl	80026e6 <vListInsert>
 800401a:	e012      	b.n	8004042 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d206      	bcs.n	8004032 <prvInsertTimerInActiveList+0x62>
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e007      	b.n	8004042 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004032:	4b07      	ldr	r3, [pc, #28]	; (8004050 <prvInsertTimerInActiveList+0x80>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f7fe fb52 	bl	80026e6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004042:	697b      	ldr	r3, [r7, #20]
    }
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20012e14 	.word	0x20012e14
 8004050:	20012e10 	.word	0x20012e10

08004054 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800405a:	e0a6      	b.n	80041aa <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f2c0 80a2 	blt.w	80041a8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe fb6f 	bl	8002758 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff87 	bl	8003f90 <prvSampleTimeNow>
 8004082:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3b01      	subs	r3, #1
 8004088:	2b08      	cmp	r3, #8
 800408a:	f200 808e 	bhi.w	80041aa <prvProcessReceivedCommands+0x156>
 800408e:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <prvProcessReceivedCommands+0x40>)
 8004090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004094:	080040b9 	.word	0x080040b9
 8004098:	080040b9 	.word	0x080040b9
 800409c:	08004121 	.word	0x08004121
 80040a0:	08004135 	.word	0x08004135
 80040a4:	0800417f 	.word	0x0800417f
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040b9 	.word	0x080040b9
 80040b0:	08004121 	.word	0x08004121
 80040b4:	08004135 	.word	0x08004135
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	18d1      	adds	r1, r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	69f8      	ldr	r0, [r7, #28]
 80040d8:	f7ff ff7a 	bl	8003fd0 <prvInsertTimerInActiveList>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d063      	beq.n	80041aa <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	4413      	add	r3, r2
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4619      	mov	r1, r3
 80040fc:	69f8      	ldr	r0, [r7, #28]
 80040fe:	f7ff fe71 	bl	8003de4 <prvReloadTimer>
 8004102:	e008      	b.n	8004116 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	69f8      	ldr	r0, [r7, #28]
 800411c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800411e:	e044      	b.n	80041aa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004132:	e03a      	b.n	80041aa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	617b      	str	r3, [r7, #20]
    }
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	18d1      	adds	r1, r2, r3
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	69f8      	ldr	r0, [r7, #28]
 8004178:	f7ff ff2a 	bl	8003fd0 <prvInsertTimerInActiveList>
                        break;
 800417c:	e015      	b.n	80041aa <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800418c:	69f8      	ldr	r0, [r7, #28]
 800418e:	f7fe f96b 	bl	8002468 <vPortFree>
 8004192:	e00a      	b.n	80041aa <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800419a:	f023 0301 	bic.w	r3, r3, #1
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80041a6:	e000      	b.n	80041aa <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80041a8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <prvProcessReceivedCommands+0x178>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f107 0108 	add.w	r1, r7, #8
 80041b2:	2200      	movs	r2, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fc01 	bl	80029bc <xQueueReceive>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f af4d 	bne.w	800405c <prvProcessReceivedCommands+0x8>
        }
    }
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20012e18 	.word	0x20012e18

080041d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041d6:	e009      	b.n	80041ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <prvSwitchTimerLists+0x44>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80041e2:	f04f 31ff 	mov.w	r1, #4294967295
 80041e6:	6838      	ldr	r0, [r7, #0]
 80041e8:	f7ff fe1e 	bl	8003e28 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <prvSwitchTimerLists+0x44>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <prvSwitchTimerLists+0x44>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <prvSwitchTimerLists+0x48>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <prvSwitchTimerLists+0x44>)
 8004202:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <prvSwitchTimerLists+0x48>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6013      	str	r3, [r2, #0]
    }
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20012e10 	.word	0x20012e10
 8004218:	20012e14 	.word	0x20012e14

0800421c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004220:	f000 f9e0 	bl	80045e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004224:	4b12      	ldr	r3, [pc, #72]	; (8004270 <prvCheckForValidListAndQueue+0x54>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d11d      	bne.n	8004268 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800422c:	4811      	ldr	r0, [pc, #68]	; (8004274 <prvCheckForValidListAndQueue+0x58>)
 800422e:	f7fe fa2d 	bl	800268c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004232:	4811      	ldr	r0, [pc, #68]	; (8004278 <prvCheckForValidListAndQueue+0x5c>)
 8004234:	f7fe fa2a 	bl	800268c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004238:	4b10      	ldr	r3, [pc, #64]	; (800427c <prvCheckForValidListAndQueue+0x60>)
 800423a:	4a0e      	ldr	r2, [pc, #56]	; (8004274 <prvCheckForValidListAndQueue+0x58>)
 800423c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800423e:	4b10      	ldr	r3, [pc, #64]	; (8004280 <prvCheckForValidListAndQueue+0x64>)
 8004240:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <prvCheckForValidListAndQueue+0x5c>)
 8004242:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004244:	2200      	movs	r2, #0
 8004246:	210c      	movs	r1, #12
 8004248:	200a      	movs	r0, #10
 800424a:	f7fe fb3f 	bl	80028cc <xQueueGenericCreate>
 800424e:	4603      	mov	r3, r0
 8004250:	4a07      	ldr	r2, [pc, #28]	; (8004270 <prvCheckForValidListAndQueue+0x54>)
 8004252:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <prvCheckForValidListAndQueue+0x54>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <prvCheckForValidListAndQueue+0x54>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4908      	ldr	r1, [pc, #32]	; (8004284 <prvCheckForValidListAndQueue+0x68>)
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fd48 	bl	8002cf8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004268:	f000 f9ec 	bl	8004644 <vPortExitCritical>
    }
 800426c:	bf00      	nop
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20012e18 	.word	0x20012e18
 8004274:	20012de8 	.word	0x20012de8
 8004278:	20012dfc 	.word	0x20012dfc
 800427c:	20012e10 	.word	0x20012e10
 8004280:	20012e14 	.word	0x20012e14
 8004284:	08006300 	.word	0x08006300

08004288 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3b04      	subs	r3, #4
 8004298:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b04      	subs	r3, #4
 80042a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f023 0201 	bic.w	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3b04      	subs	r3, #4
 80042b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042b8:	4a0c      	ldr	r2, [pc, #48]	; (80042ec <pxPortInitialiseStack+0x64>)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3b14      	subs	r3, #20
 80042c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3b04      	subs	r3, #4
 80042ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f06f 0202 	mvn.w	r2, #2
 80042d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3b20      	subs	r3, #32
 80042dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042de:	68fb      	ldr	r3, [r7, #12]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	080042f1 	.word	0x080042f1

080042f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <prvTaskExitError+0x54>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d00a      	beq.n	800431a <prvTaskExitError+0x2a>
        __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	60fb      	str	r3, [r7, #12]
    }
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <prvTaskExitError+0x28>
        __asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60bb      	str	r3, [r7, #8]
    }
 800432c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800432e:	bf00      	nop
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0fc      	beq.n	8004330 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20000010 	.word	0x20000010
	...

08004350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <pxCurrentTCBConst2>)
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	6808      	ldr	r0, [r1, #0]
 8004356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435a:	f380 8809 	msr	PSP, r0
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f380 8811 	msr	BASEPRI, r0
 800436a:	4770      	bx	lr
 800436c:	f3af 8000 	nop.w

08004370 <pxCurrentTCBConst2>:
 8004370:	20012ce4 	.word	0x20012ce4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004378:	4808      	ldr	r0, [pc, #32]	; (800439c <prvPortStartFirstTask+0x24>)
 800437a:	6800      	ldr	r0, [r0, #0]
 800437c:	6800      	ldr	r0, [r0, #0]
 800437e:	f380 8808 	msr	MSP, r0
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8814 	msr	CONTROL, r0
 800438a:	b662      	cpsie	i
 800438c:	b661      	cpsie	f
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	df00      	svc	0
 8004398:	bf00      	nop
 800439a:	0000      	.short	0x0000
 800439c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop

080043a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043aa:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <xPortStartScheduler+0x120>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a46      	ldr	r2, [pc, #280]	; (80044c8 <xPortStartScheduler+0x124>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10a      	bne.n	80043ca <xPortStartScheduler+0x26>
        __asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	613b      	str	r3, [r7, #16]
    }
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043ca:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <xPortStartScheduler+0x120>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3f      	ldr	r2, [pc, #252]	; (80044cc <xPortStartScheduler+0x128>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10a      	bne.n	80043ea <xPortStartScheduler+0x46>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60fb      	str	r3, [r7, #12]
    }
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <xPortStartScheduler+0x12c>)
 80043ec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	22ff      	movs	r2, #255	; 0xff
 80043fa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <xPortStartScheduler+0x130>)
 8004410:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004412:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <xPortStartScheduler+0x134>)
 8004414:	2207      	movs	r2, #7
 8004416:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004418:	e009      	b.n	800442e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800441a:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <xPortStartScheduler+0x134>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3b01      	subs	r3, #1
 8004420:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <xPortStartScheduler+0x134>)
 8004422:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	b2db      	uxtb	r3, r3
 800442c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d0ef      	beq.n	800441a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800443a:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <xPortStartScheduler+0x134>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	d00a      	beq.n	800445c <xPortStartScheduler+0xb8>
        __asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	60bb      	str	r3, [r7, #8]
    }
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800445c:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <xPortStartScheduler+0x134>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <xPortStartScheduler+0x134>)
 8004464:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004466:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <xPortStartScheduler+0x134>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800446e:	4a1a      	ldr	r2, [pc, #104]	; (80044d8 <xPortStartScheduler+0x134>)
 8004470:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <xPortStartScheduler+0x138>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a17      	ldr	r2, [pc, #92]	; (80044dc <xPortStartScheduler+0x138>)
 8004480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004484:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <xPortStartScheduler+0x138>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a14      	ldr	r2, [pc, #80]	; (80044dc <xPortStartScheduler+0x138>)
 800448c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004490:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004492:	f000 f963 	bl	800475c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <xPortStartScheduler+0x13c>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800449c:	f000 f982 	bl	80047a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <xPortStartScheduler+0x140>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <xPortStartScheduler+0x140>)
 80044a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044ac:	f7ff ff64 	bl	8004378 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044b0:	f7ff f8e0 	bl	8003674 <vTaskSwitchContext>
    prvTaskExitError();
 80044b4:	f7ff ff1c 	bl	80042f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	e000ed00 	.word	0xe000ed00
 80044c8:	410fc271 	.word	0x410fc271
 80044cc:	410fc270 	.word	0x410fc270
 80044d0:	e000e400 	.word	0xe000e400
 80044d4:	20012e24 	.word	0x20012e24
 80044d8:	20012e28 	.word	0x20012e28
 80044dc:	e000ed20 	.word	0xe000ed20
 80044e0:	20000010 	.word	0x20000010
 80044e4:	e000ef34 	.word	0xe000ef34

080044e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044ee:	4b37      	ldr	r3, [pc, #220]	; (80045cc <vInitPrioGroupValue+0xe4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a37      	ldr	r2, [pc, #220]	; (80045d0 <vInitPrioGroupValue+0xe8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10a      	bne.n	800450e <vInitPrioGroupValue+0x26>
        __asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	613b      	str	r3, [r7, #16]
    }
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <vInitPrioGroupValue+0xe4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a30      	ldr	r2, [pc, #192]	; (80045d4 <vInitPrioGroupValue+0xec>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d10a      	bne.n	800452e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60fb      	str	r3, [r7, #12]
    }
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <vInitPrioGroupValue+0xf0>)
 8004530:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	22ff      	movs	r2, #255	; 0xff
 800453e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4b22      	ldr	r3, [pc, #136]	; (80045dc <vInitPrioGroupValue+0xf4>)
 8004554:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004556:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <vInitPrioGroupValue+0xf8>)
 8004558:	2207      	movs	r2, #7
 800455a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800455c:	e009      	b.n	8004572 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <vInitPrioGroupValue+0xf8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3b01      	subs	r3, #1
 8004564:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <vInitPrioGroupValue+0xf8>)
 8004566:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	b2db      	uxtb	r3, r3
 8004570:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d0ef      	beq.n	800455e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800457e:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <vInitPrioGroupValue+0xf8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f1c3 0307 	rsb	r3, r3, #7
 8004586:	2b04      	cmp	r3, #4
 8004588:	d00a      	beq.n	80045a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	60bb      	str	r3, [r7, #8]
    }
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045a0:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <vInitPrioGroupValue+0xf8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <vInitPrioGroupValue+0xf8>)
 80045a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <vInitPrioGroupValue+0xf8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045b2:	4a0b      	ldr	r2, [pc, #44]	; (80045e0 <vInitPrioGroupValue+0xf8>)
 80045b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	e000ed00 	.word	0xe000ed00
 80045d0:	410fc271 	.word	0x410fc271
 80045d4:	410fc270 	.word	0x410fc270
 80045d8:	e000e400 	.word	0xe000e400
 80045dc:	20012e24 	.word	0x20012e24
 80045e0:	20012e28 	.word	0x20012e28

080045e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
        __asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	607b      	str	r3, [r7, #4]
    }
 80045fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <vPortEnterCritical+0x58>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	4a0d      	ldr	r2, [pc, #52]	; (800463c <vPortEnterCritical+0x58>)
 8004606:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <vPortEnterCritical+0x58>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10f      	bne.n	8004630 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <vPortEnterCritical+0x5c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <vPortEnterCritical+0x4c>
        __asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	603b      	str	r3, [r7, #0]
    }
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <vPortEnterCritical+0x4a>
    }
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	20000010 	.word	0x20000010
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800464a:	4b12      	ldr	r3, [pc, #72]	; (8004694 <vPortExitCritical+0x50>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <vPortExitCritical+0x24>
        __asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	607b      	str	r3, [r7, #4]
    }
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <vPortExitCritical+0x50>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3b01      	subs	r3, #1
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <vPortExitCritical+0x50>)
 8004670:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004672:	4b08      	ldr	r3, [pc, #32]	; (8004694 <vPortExitCritical+0x50>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <vPortExitCritical+0x42>
 800467a:	2300      	movs	r3, #0
 800467c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004684:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000010 	.word	0x20000010
	...

080046a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046a0:	f3ef 8009 	mrs	r0, PSP
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <pxCurrentTCBConst>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f01e 0f10 	tst.w	lr, #16
 80046b0:	bf08      	it	eq
 80046b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	6010      	str	r0, [r2, #0]
 80046bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046c4:	f380 8811 	msr	BASEPRI, r0
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f7fe ffd0 	bl	8003674 <vTaskSwitchContext>
 80046d4:	f04f 0000 	mov.w	r0, #0
 80046d8:	f380 8811 	msr	BASEPRI, r0
 80046dc:	bc09      	pop	{r0, r3}
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	6808      	ldr	r0, [r1, #0]
 80046e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e6:	f01e 0f10 	tst.w	lr, #16
 80046ea:	bf08      	it	eq
 80046ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046f0:	f380 8809 	msr	PSP, r0
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst>:
 8004700:	20012ce4 	.word	0x20012ce4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
        __asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	607b      	str	r3, [r7, #4]
    }
 8004720:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004722:	f001 fad9 	bl	8005cd8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004726:	f7fe fe8b 	bl	8003440 <xTaskIncrementTick>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004730:	f001 fb30 	bl	8005d94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <SysTick_Handler+0x50>)
 8004736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e001      	b.n	8004742 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800473e:	f001 fb0d 	bl	8005d5c <SEGGER_SYSVIEW_RecordExitISR>
 8004742:	2300      	movs	r3, #0
 8004744:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f383 8811 	msr	BASEPRI, r3
    }
 800474c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	e000ed04 	.word	0xe000ed04

0800475c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <vPortSetupTimerInterrupt+0x34>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <vPortSetupTimerInterrupt+0x38>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <vPortSetupTimerInterrupt+0x3c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0a      	ldr	r2, [pc, #40]	; (800479c <vPortSetupTimerInterrupt+0x40>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <vPortSetupTimerInterrupt+0x44>)
 800477a:	3b01      	subs	r3, #1
 800477c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <vPortSetupTimerInterrupt+0x34>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000e010 	.word	0xe000e010
 8004794:	e000e018 	.word	0xe000e018
 8004798:	20000000 	.word	0x20000000
 800479c:	10624dd3 	.word	0x10624dd3
 80047a0:	e000e014 	.word	0xe000e014

080047a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047b4 <vPortEnableVFP+0x10>
 80047a8:	6801      	ldr	r1, [r0, #0]
 80047aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ae:	6001      	str	r1, [r0, #0]
 80047b0:	4770      	bx	lr
 80047b2:	0000      	.short	0x0000
 80047b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop

080047bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047c2:	f3ef 8305 	mrs	r3, IPSR
 80047c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	d914      	bls.n	80047f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047ce:	4a17      	ldr	r2, [pc, #92]	; (800482c <vPortValidateInterruptPriority+0x70>)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <vPortValidateInterruptPriority+0x74>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	7afa      	ldrb	r2, [r7, #11]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d20a      	bcs.n	80047f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	607b      	str	r3, [r7, #4]
    }
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <vPortValidateInterruptPriority+0x78>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004800:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <vPortValidateInterruptPriority+0x7c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d90a      	bls.n	800481e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	603b      	str	r3, [r7, #0]
    }
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <vPortValidateInterruptPriority+0x60>
    }
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000e3f0 	.word	0xe000e3f0
 8004830:	20012e24 	.word	0x20012e24
 8004834:	e000ed0c 	.word	0xe000ed0c
 8004838:	20012e28 	.word	0x20012e28

0800483c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004840:	4803      	ldr	r0, [pc, #12]	; (8004850 <_cbSendSystemDesc+0x14>)
 8004842:	f001 f9f3 	bl	8005c2c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004846:	4803      	ldr	r0, [pc, #12]	; (8004854 <_cbSendSystemDesc+0x18>)
 8004848:	f001 f9f0 	bl	8005c2c <SEGGER_SYSVIEW_SendSysDesc>
}
 800484c:	bf00      	nop
 800484e:	bd80      	pop	{r7, pc}
 8004850:	08006308 	.word	0x08006308
 8004854:	08006334 	.word	0x08006334

08004858 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <SEGGER_SYSVIEW_Conf+0x20>)
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <SEGGER_SYSVIEW_Conf+0x20>)
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <SEGGER_SYSVIEW_Conf+0x24>)
 8004866:	4a06      	ldr	r2, [pc, #24]	; (8004880 <SEGGER_SYSVIEW_Conf+0x28>)
 8004868:	f000 fd5e 	bl	8005328 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800486c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004870:	f000 fd9e 	bl	80053b0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004874:	bf00      	nop
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000000 	.word	0x20000000
 800487c:	0800483d 	.word	0x0800483d
 8004880:	080063d0 	.word	0x080063d0

08004884 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004886:	b085      	sub	sp, #20
 8004888:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800488a:	2300      	movs	r3, #0
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	e033      	b.n	80048f8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004890:	491e      	ldr	r1, [pc, #120]	; (800490c <_cbSendTaskList+0x88>)
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	491a      	ldr	r1, [pc, #104]	; (800490c <_cbSendTaskList+0x88>)
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	3304      	adds	r3, #4
 80048b0:	6819      	ldr	r1, [r3, #0]
 80048b2:	4c16      	ldr	r4, [pc, #88]	; (800490c <_cbSendTaskList+0x88>)
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4423      	add	r3, r4
 80048c0:	3308      	adds	r3, #8
 80048c2:	681c      	ldr	r4, [r3, #0]
 80048c4:	4d11      	ldr	r5, [pc, #68]	; (800490c <_cbSendTaskList+0x88>)
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	442b      	add	r3, r5
 80048d2:	330c      	adds	r3, #12
 80048d4:	681d      	ldr	r5, [r3, #0]
 80048d6:	4e0d      	ldr	r6, [pc, #52]	; (800490c <_cbSendTaskList+0x88>)
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4433      	add	r3, r6
 80048e4:	3310      	adds	r3, #16
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	462b      	mov	r3, r5
 80048ec:	4622      	mov	r2, r4
 80048ee:	f000 f8bd 	bl	8004a6c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3301      	adds	r3, #1
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <_cbSendTaskList+0x8c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3c6      	bcc.n	8004890 <_cbSendTaskList+0xc>
  }
}
 8004902:	bf00      	nop
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800490c:	20012e2c 	.word	0x20012e2c
 8004910:	20012ecc 	.word	0x20012ecc

08004914 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800491c:	f7fe fd7e 	bl	800341c <xTaskGetTickCountFromISR>
 8004920:	4603      	mov	r3, r0
 8004922:	2200      	movs	r2, #0
 8004924:	469a      	mov	sl, r3
 8004926:	4693      	mov	fp, r2
 8004928:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800492c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	f04f 0a00 	mov.w	sl, #0
 8004938:	f04f 0b00 	mov.w	fp, #0
 800493c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004940:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004944:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004948:	4652      	mov	r2, sl
 800494a:	465b      	mov	r3, fp
 800494c:	1a14      	subs	r4, r2, r0
 800494e:	eb63 0501 	sbc.w	r5, r3, r1
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	00ab      	lsls	r3, r5, #2
 800495c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004960:	00a2      	lsls	r2, r4, #2
 8004962:	4614      	mov	r4, r2
 8004964:	461d      	mov	r5, r3
 8004966:	eb14 0800 	adds.w	r8, r4, r0
 800496a:	eb45 0901 	adc.w	r9, r5, r1
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800497a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800497e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004982:	4690      	mov	r8, r2
 8004984:	4699      	mov	r9, r3
 8004986:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800498a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800499c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80049aa:	2205      	movs	r2, #5
 80049ac:	492b      	ldr	r1, [pc, #172]	; (8004a5c <SYSVIEW_AddTask+0xc0>)
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	f001 fc64 	bl	800627c <memcmp>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d04b      	beq.n	8004a52 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80049ba:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <SYSVIEW_AddTask+0xc4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b07      	cmp	r3, #7
 80049c0:	d903      	bls.n	80049ca <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80049c2:	4828      	ldr	r0, [pc, #160]	; (8004a64 <SYSVIEW_AddTask+0xc8>)
 80049c4:	f001 fbda 	bl	800617c <SEGGER_SYSVIEW_Warn>
    return;
 80049c8:	e044      	b.n	8004a54 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80049ca:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <SYSVIEW_AddTask+0xc4>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4926      	ldr	r1, [pc, #152]	; (8004a68 <SYSVIEW_AddTask+0xcc>)
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80049de:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <SYSVIEW_AddTask+0xc4>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4921      	ldr	r1, [pc, #132]	; (8004a68 <SYSVIEW_AddTask+0xcc>)
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	3304      	adds	r3, #4
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80049f4:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <SYSVIEW_AddTask+0xc4>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	491b      	ldr	r1, [pc, #108]	; (8004a68 <SYSVIEW_AddTask+0xcc>)
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	3308      	adds	r3, #8
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <SYSVIEW_AddTask+0xc4>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4916      	ldr	r1, [pc, #88]	; (8004a68 <SYSVIEW_AddTask+0xcc>)
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004a20:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <SYSVIEW_AddTask+0xc4>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4910      	ldr	r1, [pc, #64]	; (8004a68 <SYSVIEW_AddTask+0xcc>)
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	3310      	adds	r3, #16
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <SYSVIEW_AddTask+0xc4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <SYSVIEW_AddTask+0xc4>)
 8004a3e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f80e 	bl	8004a6c <SYSVIEW_SendTaskInfo>
 8004a50:	e000      	b.n	8004a54 <SYSVIEW_AddTask+0xb8>
    return;
 8004a52:	bf00      	nop

}
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	08006344 	.word	0x08006344
 8004a60:	20012ecc 	.word	0x20012ecc
 8004a64:	0800634c 	.word	0x0800634c
 8004a68:	20012e2c 	.word	0x20012e2c

08004a6c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004a7a:	f107 0314 	add.w	r3, r7, #20
 8004a7e:	2214      	movs	r2, #20
 8004a80:	2100      	movs	r1, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 fc18 	bl	80062b8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004a9c:	f107 0314 	add.w	r3, r7, #20
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 ffcb 	bl	8005a3c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004aa6:	bf00      	nop
 8004aa8:	3728      	adds	r7, #40	; 0x28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004ab6:	4b26      	ldr	r3, [pc, #152]	; (8004b50 <_DoInit+0xa0>)
 8004ab8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004aba:	22a8      	movs	r2, #168	; 0xa8
 8004abc:	2100      	movs	r1, #0
 8004abe:	6838      	ldr	r0, [r7, #0]
 8004ac0:	f001 fbfa 	bl	80062b8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2203      	movs	r2, #3
 8004ace:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <_DoInit+0xa4>)
 8004ad4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	4a1f      	ldr	r2, [pc, #124]	; (8004b58 <_DoInit+0xa8>)
 8004ada:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ae2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2200      	movs	r2, #0
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <_DoInit+0xa4>)
 8004afa:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <_DoInit+0xac>)
 8004b00:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2210      	movs	r2, #16
 8004b06:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2200      	movs	r2, #0
 8004b12:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2200      	movs	r2, #0
 8004b18:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004b1a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004b1e:	2300      	movs	r3, #0
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	e00c      	b.n	8004b3e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f1c3 030f 	rsb	r3, r3, #15
 8004b2a:	4a0d      	ldr	r2, [pc, #52]	; (8004b60 <_DoInit+0xb0>)
 8004b2c:	5cd1      	ldrb	r1, [r2, r3]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4413      	add	r3, r2
 8004b34:	460a      	mov	r2, r1
 8004b36:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	607b      	str	r3, [r7, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b0f      	cmp	r3, #15
 8004b42:	d9ef      	bls.n	8004b24 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004b44:	f3bf 8f5f 	dmb	sy
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20012ed0 	.word	0x20012ed0
 8004b54:	0800639c 	.word	0x0800639c
 8004b58:	20012f78 	.word	0x20012f78
 8004b5c:	20013378 	.word	0x20013378
 8004b60:	080063d8 	.word	0x080063d8

08004b64 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004b70:	4b3e      	ldr	r3, [pc, #248]	; (8004c6c <SEGGER_RTT_ReadNoLock+0x108>)
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <SEGGER_RTT_ReadNoLock+0x1e>
 8004b7e:	f7ff ff97 	bl	8004ab0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4613      	mov	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	3360      	adds	r3, #96	; 0x60
 8004b8e:	4a37      	ldr	r2, [pc, #220]	; (8004c6c <SEGGER_RTT_ReadNoLock+0x108>)
 8004b90:	4413      	add	r3, r2
 8004b92:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d92b      	bls.n	8004c08 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	bf28      	it	cs
 8004bc2:	4613      	movcs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	4413      	add	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	6939      	ldr	r1, [r7, #16]
 8004bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bd6:	f001 fb61 	bl	800629c <memcpy>
    NumBytesRead += NumBytesRem;
 8004bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4413      	add	r3, r2
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	4413      	add	r3, r2
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d101      	bne.n	8004c08 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004c04:	2300      	movs	r3, #0
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4293      	cmp	r3, r2
 8004c16:	bf28      	it	cs
 8004c18:	4613      	movcs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d019      	beq.n	8004c56 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	4413      	add	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	6939      	ldr	r1, [r7, #16]
 8004c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c32:	f001 fb33 	bl	800629c <memcpy>
    NumBytesRead += NumBytesRem;
 8004c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4413      	add	r3, r2
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	4413      	add	r3, r2
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c60:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3730      	adds	r7, #48	; 0x30
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20012ed0 	.word	0x20012ed0

08004c70 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	; (8004d74 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004c8c:	f7ff ff10 	bl	8004ab0 <_DoInit>
  SEGGER_RTT_LOCK();
 8004c90:	f3ef 8311 	mrs	r3, BASEPRI
 8004c94:	f04f 0120 	mov.w	r1, #32
 8004c98:	f381 8811 	msr	BASEPRI, r1
 8004c9c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c9e:	4b35      	ldr	r3, [pc, #212]	; (8004d74 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004ca0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004ca6:	6939      	ldr	r1, [r7, #16]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	4613      	mov	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	dbeb      	blt.n	8004ca6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004cce:	e000      	b.n	8004cd2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004cd0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	da3f      	bge.n	8004d5c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004cdc:	6939      	ldr	r1, [r7, #16]
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	4413      	add	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	440b      	add	r3, r1
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004cf0:	6939      	ldr	r1, [r7, #16]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	440b      	add	r3, r1
 8004d00:	3304      	adds	r3, #4
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004d06:	6939      	ldr	r1, [r7, #16]
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	440b      	add	r3, r1
 8004d14:	3320      	adds	r3, #32
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004d1a:	6939      	ldr	r1, [r7, #16]
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	440b      	add	r3, r1
 8004d28:	3328      	adds	r3, #40	; 0x28
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004d2e:	6939      	ldr	r1, [r7, #16]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	4613      	mov	r3, r2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4413      	add	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3324      	adds	r3, #36	; 0x24
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004d42:	6939      	ldr	r1, [r7, #16]
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	4613      	mov	r3, r2
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	440b      	add	r3, r1
 8004d50:	332c      	adds	r3, #44	; 0x2c
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d56:	f3bf 8f5f 	dmb	sy
 8004d5a:	e002      	b.n	8004d62 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d60:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004d68:	69fb      	ldr	r3, [r7, #28]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20012ed0 	.word	0x20012ed0

08004d78 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004d86:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004d94:	f7ff fe8c 	bl	8004ab0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004d9a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d82c      	bhi.n	8004dfc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004da2:	f3ef 8311 	mrs	r3, BASEPRI
 8004da6:	f04f 0120 	mov.w	r1, #32
 8004daa:	f381 8811 	msr	BASEPRI, r1
 8004dae:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4613      	mov	r3, r2
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	4413      	add	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	3360      	adds	r3, #96	; 0x60
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dea:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dec:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfa:	e002      	b.n	8004e02 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3728      	adds	r7, #40	; 0x28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20012ed0 	.word	0x20012ed0

08004e10 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	60fa      	str	r2, [r7, #12]
 8004e26:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b80      	cmp	r3, #128	; 0x80
 8004e2c:	d90a      	bls.n	8004e44 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004e32:	e007      	b.n	8004e44 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	1c53      	adds	r3, r2, #1
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1c59      	adds	r1, r3, #1
 8004e3e:	60f9      	str	r1, [r7, #12]
 8004e40:	7812      	ldrb	r2, [r2, #0]
 8004e42:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	1e5a      	subs	r2, r3, #1
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <_EncodeStr+0x46>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1ee      	bne.n	8004e34 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004e62:	68fb      	ldr	r3, [r7, #12]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3307      	adds	r3, #7
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e8e:	4b35      	ldr	r3, [pc, #212]	; (8004f64 <_HandleIncomingPacket+0xdc>)
 8004e90:	7e1b      	ldrb	r3, [r3, #24]
 8004e92:	4618      	mov	r0, r3
 8004e94:	1cfb      	adds	r3, r7, #3
 8004e96:	2201      	movs	r2, #1
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f7ff fe63 	bl	8004b64 <SEGGER_RTT_ReadNoLock>
 8004e9e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d052      	beq.n	8004f4c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	2b80      	cmp	r3, #128	; 0x80
 8004eaa:	d031      	beq.n	8004f10 <_HandleIncomingPacket+0x88>
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	dc40      	bgt.n	8004f32 <_HandleIncomingPacket+0xaa>
 8004eb0:	2b07      	cmp	r3, #7
 8004eb2:	dc15      	bgt.n	8004ee0 <_HandleIncomingPacket+0x58>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dd3c      	ble.n	8004f32 <_HandleIncomingPacket+0xaa>
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	2b06      	cmp	r3, #6
 8004ebc:	d839      	bhi.n	8004f32 <_HandleIncomingPacket+0xaa>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <_HandleIncomingPacket+0x3c>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004ee7 	.word	0x08004ee7
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004ef3 	.word	0x08004ef3
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004eff 	.word	0x08004eff
 8004ed8:	08004f05 	.word	0x08004f05
 8004edc:	08004f0b 	.word	0x08004f0b
 8004ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee2:	d035      	beq.n	8004f50 <_HandleIncomingPacket+0xc8>
 8004ee4:	e025      	b.n	8004f32 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004ee6:	f000 fc2f 	bl	8005748 <SEGGER_SYSVIEW_Start>
      break;
 8004eea:	e036      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004eec:	f000 fce6 	bl	80058bc <SEGGER_SYSVIEW_Stop>
      break;
 8004ef0:	e033      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004ef2:	f000 febf 	bl	8005c74 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004ef6:	e030      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ef8:	f000 fe84 	bl	8005c04 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004efc:	e02d      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004efe:	f000 fd03 	bl	8005908 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004f02:	e02a      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004f04:	f001 f8fc 	bl	8006100 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004f08:	e027      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004f0a:	f001 f8db 	bl	80060c4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004f0e:	e024      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004f10:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <_HandleIncomingPacket+0xdc>)
 8004f12:	7e1b      	ldrb	r3, [r3, #24]
 8004f14:	4618      	mov	r0, r3
 8004f16:	1cfb      	adds	r3, r7, #3
 8004f18:	2201      	movs	r2, #1
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f7ff fe22 	bl	8004b64 <SEGGER_RTT_ReadNoLock>
 8004f20:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d015      	beq.n	8004f54 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 f840 	bl	8005fb0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004f30:	e010      	b.n	8004f54 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	b25b      	sxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da0e      	bge.n	8004f58 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <_HandleIncomingPacket+0xdc>)
 8004f3c:	7e1b      	ldrb	r3, [r3, #24]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	1cfb      	adds	r3, r7, #3
 8004f42:	2201      	movs	r2, #1
 8004f44:	4619      	mov	r1, r3
 8004f46:	f7ff fe0d 	bl	8004b64 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004f4a:	e005      	b.n	8004f58 <_HandleIncomingPacket+0xd0>
    }
  }
 8004f4c:	bf00      	nop
 8004f4e:	e004      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
      break;
 8004f50:	bf00      	nop
 8004f52:	e002      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
      break;
 8004f54:	bf00      	nop
 8004f56:	e000      	b.n	8004f5a <_HandleIncomingPacket+0xd2>
      break;
 8004f58:	bf00      	nop
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20014390 	.word	0x20014390

08004f68 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	; 0x30
 8004f6c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004f6e:	2301      	movs	r3, #1
 8004f70:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004f72:	1d3b      	adds	r3, r7, #4
 8004f74:	3301      	adds	r3, #1
 8004f76:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7c:	4b31      	ldr	r3, [pc, #196]	; (8005044 <_TrySendOverflowPacket+0xdc>)
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f82:	e00b      	b.n	8004f9c <_TrySendOverflowPacket+0x34>
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	1c59      	adds	r1, r3, #1
 8004f8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	09db      	lsrs	r3, r3, #7
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa0:	d8f0      	bhi.n	8004f84 <_TrySendOverflowPacket+0x1c>
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004fb2:	4b25      	ldr	r3, [pc, #148]	; (8005048 <_TrySendOverflowPacket+0xe0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004fb8:	4b22      	ldr	r3, [pc, #136]	; (8005044 <_TrySendOverflowPacket+0xdc>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	e00b      	b.n	8004fe4 <_TrySendOverflowPacket+0x7c>
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	6279      	str	r1, [r7, #36]	; 0x24
 8004fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	09db      	lsrs	r3, r3, #7
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe8:	d8f0      	bhi.n	8004fcc <_TrySendOverflowPacket+0x64>
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	627a      	str	r2, [r7, #36]	; 0x24
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <_TrySendOverflowPacket+0xdc>)
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	4618      	mov	r0, r3
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	461a      	mov	r2, r3
 8005008:	1d3b      	adds	r3, r7, #4
 800500a:	4619      	mov	r1, r3
 800500c:	f7fb f8f0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005010:	4603      	mov	r3, r0
 8005012:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800501a:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <_TrySendOverflowPacket+0xdc>)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005020:	4b08      	ldr	r3, [pc, #32]	; (8005044 <_TrySendOverflowPacket+0xdc>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	3b01      	subs	r3, #1
 8005026:	b2da      	uxtb	r2, r3
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <_TrySendOverflowPacket+0xdc>)
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e004      	b.n	8005038 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <_TrySendOverflowPacket+0xdc>)
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	3301      	adds	r3, #1
 8005034:	4a03      	ldr	r2, [pc, #12]	; (8005044 <_TrySendOverflowPacket+0xdc>)
 8005036:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005038:	693b      	ldr	r3, [r7, #16]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3730      	adds	r7, #48	; 0x30
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20014390 	.word	0x20014390
 8005048:	e0001004 	.word	0xe0001004

0800504c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	; 0x28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005058:	4b98      	ldr	r3, [pc, #608]	; (80052bc <_SendPacket+0x270>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d010      	beq.n	8005082 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005060:	4b96      	ldr	r3, [pc, #600]	; (80052bc <_SendPacket+0x270>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 812d 	beq.w	80052c4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800506a:	4b94      	ldr	r3, [pc, #592]	; (80052bc <_SendPacket+0x270>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d109      	bne.n	8005086 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005072:	f7ff ff79 	bl	8004f68 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005076:	4b91      	ldr	r3, [pc, #580]	; (80052bc <_SendPacket+0x270>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b01      	cmp	r3, #1
 800507c:	f040 8124 	bne.w	80052c8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005080:	e001      	b.n	8005086 <_SendPacket+0x3a>
    goto Send;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <_SendPacket+0x3c>
Send:
 8005086:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b1f      	cmp	r3, #31
 800508c:	d809      	bhi.n	80050a2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800508e:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <_SendPacket+0x270>)
 8005090:	69da      	ldr	r2, [r3, #28]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	f040 8115 	bne.w	80052cc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b17      	cmp	r3, #23
 80050a6:	d807      	bhi.n	80050b8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e0c4      	b.n	8005242 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b7f      	cmp	r3, #127	; 0x7f
 80050c4:	d912      	bls.n	80050ec <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	09da      	lsrs	r2, r3, #7
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	3a01      	subs	r2, #1
 80050de:	60fa      	str	r2, [r7, #12]
 80050e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e006      	b.n	80050fa <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b7e      	cmp	r3, #126	; 0x7e
 80050fe:	d807      	bhi.n	8005110 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3b01      	subs	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e098      	b.n	8005242 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005116:	d212      	bcs.n	800513e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	09da      	lsrs	r2, r3, #7
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3b01      	subs	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	3a01      	subs	r2, #1
 8005130:	60fa      	str	r2, [r7, #12]
 8005132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e081      	b.n	8005242 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005144:	d21d      	bcs.n	8005182 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	0b9a      	lsrs	r2, r3, #14
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b01      	subs	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	09db      	lsrs	r3, r3, #7
 800515a:	b2db      	uxtb	r3, r3
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	3a01      	subs	r2, #1
 8005160:	60fa      	str	r2, [r7, #12]
 8005162:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005166:	b2da      	uxtb	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	3a01      	subs	r2, #1
 8005174:	60fa      	str	r2, [r7, #12]
 8005176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e05f      	b.n	8005242 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005188:	d228      	bcs.n	80051dc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0d5a      	lsrs	r2, r3, #21
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3b01      	subs	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0b9b      	lsrs	r3, r3, #14
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	3a01      	subs	r2, #1
 80051a4:	60fa      	str	r2, [r7, #12]
 80051a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	09db      	lsrs	r3, r3, #7
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	3a01      	subs	r2, #1
 80051ba:	60fa      	str	r2, [r7, #12]
 80051bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	3a01      	subs	r2, #1
 80051ce:	60fa      	str	r2, [r7, #12]
 80051d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e032      	b.n	8005242 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	0f1a      	lsrs	r2, r3, #28
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	0d5b      	lsrs	r3, r3, #21
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	3a01      	subs	r2, #1
 80051f6:	60fa      	str	r2, [r7, #12]
 80051f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0b9b      	lsrs	r3, r3, #14
 8005206:	b2db      	uxtb	r3, r3
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	3a01      	subs	r2, #1
 800520c:	60fa      	str	r2, [r7, #12]
 800520e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005212:	b2da      	uxtb	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	09db      	lsrs	r3, r3, #7
 800521c:	b2db      	uxtb	r3, r3
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	3a01      	subs	r2, #1
 8005222:	60fa      	str	r2, [r7, #12]
 8005224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	3a01      	subs	r2, #1
 8005236:	60fa      	str	r2, [r7, #12]
 8005238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800523c:	b2da      	uxtb	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005242:	4b1f      	ldr	r3, [pc, #124]	; (80052c0 <_SendPacket+0x274>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005248:	4b1c      	ldr	r3, [pc, #112]	; (80052bc <_SendPacket+0x270>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	e00b      	b.n	8005274 <_SendPacket+0x228>
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	1c59      	adds	r1, r3, #1
 8005264:	6279      	str	r1, [r7, #36]	; 0x24
 8005266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	09db      	lsrs	r3, r3, #7
 8005272:	623b      	str	r3, [r7, #32]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b7f      	cmp	r3, #127	; 0x7f
 8005278:	d8f0      	bhi.n	800525c <_SendPacket+0x210>
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	627a      	str	r2, [r7, #36]	; 0x24
 8005280:	6a3a      	ldr	r2, [r7, #32]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800528a:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <_SendPacket+0x270>)
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	4618      	mov	r0, r3
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	461a      	mov	r2, r3
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	f7fa ffa9 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800529e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80052a6:	4a05      	ldr	r2, [pc, #20]	; (80052bc <_SendPacket+0x270>)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	60d3      	str	r3, [r2, #12]
 80052ac:	e00f      	b.n	80052ce <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80052ae:	4b03      	ldr	r3, [pc, #12]	; (80052bc <_SendPacket+0x270>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	4b01      	ldr	r3, [pc, #4]	; (80052bc <_SendPacket+0x270>)
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e008      	b.n	80052ce <_SendPacket+0x282>
 80052bc:	20014390 	.word	0x20014390
 80052c0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80052c4:	bf00      	nop
 80052c6:	e002      	b.n	80052ce <_SendPacket+0x282>
      goto SendDone;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <_SendPacket+0x282>
      goto SendDone;
 80052cc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80052ce:	4b14      	ldr	r3, [pc, #80]	; (8005320 <_SendPacket+0x2d4>)
 80052d0:	7e1b      	ldrb	r3, [r3, #24]
 80052d2:	4619      	mov	r1, r3
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <_SendPacket+0x2d8>)
 80052d6:	460b      	mov	r3, r1
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	440b      	add	r3, r1
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4413      	add	r3, r2
 80052e0:	336c      	adds	r3, #108	; 0x6c
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <_SendPacket+0x2d4>)
 80052e6:	7e1b      	ldrb	r3, [r3, #24]
 80052e8:	4618      	mov	r0, r3
 80052ea:	490e      	ldr	r1, [pc, #56]	; (8005324 <_SendPacket+0x2d8>)
 80052ec:	4603      	mov	r3, r0
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4403      	add	r3, r0
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	440b      	add	r3, r1
 80052f6:	3370      	adds	r3, #112	; 0x70
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d00b      	beq.n	8005316 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80052fe:	4b08      	ldr	r3, [pc, #32]	; (8005320 <_SendPacket+0x2d4>)
 8005300:	789b      	ldrb	r3, [r3, #2]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d107      	bne.n	8005316 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <_SendPacket+0x2d4>)
 8005308:	2201      	movs	r2, #1
 800530a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800530c:	f7ff fdbc 	bl	8004e88 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005310:	4b03      	ldr	r3, [pc, #12]	; (8005320 <_SendPacket+0x2d4>)
 8005312:	2200      	movs	r2, #0
 8005314:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005316:	bf00      	nop
 8005318:	3728      	adds	r7, #40	; 0x28
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20014390 	.word	0x20014390
 8005324:	20012ed0 	.word	0x20012ed0

08005328 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005336:	2300      	movs	r3, #0
 8005338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800533c:	4917      	ldr	r1, [pc, #92]	; (800539c <SEGGER_SYSVIEW_Init+0x74>)
 800533e:	4818      	ldr	r0, [pc, #96]	; (80053a0 <SEGGER_SYSVIEW_Init+0x78>)
 8005340:	f7ff fc96 	bl	8004c70 <SEGGER_RTT_AllocUpBuffer>
 8005344:	4603      	mov	r3, r0
 8005346:	b2da      	uxtb	r2, r3
 8005348:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800534a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800534c:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800534e:	785a      	ldrb	r2, [r3, #1]
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005352:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005354:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005356:	7e1b      	ldrb	r3, [r3, #24]
 8005358:	4618      	mov	r0, r3
 800535a:	2300      	movs	r3, #0
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2308      	movs	r3, #8
 8005360:	4a11      	ldr	r2, [pc, #68]	; (80053a8 <SEGGER_SYSVIEW_Init+0x80>)
 8005362:	490f      	ldr	r1, [pc, #60]	; (80053a0 <SEGGER_SYSVIEW_Init+0x78>)
 8005364:	f7ff fd08 	bl	8004d78 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005368:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800536a:	2200      	movs	r2, #0
 800536c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800536e:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <SEGGER_SYSVIEW_Init+0x84>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005374:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005376:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800537c:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005382:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005388:	4a06      	ldr	r2, [pc, #24]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20013388 	.word	0x20013388
 80053a0:	080063b0 	.word	0x080063b0
 80053a4:	20014390 	.word	0x20014390
 80053a8:	20014388 	.word	0x20014388
 80053ac:	e0001004 	.word	0xe0001004

080053b0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80053b8:	4a04      	ldr	r2, [pc, #16]	; (80053cc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6113      	str	r3, [r2, #16]
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20014390 	.word	0x20014390

080053d0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053d8:	f3ef 8311 	mrs	r3, BASEPRI
 80053dc:	f04f 0120 	mov.w	r1, #32
 80053e0:	f381 8811 	msr	BASEPRI, r1
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4808      	ldr	r0, [pc, #32]	; (8005408 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80053e8:	f7ff fd42 	bl	8004e70 <_PreparePacket>
 80053ec:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	68b8      	ldr	r0, [r7, #8]
 80053f4:	f7ff fe2a 	bl	800504c <_SendPacket>
  RECORD_END();
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f383 8811 	msr	BASEPRI, r3
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	200143c0 	.word	0x200143c0

0800540c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005416:	f3ef 8311 	mrs	r3, BASEPRI
 800541a:	f04f 0120 	mov.w	r1, #32
 800541e:	f381 8811 	msr	BASEPRI, r1
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	4816      	ldr	r0, [pc, #88]	; (8005480 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005426:	f7ff fd23 	bl	8004e70 <_PreparePacket>
 800542a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e00b      	b.n	8005452 <SEGGER_SYSVIEW_RecordU32+0x46>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	1c59      	adds	r1, r3, #1
 8005442:	61f9      	str	r1, [r7, #28]
 8005444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	09db      	lsrs	r3, r3, #7
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b7f      	cmp	r3, #127	; 0x7f
 8005456:	d8f0      	bhi.n	800543a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	61fa      	str	r2, [r7, #28]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68f9      	ldr	r1, [r7, #12]
 800546c:	6938      	ldr	r0, [r7, #16]
 800546e:	f7ff fded 	bl	800504c <_SendPacket>
  RECORD_END();
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f383 8811 	msr	BASEPRI, r3
}
 8005478:	bf00      	nop
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200143c0 	.word	0x200143c0

08005484 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b08c      	sub	sp, #48	; 0x30
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005490:	f3ef 8311 	mrs	r3, BASEPRI
 8005494:	f04f 0120 	mov.w	r1, #32
 8005498:	f381 8811 	msr	BASEPRI, r1
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	4825      	ldr	r0, [pc, #148]	; (8005534 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80054a0:	f7ff fce6 	bl	8004e70 <_PreparePacket>
 80054a4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b2:	e00b      	b.n	80054cc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	1c59      	adds	r1, r3, #1
 80054bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	09db      	lsrs	r3, r3, #7
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	2b7f      	cmp	r3, #127	; 0x7f
 80054d0:	d8f0      	bhi.n	80054b4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	e00b      	b.n	8005504 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	1c59      	adds	r1, r3, #1
 80054f4:	6279      	str	r1, [r7, #36]	; 0x24
 80054f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	09db      	lsrs	r3, r3, #7
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	2b7f      	cmp	r3, #127	; 0x7f
 8005508:	d8f0      	bhi.n	80054ec <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	627a      	str	r2, [r7, #36]	; 0x24
 8005510:	6a3a      	ldr	r2, [r7, #32]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	6979      	ldr	r1, [r7, #20]
 800551e:	69b8      	ldr	r0, [r7, #24]
 8005520:	f7ff fd94 	bl	800504c <_SendPacket>
  RECORD_END();
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f383 8811 	msr	BASEPRI, r3
}
 800552a:	bf00      	nop
 800552c:	3730      	adds	r7, #48	; 0x30
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	200143c0 	.word	0x200143c0

08005538 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b08e      	sub	sp, #56	; 0x38
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005546:	f3ef 8311 	mrs	r3, BASEPRI
 800554a:	f04f 0120 	mov.w	r1, #32
 800554e:	f381 8811 	msr	BASEPRI, r1
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	4832      	ldr	r0, [pc, #200]	; (8005620 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005556:	f7ff fc8b 	bl	8004e70 <_PreparePacket>
 800555a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	633b      	str	r3, [r7, #48]	; 0x30
 8005568:	e00b      	b.n	8005582 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	b2da      	uxtb	r2, r3
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	1c59      	adds	r1, r3, #1
 8005572:	6379      	str	r1, [r7, #52]	; 0x34
 8005574:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	09db      	lsrs	r3, r3, #7
 8005580:	633b      	str	r3, [r7, #48]	; 0x30
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	2b7f      	cmp	r3, #127	; 0x7f
 8005586:	d8f0      	bhi.n	800556a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	637a      	str	r2, [r7, #52]	; 0x34
 800558e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a0:	e00b      	b.n	80055ba <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a8:	1c59      	adds	r1, r3, #1
 80055aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	09db      	lsrs	r3, r3, #7
 80055b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	2b7f      	cmp	r3, #127	; 0x7f
 80055be:	d8f0      	bhi.n	80055a2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	623b      	str	r3, [r7, #32]
 80055d8:	e00b      	b.n	80055f2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	1c59      	adds	r1, r3, #1
 80055e2:	6279      	str	r1, [r7, #36]	; 0x24
 80055e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	09db      	lsrs	r3, r3, #7
 80055f0:	623b      	str	r3, [r7, #32]
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	2b7f      	cmp	r3, #127	; 0x7f
 80055f6:	d8f0      	bhi.n	80055da <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	627a      	str	r2, [r7, #36]	; 0x24
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	6979      	ldr	r1, [r7, #20]
 800560c:	69b8      	ldr	r0, [r7, #24]
 800560e:	f7ff fd1d 	bl	800504c <_SendPacket>
  RECORD_END();
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f383 8811 	msr	BASEPRI, r3
}
 8005618:	bf00      	nop
 800561a:	3738      	adds	r7, #56	; 0x38
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200143c0 	.word	0x200143c0

08005624 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b090      	sub	sp, #64	; 0x40
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005632:	f3ef 8311 	mrs	r3, BASEPRI
 8005636:	f04f 0120 	mov.w	r1, #32
 800563a:	f381 8811 	msr	BASEPRI, r1
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	4840      	ldr	r0, [pc, #256]	; (8005744 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005642:	f7ff fc15 	bl	8004e70 <_PreparePacket>
 8005646:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	63bb      	str	r3, [r7, #56]	; 0x38
 8005654:	e00b      	b.n	800566e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	b2da      	uxtb	r2, r3
 800565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565c:	1c59      	adds	r1, r3, #1
 800565e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005660:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	09db      	lsrs	r3, r3, #7
 800566c:	63bb      	str	r3, [r7, #56]	; 0x38
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	2b7f      	cmp	r3, #127	; 0x7f
 8005672:	d8f0      	bhi.n	8005656 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	63fa      	str	r2, [r7, #60]	; 0x3c
 800567a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	633b      	str	r3, [r7, #48]	; 0x30
 800568c:	e00b      	b.n	80056a6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	b2da      	uxtb	r2, r3
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	1c59      	adds	r1, r3, #1
 8005696:	6379      	str	r1, [r7, #52]	; 0x34
 8005698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	09db      	lsrs	r3, r3, #7
 80056a4:	633b      	str	r3, [r7, #48]	; 0x30
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2b7f      	cmp	r3, #127	; 0x7f
 80056aa:	d8f0      	bhi.n	800568e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	637a      	str	r2, [r7, #52]	; 0x34
 80056b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c4:	e00b      	b.n	80056de <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	1c59      	adds	r1, r3, #1
 80056ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	09db      	lsrs	r3, r3, #7
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	2b7f      	cmp	r3, #127	; 0x7f
 80056e2:	d8f0      	bhi.n	80056c6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
 80056f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fa:	623b      	str	r3, [r7, #32]
 80056fc:	e00b      	b.n	8005716 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	1c59      	adds	r1, r3, #1
 8005706:	6279      	str	r1, [r7, #36]	; 0x24
 8005708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	09db      	lsrs	r3, r3, #7
 8005714:	623b      	str	r3, [r7, #32]
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	2b7f      	cmp	r3, #127	; 0x7f
 800571a:	d8f0      	bhi.n	80056fe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	627a      	str	r2, [r7, #36]	; 0x24
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	69b8      	ldr	r0, [r7, #24]
 8005732:	f7ff fc8b 	bl	800504c <_SendPacket>
  RECORD_END();
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f383 8811 	msr	BASEPRI, r3
}
 800573c:	bf00      	nop
 800573e:	3740      	adds	r7, #64	; 0x40
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200143c0 	.word	0x200143c0

08005748 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b08c      	sub	sp, #48	; 0x30
 800574c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800574e:	4b58      	ldr	r3, [pc, #352]	; (80058b0 <SEGGER_SYSVIEW_Start+0x168>)
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005754:	f3ef 8311 	mrs	r3, BASEPRI
 8005758:	f04f 0120 	mov.w	r1, #32
 800575c:	f381 8811 	msr	BASEPRI, r1
 8005760:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005762:	4b53      	ldr	r3, [pc, #332]	; (80058b0 <SEGGER_SYSVIEW_Start+0x168>)
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	220a      	movs	r2, #10
 8005768:	4952      	ldr	r1, [pc, #328]	; (80058b4 <SEGGER_SYSVIEW_Start+0x16c>)
 800576a:	4618      	mov	r0, r3
 800576c:	f7fa fd40 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005776:	200a      	movs	r0, #10
 8005778:	f7ff fe2a 	bl	80053d0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800577c:	f3ef 8311 	mrs	r3, BASEPRI
 8005780:	f04f 0120 	mov.w	r1, #32
 8005784:	f381 8811 	msr	BASEPRI, r1
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	484b      	ldr	r0, [pc, #300]	; (80058b8 <SEGGER_SYSVIEW_Start+0x170>)
 800578c:	f7ff fb70 	bl	8004e70 <_PreparePacket>
 8005790:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579a:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <SEGGER_SYSVIEW_Start+0x168>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a0:	e00b      	b.n	80057ba <SEGGER_SYSVIEW_Start+0x72>
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	1c59      	adds	r1, r3, #1
 80057aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	09db      	lsrs	r3, r3, #7
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	2b7f      	cmp	r3, #127	; 0x7f
 80057be:	d8f0      	bhi.n	80057a2 <SEGGER_SYSVIEW_Start+0x5a>
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
 80057d4:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <SEGGER_SYSVIEW_Start+0x168>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	623b      	str	r3, [r7, #32]
 80057da:	e00b      	b.n	80057f4 <SEGGER_SYSVIEW_Start+0xac>
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	6279      	str	r1, [r7, #36]	; 0x24
 80057e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	09db      	lsrs	r3, r3, #7
 80057f2:	623b      	str	r3, [r7, #32]
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	2b7f      	cmp	r3, #127	; 0x7f
 80057f8:	d8f0      	bhi.n	80057dc <SEGGER_SYSVIEW_Start+0x94>
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	627a      	str	r2, [r7, #36]	; 0x24
 8005800:	6a3a      	ldr	r2, [r7, #32]
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	4b28      	ldr	r3, [pc, #160]	; (80058b0 <SEGGER_SYSVIEW_Start+0x168>)
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e00b      	b.n	800582e <SEGGER_SYSVIEW_Start+0xe6>
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	61f9      	str	r1, [r7, #28]
 8005820:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	09db      	lsrs	r3, r3, #7
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b7f      	cmp	r3, #127	; 0x7f
 8005832:	d8f0      	bhi.n	8005816 <SEGGER_SYSVIEW_Start+0xce>
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	61fa      	str	r2, [r7, #28]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	2300      	movs	r3, #0
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	e00b      	b.n	8005866 <SEGGER_SYSVIEW_Start+0x11e>
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	1c59      	adds	r1, r3, #1
 8005856:	6179      	str	r1, [r7, #20]
 8005858:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	09db      	lsrs	r3, r3, #7
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b7f      	cmp	r3, #127	; 0x7f
 800586a:	d8f0      	bhi.n	800584e <SEGGER_SYSVIEW_Start+0x106>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	617a      	str	r2, [r7, #20]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800587c:	2218      	movs	r2, #24
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fbe3 	bl	800504c <_SendPacket>
      RECORD_END();
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800588c:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <SEGGER_SYSVIEW_Start+0x168>)
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005894:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <SEGGER_SYSVIEW_Start+0x168>)
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800589a:	f000 f9eb 	bl	8005c74 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800589e:	f000 f9b1 	bl	8005c04 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80058a2:	f000 fc2d 	bl	8006100 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80058a6:	bf00      	nop
 80058a8:	3730      	adds	r7, #48	; 0x30
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20014390 	.word	0x20014390
 80058b4:	080063ec 	.word	0x080063ec
 80058b8:	200143c0 	.word	0x200143c0

080058bc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058c2:	f3ef 8311 	mrs	r3, BASEPRI
 80058c6:	f04f 0120 	mov.w	r1, #32
 80058ca:	f381 8811 	msr	BASEPRI, r1
 80058ce:	607b      	str	r3, [r7, #4]
 80058d0:	480b      	ldr	r0, [pc, #44]	; (8005900 <SEGGER_SYSVIEW_Stop+0x44>)
 80058d2:	f7ff facd 	bl	8004e70 <_PreparePacket>
 80058d6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <SEGGER_SYSVIEW_Stop+0x48>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d007      	beq.n	80058f0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80058e0:	220b      	movs	r2, #11
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6838      	ldr	r0, [r7, #0]
 80058e6:	f7ff fbb1 	bl	800504c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <SEGGER_SYSVIEW_Stop+0x48>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f383 8811 	msr	BASEPRI, r3
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	200143c0 	.word	0x200143c0
 8005904:	20014390 	.word	0x20014390

08005908 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b08c      	sub	sp, #48	; 0x30
 800590c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800590e:	f3ef 8311 	mrs	r3, BASEPRI
 8005912:	f04f 0120 	mov.w	r1, #32
 8005916:	f381 8811 	msr	BASEPRI, r1
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	4845      	ldr	r0, [pc, #276]	; (8005a34 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800591e:	f7ff faa7 	bl	8004e70 <_PreparePacket>
 8005922:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800592c:	4b42      	ldr	r3, [pc, #264]	; (8005a38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
 8005932:	e00b      	b.n	800594c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	b2da      	uxtb	r2, r3
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	1c59      	adds	r1, r3, #1
 800593c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800593e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	09db      	lsrs	r3, r3, #7
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	2b7f      	cmp	r3, #127	; 0x7f
 8005950:	d8f0      	bhi.n	8005934 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	623b      	str	r3, [r7, #32]
 800596c:	e00b      	b.n	8005986 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	1c59      	adds	r1, r3, #1
 8005976:	6279      	str	r1, [r7, #36]	; 0x24
 8005978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	09db      	lsrs	r3, r3, #7
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	2b7f      	cmp	r3, #127	; 0x7f
 800598a:	d8f0      	bhi.n	800596e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	627a      	str	r2, [r7, #36]	; 0x24
 8005992:	6a3a      	ldr	r2, [r7, #32]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	4b25      	ldr	r3, [pc, #148]	; (8005a38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e00b      	b.n	80059c0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	61f9      	str	r1, [r7, #28]
 80059b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	09db      	lsrs	r3, r3, #7
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b7f      	cmp	r3, #127	; 0x7f
 80059c4:	d8f0      	bhi.n	80059a8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	61fa      	str	r2, [r7, #28]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	2300      	movs	r3, #0
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	e00b      	b.n	80059f8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	1c59      	adds	r1, r3, #1
 80059e8:	6179      	str	r1, [r7, #20]
 80059ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	09db      	lsrs	r3, r3, #7
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b7f      	cmp	r3, #127	; 0x7f
 80059fc:	d8f0      	bhi.n	80059e0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	617a      	str	r2, [r7, #20]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a0e:	2218      	movs	r2, #24
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	68b8      	ldr	r0, [r7, #8]
 8005a14:	f7ff fb1a 	bl	800504c <_SendPacket>
  RECORD_END();
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005a26:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	4798      	blx	r3
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	3730      	adds	r7, #48	; 0x30
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	200143c0 	.word	0x200143c0
 8005a38:	20014390 	.word	0x20014390

08005a3c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b092      	sub	sp, #72	; 0x48
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005a44:	f3ef 8311 	mrs	r3, BASEPRI
 8005a48:	f04f 0120 	mov.w	r1, #32
 8005a4c:	f381 8811 	msr	BASEPRI, r1
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	486a      	ldr	r0, [pc, #424]	; (8005bfc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005a54:	f7ff fa0c 	bl	8004e70 <_PreparePacket>
 8005a58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	647b      	str	r3, [r7, #68]	; 0x44
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b66      	ldr	r3, [pc, #408]	; (8005c00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a6e:	e00b      	b.n	8005a88 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a76:	1c59      	adds	r1, r3, #1
 8005a78:	6479      	str	r1, [r7, #68]	; 0x44
 8005a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a84:	09db      	lsrs	r3, r3, #7
 8005a86:	643b      	str	r3, [r7, #64]	; 0x40
 8005a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8c:	d8f0      	bhi.n	8005a70 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	647a      	str	r2, [r7, #68]	; 0x44
 8005a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aa8:	e00b      	b.n	8005ac2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab0:	1c59      	adds	r1, r3, #1
 8005ab2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	09db      	lsrs	r3, r3, #7
 8005ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac6:	d8f0      	bhi.n	8005aaa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	4619      	mov	r1, r3
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff f995 	bl	8004e10 <_EncodeStr>
 8005ae6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005ae8:	2209      	movs	r2, #9
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	6938      	ldr	r0, [r7, #16]
 8005aee:	f7ff faad 	bl	800504c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b40      	ldr	r3, [pc, #256]	; (8005c00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30
 8005b06:	e00b      	b.n	8005b20 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0e:	1c59      	adds	r1, r3, #1
 8005b10:	6379      	str	r1, [r7, #52]	; 0x34
 8005b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	09db      	lsrs	r3, r3, #7
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	2b7f      	cmp	r3, #127	; 0x7f
 8005b24:	d8f0      	bhi.n	8005b08 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	637a      	str	r2, [r7, #52]	; 0x34
 8005b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b40:	e00b      	b.n	8005b5a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b48:	1c59      	adds	r1, r3, #1
 8005b4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	09db      	lsrs	r3, r3, #7
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b5e:	d8f0      	bhi.n	8005b42 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	623b      	str	r3, [r7, #32]
 8005b7a:	e00b      	b.n	8005b94 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	6279      	str	r1, [r7, #36]	; 0x24
 8005b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	09db      	lsrs	r3, r3, #7
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	2b7f      	cmp	r3, #127	; 0x7f
 8005b98:	d8f0      	bhi.n	8005b7c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8005ba0:	6a3a      	ldr	r2, [r7, #32]
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e00b      	b.n	8005bcc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	1c59      	adds	r1, r3, #1
 8005bbc:	61f9      	str	r1, [r7, #28]
 8005bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	09db      	lsrs	r3, r3, #7
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd0:	d8f0      	bhi.n	8005bb4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	61fa      	str	r2, [r7, #28]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005be2:	2215      	movs	r2, #21
 8005be4:	68f9      	ldr	r1, [r7, #12]
 8005be6:	6938      	ldr	r0, [r7, #16]
 8005be8:	f7ff fa30 	bl	800504c <_SendPacket>
  RECORD_END();
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f383 8811 	msr	BASEPRI, r3
}
 8005bf2:	bf00      	nop
 8005bf4:	3748      	adds	r7, #72	; 0x48
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	200143c0 	.word	0x200143c0
 8005c00:	20014390 	.word	0x20014390

08005c04 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c1a:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4798      	blx	r3
  }
}
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20014390 	.word	0x20014390

08005c2c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c34:	f3ef 8311 	mrs	r3, BASEPRI
 8005c38:	f04f 0120 	mov.w	r1, #32
 8005c3c:	f381 8811 	msr	BASEPRI, r1
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	480b      	ldr	r0, [pc, #44]	; (8005c70 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005c44:	f7ff f914 	bl	8004e70 <_PreparePacket>
 8005c48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c4a:	2280      	movs	r2, #128	; 0x80
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	6938      	ldr	r0, [r7, #16]
 8005c50:	f7ff f8de 	bl	8004e10 <_EncodeStr>
 8005c54:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005c56:	220e      	movs	r2, #14
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	6938      	ldr	r0, [r7, #16]
 8005c5c:	f7ff f9f6 	bl	800504c <_SendPacket>
  RECORD_END();
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f383 8811 	msr	BASEPRI, r3
}
 8005c66:	bf00      	nop
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	200143c0 	.word	0x200143c0

08005c74 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005c74:	b590      	push	{r4, r7, lr}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01a      	beq.n	8005cb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005c82:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d015      	beq.n	8005cb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005c8c:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4798      	blx	r3
 8005c94:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005c98:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	000a      	movs	r2, r1
 8005ca8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005caa:	4613      	mov	r3, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	4621      	mov	r1, r4
 8005cb0:	200d      	movs	r0, #13
 8005cb2:	f7ff fbe7 	bl	8005484 <SEGGER_SYSVIEW_RecordU32x2>
 8005cb6:	e006      	b.n	8005cc6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	200c      	movs	r0, #12
 8005cc0:	f7ff fba4 	bl	800540c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd90      	pop	{r4, r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20014390 	.word	0x20014390
 8005cd4:	e0001004 	.word	0xe0001004

08005cd8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cde:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce2:	f04f 0120 	mov.w	r1, #32
 8005ce6:	f381 8811 	msr	BASEPRI, r1
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	4819      	ldr	r0, [pc, #100]	; (8005d54 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005cee:	f7ff f8bf 	bl	8004e70 <_PreparePacket>
 8005cf2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005cf8:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d00:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	e00b      	b.n	8005d24 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	6179      	str	r1, [r7, #20]
 8005d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	09db      	lsrs	r3, r3, #7
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b7f      	cmp	r3, #127	; 0x7f
 8005d28:	d8f0      	bhi.n	8005d0c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	617a      	str	r2, [r7, #20]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	68b8      	ldr	r0, [r7, #8]
 8005d40:	f7ff f984 	bl	800504c <_SendPacket>
  RECORD_END();
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f383 8811 	msr	BASEPRI, r3
}
 8005d4a:	bf00      	nop
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200143c0 	.word	0x200143c0
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d62:	f3ef 8311 	mrs	r3, BASEPRI
 8005d66:	f04f 0120 	mov.w	r1, #32
 8005d6a:	f381 8811 	msr	BASEPRI, r1
 8005d6e:	607b      	str	r3, [r7, #4]
 8005d70:	4807      	ldr	r0, [pc, #28]	; (8005d90 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005d72:	f7ff f87d 	bl	8004e70 <_PreparePacket>
 8005d76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005d78:	2203      	movs	r2, #3
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6838      	ldr	r0, [r7, #0]
 8005d7e:	f7ff f965 	bl	800504c <_SendPacket>
  RECORD_END();
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f383 8811 	msr	BASEPRI, r3
}
 8005d88:	bf00      	nop
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	200143c0 	.word	0x200143c0

08005d94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d9e:	f04f 0120 	mov.w	r1, #32
 8005da2:	f381 8811 	msr	BASEPRI, r1
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	4807      	ldr	r0, [pc, #28]	; (8005dc8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005daa:	f7ff f861 	bl	8004e70 <_PreparePacket>
 8005dae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005db0:	2212      	movs	r2, #18
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6838      	ldr	r0, [r7, #0]
 8005db6:	f7ff f949 	bl	800504c <_SendPacket>
  RECORD_END();
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f383 8811 	msr	BASEPRI, r3
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	200143c0 	.word	0x200143c0

08005dcc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd6:	f04f 0120 	mov.w	r1, #32
 8005dda:	f381 8811 	msr	BASEPRI, r1
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	4807      	ldr	r0, [pc, #28]	; (8005e00 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005de2:	f7ff f845 	bl	8004e70 <_PreparePacket>
 8005de6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005de8:	2211      	movs	r2, #17
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6838      	ldr	r0, [r7, #0]
 8005dee:	f7ff f92d 	bl	800504c <_SendPacket>
  RECORD_END();
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f383 8811 	msr	BASEPRI, r3
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	200143c0 	.word	0x200143c0

08005e04 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e10:	f04f 0120 	mov.w	r1, #32
 8005e14:	f381 8811 	msr	BASEPRI, r1
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	4819      	ldr	r0, [pc, #100]	; (8005e80 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005e1c:	f7ff f828 	bl	8004e70 <_PreparePacket>
 8005e20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e26:	4b17      	ldr	r3, [pc, #92]	; (8005e84 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	61bb      	str	r3, [r7, #24]
 8005e38:	e00b      	b.n	8005e52 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	1c59      	adds	r1, r3, #1
 8005e42:	61f9      	str	r1, [r7, #28]
 8005e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b7f      	cmp	r3, #127	; 0x7f
 8005e56:	d8f0      	bhi.n	8005e3a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	61fa      	str	r2, [r7, #28]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005e68:	2208      	movs	r2, #8
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	6938      	ldr	r0, [r7, #16]
 8005e6e:	f7ff f8ed 	bl	800504c <_SendPacket>
  RECORD_END();
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f383 8811 	msr	BASEPRI, r3
}
 8005e78:	bf00      	nop
 8005e7a:	3720      	adds	r7, #32
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	200143c0 	.word	0x200143c0
 8005e84:	20014390 	.word	0x20014390

08005e88 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e90:	f3ef 8311 	mrs	r3, BASEPRI
 8005e94:	f04f 0120 	mov.w	r1, #32
 8005e98:	f381 8811 	msr	BASEPRI, r1
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	4819      	ldr	r0, [pc, #100]	; (8005f04 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005ea0:	f7fe ffe6 	bl	8004e70 <_PreparePacket>
 8005ea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005eaa:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	e00b      	b.n	8005ed6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	61f9      	str	r1, [r7, #28]
 8005ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	09db      	lsrs	r3, r3, #7
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eda:	d8f0      	bhi.n	8005ebe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	61fa      	str	r2, [r7, #28]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005eec:	2204      	movs	r2, #4
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	6938      	ldr	r0, [r7, #16]
 8005ef2:	f7ff f8ab 	bl	800504c <_SendPacket>
  RECORD_END();
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f383 8811 	msr	BASEPRI, r3
}
 8005efc:	bf00      	nop
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	200143c0 	.word	0x200143c0
 8005f08:	20014390 	.word	0x20014390

08005f0c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f14:	f3ef 8311 	mrs	r3, BASEPRI
 8005f18:	f04f 0120 	mov.w	r1, #32
 8005f1c:	f381 8811 	msr	BASEPRI, r1
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	4819      	ldr	r0, [pc, #100]	; (8005f88 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005f24:	f7fe ffa4 	bl	8004e70 <_PreparePacket>
 8005f28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f2e:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	e00b      	b.n	8005f5a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	1c59      	adds	r1, r3, #1
 8005f4a:	61f9      	str	r1, [r7, #28]
 8005f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	09db      	lsrs	r3, r3, #7
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5e:	d8f0      	bhi.n	8005f42 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	61fa      	str	r2, [r7, #28]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005f70:	2206      	movs	r2, #6
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	6938      	ldr	r0, [r7, #16]
 8005f76:	f7ff f869 	bl	800504c <_SendPacket>
  RECORD_END();
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f383 8811 	msr	BASEPRI, r3
}
 8005f80:	bf00      	nop
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	200143c0 	.word	0x200143c0
 8005f8c:	20014390 	.word	0x20014390

08005f90 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	1ad3      	subs	r3, r2, r3
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	20014390 	.word	0x20014390

08005fb0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08c      	sub	sp, #48	; 0x30
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005fba:	4b40      	ldr	r3, [pc, #256]	; (80060bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d077      	beq.n	80060b2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005fc2:	4b3e      	ldr	r3, [pc, #248]	; (80060bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fcc:	e008      	b.n	8005fe0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	3301      	adds	r3, #1
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d3f2      	bcc.n	8005fce <SEGGER_SYSVIEW_SendModule+0x1e>
 8005fe8:	e000      	b.n	8005fec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005fea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d055      	beq.n	800609e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff6:	f04f 0120 	mov.w	r1, #32
 8005ffa:	f381 8811 	msr	BASEPRI, r1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	482f      	ldr	r0, [pc, #188]	; (80060c0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006002:	f7fe ff35 	bl	8004e70 <_PreparePacket>
 8006006:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	623b      	str	r3, [r7, #32]
 8006014:	e00b      	b.n	800602e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1c59      	adds	r1, r3, #1
 800601e:	6279      	str	r1, [r7, #36]	; 0x24
 8006020:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	09db      	lsrs	r3, r3, #7
 800602c:	623b      	str	r3, [r7, #32]
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	2b7f      	cmp	r3, #127	; 0x7f
 8006032:	d8f0      	bhi.n	8006016 <SEGGER_SYSVIEW_SendModule+0x66>
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	627a      	str	r2, [r7, #36]	; 0x24
 800603a:	6a3a      	ldr	r2, [r7, #32]
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	e00b      	b.n	8006068 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	b2da      	uxtb	r2, r3
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	1c59      	adds	r1, r3, #1
 8006058:	61f9      	str	r1, [r7, #28]
 800605a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	09db      	lsrs	r3, r3, #7
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b7f      	cmp	r3, #127	; 0x7f
 800606c:	d8f0      	bhi.n	8006050 <SEGGER_SYSVIEW_SendModule+0xa0>
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	61fa      	str	r2, [r7, #28]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	4619      	mov	r1, r3
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7fe fec2 	bl	8004e10 <_EncodeStr>
 800608c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800608e:	2216      	movs	r2, #22
 8006090:	68f9      	ldr	r1, [r7, #12]
 8006092:	6938      	ldr	r0, [r7, #16]
 8006094:	f7fe ffda 	bl	800504c <_SendPacket>
      RECORD_END();
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d006      	beq.n	80060b2 <SEGGER_SYSVIEW_SendModule+0x102>
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4798      	blx	r3
    }
  }
}
 80060b2:	bf00      	nop
 80060b4:	3730      	adds	r7, #48	; 0x30
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200143b8 	.word	0x200143b8
 80060c0:	200143c0 	.word	0x200143c0

080060c4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80060ca:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00f      	beq.n	80060f2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80060d2:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f2      	bne.n	80060d8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200143b8 	.word	0x200143b8

08006100 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006106:	f3ef 8311 	mrs	r3, BASEPRI
 800610a:	f04f 0120 	mov.w	r1, #32
 800610e:	f381 8811 	msr	BASEPRI, r1
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	4817      	ldr	r0, [pc, #92]	; (8006174 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006116:	f7fe feab 	bl	8004e70 <_PreparePacket>
 800611a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	e00b      	b.n	8006144 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	b2da      	uxtb	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	1c59      	adds	r1, r3, #1
 8006134:	6179      	str	r1, [r7, #20]
 8006136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	09db      	lsrs	r3, r3, #7
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2b7f      	cmp	r3, #127	; 0x7f
 8006148:	d8f0      	bhi.n	800612c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	617a      	str	r2, [r7, #20]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800615a:	221b      	movs	r2, #27
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	68b8      	ldr	r0, [r7, #8]
 8006160:	f7fe ff74 	bl	800504c <_SendPacket>
  RECORD_END();
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f383 8811 	msr	BASEPRI, r3
}
 800616a:	bf00      	nop
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200143c0 	.word	0x200143c0
 8006178:	200143bc 	.word	0x200143bc

0800617c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	; 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006184:	f3ef 8311 	mrs	r3, BASEPRI
 8006188:	f04f 0120 	mov.w	r1, #32
 800618c:	f381 8811 	msr	BASEPRI, r1
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	4827      	ldr	r0, [pc, #156]	; (8006230 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006194:	f7fe fe6c 	bl	8004e70 <_PreparePacket>
 8006198:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800619a:	2280      	movs	r2, #128	; 0x80
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	6938      	ldr	r0, [r7, #16]
 80061a0:	f7fe fe36 	bl	8004e10 <_EncodeStr>
 80061a4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
 80061aa:	2301      	movs	r3, #1
 80061ac:	623b      	str	r3, [r7, #32]
 80061ae:	e00b      	b.n	80061c8 <SEGGER_SYSVIEW_Warn+0x4c>
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	1c59      	adds	r1, r3, #1
 80061b8:	6279      	str	r1, [r7, #36]	; 0x24
 80061ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	09db      	lsrs	r3, r3, #7
 80061c6:	623b      	str	r3, [r7, #32]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	2b7f      	cmp	r3, #127	; 0x7f
 80061cc:	d8f0      	bhi.n	80061b0 <SEGGER_SYSVIEW_Warn+0x34>
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	627a      	str	r2, [r7, #36]	; 0x24
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e00b      	b.n	8006200 <SEGGER_SYSVIEW_Warn+0x84>
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	1c59      	adds	r1, r3, #1
 80061f0:	61f9      	str	r1, [r7, #28]
 80061f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	09db      	lsrs	r3, r3, #7
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b7f      	cmp	r3, #127	; 0x7f
 8006204:	d8f0      	bhi.n	80061e8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	61fa      	str	r2, [r7, #28]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006216:	221a      	movs	r2, #26
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	6938      	ldr	r0, [r7, #16]
 800621c:	f7fe ff16 	bl	800504c <_SendPacket>
  RECORD_END();
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f383 8811 	msr	BASEPRI, r3
}
 8006226:	bf00      	nop
 8006228:	3728      	adds	r7, #40	; 0x28
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200143c0 	.word	0x200143c0

08006234 <__libc_init_array>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4d0d      	ldr	r5, [pc, #52]	; (800626c <__libc_init_array+0x38>)
 8006238:	4c0d      	ldr	r4, [pc, #52]	; (8006270 <__libc_init_array+0x3c>)
 800623a:	1b64      	subs	r4, r4, r5
 800623c:	10a4      	asrs	r4, r4, #2
 800623e:	2600      	movs	r6, #0
 8006240:	42a6      	cmp	r6, r4
 8006242:	d109      	bne.n	8006258 <__libc_init_array+0x24>
 8006244:	4d0b      	ldr	r5, [pc, #44]	; (8006274 <__libc_init_array+0x40>)
 8006246:	4c0c      	ldr	r4, [pc, #48]	; (8006278 <__libc_init_array+0x44>)
 8006248:	f000 f83e 	bl	80062c8 <_init>
 800624c:	1b64      	subs	r4, r4, r5
 800624e:	10a4      	asrs	r4, r4, #2
 8006250:	2600      	movs	r6, #0
 8006252:	42a6      	cmp	r6, r4
 8006254:	d105      	bne.n	8006262 <__libc_init_array+0x2e>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	f855 3b04 	ldr.w	r3, [r5], #4
 800625c:	4798      	blx	r3
 800625e:	3601      	adds	r6, #1
 8006260:	e7ee      	b.n	8006240 <__libc_init_array+0xc>
 8006262:	f855 3b04 	ldr.w	r3, [r5], #4
 8006266:	4798      	blx	r3
 8006268:	3601      	adds	r6, #1
 800626a:	e7f2      	b.n	8006252 <__libc_init_array+0x1e>
 800626c:	08006400 	.word	0x08006400
 8006270:	08006400 	.word	0x08006400
 8006274:	08006400 	.word	0x08006400
 8006278:	08006404 	.word	0x08006404

0800627c <memcmp>:
 800627c:	b510      	push	{r4, lr}
 800627e:	3901      	subs	r1, #1
 8006280:	4402      	add	r2, r0
 8006282:	4290      	cmp	r0, r2
 8006284:	d101      	bne.n	800628a <memcmp+0xe>
 8006286:	2000      	movs	r0, #0
 8006288:	e005      	b.n	8006296 <memcmp+0x1a>
 800628a:	7803      	ldrb	r3, [r0, #0]
 800628c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006290:	42a3      	cmp	r3, r4
 8006292:	d001      	beq.n	8006298 <memcmp+0x1c>
 8006294:	1b18      	subs	r0, r3, r4
 8006296:	bd10      	pop	{r4, pc}
 8006298:	3001      	adds	r0, #1
 800629a:	e7f2      	b.n	8006282 <memcmp+0x6>

0800629c <memcpy>:
 800629c:	440a      	add	r2, r1
 800629e:	4291      	cmp	r1, r2
 80062a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80062a4:	d100      	bne.n	80062a8 <memcpy+0xc>
 80062a6:	4770      	bx	lr
 80062a8:	b510      	push	{r4, lr}
 80062aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062b2:	4291      	cmp	r1, r2
 80062b4:	d1f9      	bne.n	80062aa <memcpy+0xe>
 80062b6:	bd10      	pop	{r4, pc}

080062b8 <memset>:
 80062b8:	4402      	add	r2, r0
 80062ba:	4603      	mov	r3, r0
 80062bc:	4293      	cmp	r3, r2
 80062be:	d100      	bne.n	80062c2 <memset+0xa>
 80062c0:	4770      	bx	lr
 80062c2:	f803 1b01 	strb.w	r1, [r3], #1
 80062c6:	e7f9      	b.n	80062bc <memset+0x4>

080062c8 <_init>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	bf00      	nop
 80062cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ce:	bc08      	pop	{r3}
 80062d0:	469e      	mov	lr, r3
 80062d2:	4770      	bx	lr

080062d4 <_fini>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	bf00      	nop
 80062d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062da:	bc08      	pop	{r3}
 80062dc:	469e      	mov	lr, r3
 80062de:	4770      	bx	lr
