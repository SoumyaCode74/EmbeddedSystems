
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000439c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800458c  0800458c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004594  08004594  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800459c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e18  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e2c  20012e2c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0cd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000257f  00000000  00000000  0002f111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d88  00000000  00000000  00032530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002439a  00000000  00000000  000332b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010190  00000000  00000000  00057652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e07b2  00000000  00000000  000677e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147f94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c84  00000000  00000000  00147fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004534 	.word	0x08004534

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08004534 	.word	0x08004534

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fc57 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f84b 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8b5 	bl	8000670 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(Task1_Handler, "Task-1", 100, NULL, 2, &task1_handle);
 8000506:	4b1d      	ldr	r3, [pc, #116]	; (800057c <main+0x88>)
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2302      	movs	r3, #2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2300      	movs	r3, #0
 8000510:	2264      	movs	r2, #100	; 0x64
 8000512:	491b      	ldr	r1, [pc, #108]	; (8000580 <main+0x8c>)
 8000514:	481b      	ldr	r0, [pc, #108]	; (8000584 <main+0x90>)
 8000516:	f002 fbe5 	bl	8002ce4 <xTaskCreate>
 800051a:	4603      	mov	r3, r0
 800051c:	4a1a      	ldr	r2, [pc, #104]	; (8000588 <main+0x94>)
 800051e:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <main+0x94>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d00a      	beq.n	800053e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800052c:	f383 8811 	msr	BASEPRI, r3
 8000530:	f3bf 8f6f 	isb	sy
 8000534:	f3bf 8f4f 	dsb	sy
 8000538:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800053a:	bf00      	nop
 800053c:	e7fe      	b.n	800053c <main+0x48>
  status = xTaskCreate(Task2_Handler, "Task-2", 100, NULL, 2, &task2_handle);
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <main+0x98>)
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2302      	movs	r3, #2
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2300      	movs	r3, #0
 8000548:	2264      	movs	r2, #100	; 0x64
 800054a:	4911      	ldr	r1, [pc, #68]	; (8000590 <main+0x9c>)
 800054c:	4811      	ldr	r0, [pc, #68]	; (8000594 <main+0xa0>)
 800054e:	f002 fbc9 	bl	8002ce4 <xTaskCreate>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <main+0x94>)
 8000556:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x94>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00a      	beq.n	8000576 <main+0x82>
        __asm volatile
 8000560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000564:	f383 8811 	msr	BASEPRI, r3
 8000568:	f3bf 8f6f 	isb	sy
 800056c:	f3bf 8f4f 	dsb	sy
 8000570:	603b      	str	r3, [r7, #0]
    }
 8000572:	bf00      	nop
 8000574:	e7fe      	b.n	8000574 <main+0x80>

  //Start freeRTOS scheduler
  vTaskStartScheduler();
 8000576:	f002 fd1f 	bl	8002fb8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057a:	e7fe      	b.n	800057a <main+0x86>
 800057c:	20000030 	.word	0x20000030
 8000580:	0800454c 	.word	0x0800454c
 8000584:	08000b2d 	.word	0x08000b2d
 8000588:	20000038 	.word	0x20000038
 800058c:	20000034 	.word	0x20000034
 8000590:	08004554 	.word	0x08004554
 8000594:	08000b55 	.word	0x08000b55

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 ffbc 	bl	8004524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <SystemClock_Config+0xd0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a28      	ldr	r2, [pc, #160]	; (8000668 <SystemClock_Config+0xd0>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b26      	ldr	r3, [pc, #152]	; (8000668 <SystemClock_Config+0xd0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <SystemClock_Config+0xd4>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <SystemClock_Config+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000610:	2332      	movs	r3, #50	; 0x32
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000614:	2304      	movs	r3, #4
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000618:	2307      	movs	r3, #7
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fead 	bl	8001380 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800062c:	f000 fab8 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800063c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000642:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f90e 	bl	8001870 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800065a:	f000 faa1 	bl	8000ba0 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
 800068a:	4bb1      	ldr	r3, [pc, #708]	; (8000950 <MX_GPIO_Init+0x2e0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4ab0      	ldr	r2, [pc, #704]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4bae      	ldr	r3, [pc, #696]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
 80006a6:	4baa      	ldr	r3, [pc, #680]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4aa9      	ldr	r2, [pc, #676]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4ba7      	ldr	r3, [pc, #668]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0320 	and.w	r3, r3, #32
 80006ba:	61fb      	str	r3, [r7, #28]
 80006bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	4ba3      	ldr	r3, [pc, #652]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4aa2      	ldr	r2, [pc, #648]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4ba0      	ldr	r3, [pc, #640]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	4b9c      	ldr	r3, [pc, #624]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a9b      	ldr	r2, [pc, #620]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b99      	ldr	r3, [pc, #612]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b95      	ldr	r3, [pc, #596]	; (8000950 <MX_GPIO_Init+0x2e0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a94      	ldr	r2, [pc, #592]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b92      	ldr	r3, [pc, #584]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b8e      	ldr	r3, [pc, #568]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a8d      	ldr	r2, [pc, #564]	; (8000950 <MX_GPIO_Init+0x2e0>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b8b      	ldr	r3, [pc, #556]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b87      	ldr	r3, [pc, #540]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a86      	ldr	r2, [pc, #536]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b84      	ldr	r3, [pc, #528]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b80      	ldr	r3, [pc, #512]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a7f      	ldr	r2, [pc, #508]	; (8000950 <MX_GPIO_Init+0x2e0>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b7d      	ldr	r3, [pc, #500]	; (8000950 <MX_GPIO_Init+0x2e0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2136      	movs	r1, #54	; 0x36
 800076a:	487a      	ldr	r0, [pc, #488]	; (8000954 <MX_GPIO_Init+0x2e4>)
 800076c:	f000 fdee 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2180      	movs	r1, #128	; 0x80
 8000774:	4878      	ldr	r0, [pc, #480]	; (8000958 <MX_GPIO_Init+0x2e8>)
 8000776:	f000 fde9 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000780:	4876      	ldr	r0, [pc, #472]	; (800095c <MX_GPIO_Init+0x2ec>)
 8000782:	f000 fde3 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800078c:	4874      	ldr	r0, [pc, #464]	; (8000960 <MX_GPIO_Init+0x2f0>)
 800078e:	f000 fddd 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000792:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007a4:	230c      	movs	r3, #12
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ac:	4619      	mov	r1, r3
 80007ae:	486d      	ldr	r0, [pc, #436]	; (8000964 <MX_GPIO_Init+0x2f4>)
 80007b0:	f000 fc20 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80007b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80007c6:	2305      	movs	r3, #5
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4864      	ldr	r0, [pc, #400]	; (8000964 <MX_GPIO_Init+0x2f4>)
 80007d2:	f000 fc0f 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007e8:	230e      	movs	r3, #14
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	485c      	ldr	r0, [pc, #368]	; (8000964 <MX_GPIO_Init+0x2f4>)
 80007f4:	f000 fbfe 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007f8:	2301      	movs	r3, #1
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000808:	230c      	movs	r3, #12
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	4850      	ldr	r0, [pc, #320]	; (8000954 <MX_GPIO_Init+0x2e4>)
 8000814:	f000 fbee 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin LD6_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin|LD6_Pin;
 8000818:	2336      	movs	r3, #54	; 0x36
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	4849      	ldr	r0, [pc, #292]	; (8000954 <MX_GPIO_Init+0x2e4>)
 8000830:	f000 fbe0 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000834:	f248 0307 	movw	r3, #32775	; 0x8007
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800083a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4843      	ldr	r0, [pc, #268]	; (8000958 <MX_GPIO_Init+0x2e8>)
 800084c:	f000 fbd2 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000850:	f641 0358 	movw	r3, #6232	; 0x1858
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000862:	230e      	movs	r3, #14
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	483a      	ldr	r0, [pc, #232]	; (8000958 <MX_GPIO_Init+0x2e8>)
 800086e:	f000 fbc1 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	4833      	ldr	r0, [pc, #204]	; (8000958 <MX_GPIO_Init+0x2e8>)
 800088a:	f000 fbb3 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800088e:	2303      	movs	r3, #3
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800089e:	2309      	movs	r3, #9
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	4619      	mov	r1, r3
 80008a8:	482f      	ldr	r0, [pc, #188]	; (8000968 <MX_GPIO_Init+0x2f8>)
 80008aa:	f000 fba3 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ae:	2304      	movs	r3, #4
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	4829      	ldr	r0, [pc, #164]	; (8000968 <MX_GPIO_Init+0x2f8>)
 80008c2:	f000 fb97 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80008c6:	f248 1333 	movw	r3, #33075	; 0x8133
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008d8:	230c      	movs	r3, #12
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	481f      	ldr	r0, [pc, #124]	; (8000960 <MX_GPIO_Init+0x2f0>)
 80008e4:	f000 fb86 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80008e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008fa:	230c      	movs	r3, #12
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4819      	ldr	r0, [pc, #100]	; (800096c <MX_GPIO_Init+0x2fc>)
 8000906:	f000 fb75 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800090a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800091c:	230e      	movs	r3, #14
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4810      	ldr	r0, [pc, #64]	; (8000968 <MX_GPIO_Init+0x2f8>)
 8000928:	f000 fb64 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800092c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800093e:	230c      	movs	r3, #12
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	4619      	mov	r1, r3
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_GPIO_Init+0x2f8>)
 800094a:	f000 fb53 	bl	8000ff4 <HAL_GPIO_Init>
 800094e:	e00f      	b.n	8000970 <MX_GPIO_Init+0x300>
 8000950:	40023800 	.word	0x40023800
 8000954:	40020800 	.word	0x40020800
 8000958:	40020000 	.word	0x40020000
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40021800 	.word	0x40021800
 8000964:	40021400 	.word	0x40021400
 8000968:	40020400 	.word	0x40020400
 800096c:	40021000 	.word	0x40021000

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	4864      	ldr	r0, [pc, #400]	; (8000b18 <MX_GPIO_Init+0x4a8>)
 8000986:	f000 fb35 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800098a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800099c:	230c      	movs	r3, #12
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	485d      	ldr	r0, [pc, #372]	; (8000b1c <MX_GPIO_Init+0x4ac>)
 80009a8:	f000 fb24 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	4856      	ldr	r0, [pc, #344]	; (8000b1c <MX_GPIO_Init+0x4ac>)
 80009c2:	f000 fb17 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	484f      	ldr	r0, [pc, #316]	; (8000b1c <MX_GPIO_Init+0x4ac>)
 80009e0:	f000 fb08 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80009e4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009f6:	230e      	movs	r3, #14
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4847      	ldr	r0, [pc, #284]	; (8000b20 <MX_GPIO_Init+0x4b0>)
 8000a02:	f000 faf7 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a06:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a18:	230e      	movs	r3, #14
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4840      	ldr	r0, [pc, #256]	; (8000b24 <MX_GPIO_Init+0x4b4>)
 8000a24:	f000 fae6 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2e:	2312      	movs	r3, #18
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	4837      	ldr	r0, [pc, #220]	; (8000b24 <MX_GPIO_Init+0x4b4>)
 8000a46:	f000 fad5 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a50:	2312      	movs	r3, #18
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	4830      	ldr	r0, [pc, #192]	; (8000b28 <MX_GPIO_Init+0x4b8>)
 8000a68:	f000 fac4 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	4827      	ldr	r0, [pc, #156]	; (8000b28 <MX_GPIO_Init+0x4b8>)
 8000a8a:	f000 fab3 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000a8e:	2348      	movs	r3, #72	; 0x48
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a9e:	230e      	movs	r3, #14
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481c      	ldr	r0, [pc, #112]	; (8000b1c <MX_GPIO_Init+0x4ac>)
 8000aaa:	f000 faa3 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000aae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ac0:	2309      	movs	r3, #9
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4815      	ldr	r0, [pc, #84]	; (8000b20 <MX_GPIO_Init+0x4b0>)
 8000acc:	f000 fa92 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ad0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_GPIO_Init+0x4b0>)
 8000aea:	f000 fa83 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000aee:	2360      	movs	r3, #96	; 0x60
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afe:	230c      	movs	r3, #12
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_GPIO_Init+0x4a8>)
 8000b0a:	f000 fa73 	bl	8000ff4 <HAL_GPIO_Init>

}
 8000b0e:	bf00      	nop
 8000b10:	3738      	adds	r7, #56	; 0x38
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021800 	.word	0x40021800
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020000 	.word	0x40020000

08000b2c <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameters){
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	while(1){
		GPIOG->ODR &= ~(0x03 << 13); //Reset both LEDs
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <Task1_Handler+0x24>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <Task1_Handler+0x24>)
 8000b3a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000b3e:	6153      	str	r3, [r2, #20]
		GPIOG->ODR |= (0x01 << 13); //Turn on GREEN LED
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <Task1_Handler+0x24>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	4a02      	ldr	r2, [pc, #8]	; (8000b50 <Task1_Handler+0x24>)
 8000b46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b4a:	6153      	str	r3, [r2, #20]
		GPIOG->ODR &= ~(0x03 << 13); //Reset both LEDs
 8000b4c:	e7f2      	b.n	8000b34 <Task1_Handler+0x8>
 8000b4e:	bf00      	nop
 8000b50:	40021800 	.word	0x40021800

08000b54 <Task2_Handler>:
	}
	GPIOG->ODR &= ~(0x01 << 13);
	vTaskDelete(task1_handle);
}
static void Task2_Handler(void* parameters){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	while(1){
		GPIOG->ODR &= ~(0x03 << 13); //Reset both LEDs
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <Task2_Handler+0x24>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <Task2_Handler+0x24>)
 8000b62:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000b66:	6153      	str	r3, [r2, #20]
		GPIOG->ODR |= (0x01 << 14); //Turn on RED LED
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <Task2_Handler+0x24>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	4a02      	ldr	r2, [pc, #8]	; (8000b78 <Task2_Handler+0x24>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6153      	str	r3, [r2, #20]
		GPIOG->ODR &= ~(0x03 << 13); //Reset both LEDs
 8000b74:	e7f2      	b.n	8000b5c <Task2_Handler+0x8>
 8000b76:	bf00      	nop
 8000b78:	40021800 	.word	0x40021800

08000b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8e:	f000 f92f 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40001000 	.word	0x40001000

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <HAL_InitTick+0xe4>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	4a32      	ldr	r2, [pc, #200]	; (8000ce0 <HAL_InitTick+0xe4>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <HAL_InitTick+0xe4>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f003 0310 	and.w	r3, r3, #16
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c28:	f107 0210 	add.w	r2, r7, #16
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 f828 	bl	8001c88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c38:	6a3b      	ldr	r3, [r7, #32]
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d103      	bne.n	8000c4a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c42:	f001 f80d 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8000c46:	6378      	str	r0, [r7, #52]	; 0x34
 8000c48:	e004      	b.n	8000c54 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c4a:	f001 f809 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c56:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <HAL_InitTick+0xe8>)
 8000c58:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5c:	0c9b      	lsrs	r3, r3, #18
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <HAL_InitTick+0xec>)
 8000c64:	4a21      	ldr	r2, [pc, #132]	; (8000cec <HAL_InitTick+0xf0>)
 8000c66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <HAL_InitTick+0xec>)
 8000c6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c70:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <HAL_InitTick+0xec>)
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_InitTick+0xec>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <HAL_InitTick+0xec>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_InitTick+0xec>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c88:	4817      	ldr	r0, [pc, #92]	; (8000ce8 <HAL_InitTick+0xec>)
 8000c8a:	f001 f82f 	bl	8001cec <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11b      	bne.n	8000cd4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c9c:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <HAL_InitTick+0xec>)
 8000c9e:	f001 f87f 	bl	8001da0 <HAL_TIM_Base_Start_IT>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d111      	bne.n	8000cd4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cb0:	2036      	movs	r0, #54	; 0x36
 8000cb2:	f000 f991 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d808      	bhi.n	8000cce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2036      	movs	r0, #54	; 0x36
 8000cc2:	f000 f96d 	bl	8000fa0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_InitTick+0xf4>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	e002      	b.n	8000cd4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3738      	adds	r7, #56	; 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	431bde83 	.word	0x431bde83
 8000ce8:	2000003c 	.word	0x2000003c
 8000cec:	40001000 	.word	0x40001000
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <TIM6_DAC_IRQHandler+0x10>)
 8000d26:	f001 f8ab 	bl	8001e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000003c 	.word	0x2000003c

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d74:	4c0b      	ldr	r4, [pc, #44]	; (8000da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d82:	f7ff ffd7 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f003 fb9b 	bl	80044c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fbb3 	bl	80004f4 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d9c:	0800459c 	.word	0x0800459c
  ldr r2, =_sbss
 8000da0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000da4:	20012e2c 	.word	0x20012e2c

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f8d8 	bl	8000f8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff ff0e 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fee4 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000084 	.word	0x20000084

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000084 	.word	0x20000084

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff4c 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb2:	f7ff ff61 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000fb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff ffb1 	bl	8000f24 <NVIC_EncodePriority>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff80 	bl	8000ed0 <__NVIC_SetPriority>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff54 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e177      	b.n	8001300 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8166 	bne.w	80012fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d005      	beq.n	8001046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	2b02      	cmp	r3, #2
 8001044:	d130      	bne.n	80010a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80c0 	beq.w	80012fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <HAL_GPIO_Init+0x324>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a65      	ldr	r2, [pc, #404]	; (8001318 <HAL_GPIO_Init+0x324>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <HAL_GPIO_Init+0x324>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001196:	4a61      	ldr	r2, [pc, #388]	; (800131c <HAL_GPIO_Init+0x328>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a58      	ldr	r2, [pc, #352]	; (8001320 <HAL_GPIO_Init+0x32c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d037      	beq.n	8001232 <HAL_GPIO_Init+0x23e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a57      	ldr	r2, [pc, #348]	; (8001324 <HAL_GPIO_Init+0x330>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d031      	beq.n	800122e <HAL_GPIO_Init+0x23a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a56      	ldr	r2, [pc, #344]	; (8001328 <HAL_GPIO_Init+0x334>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x236>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a55      	ldr	r2, [pc, #340]	; (800132c <HAL_GPIO_Init+0x338>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x232>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a54      	ldr	r2, [pc, #336]	; (8001330 <HAL_GPIO_Init+0x33c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x22e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a53      	ldr	r2, [pc, #332]	; (8001334 <HAL_GPIO_Init+0x340>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x22a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a52      	ldr	r2, [pc, #328]	; (8001338 <HAL_GPIO_Init+0x344>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x226>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a51      	ldr	r2, [pc, #324]	; (800133c <HAL_GPIO_Init+0x348>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x222>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a50      	ldr	r2, [pc, #320]	; (8001340 <HAL_GPIO_Init+0x34c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x21e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4f      	ldr	r2, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x350>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x21a>
 800120a:	2309      	movs	r3, #9
 800120c:	e012      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800120e:	230a      	movs	r3, #10
 8001210:	e010      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001212:	2308      	movs	r3, #8
 8001214:	e00e      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001216:	2307      	movs	r3, #7
 8001218:	e00c      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800121a:	2306      	movs	r3, #6
 800121c:	e00a      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800121e:	2305      	movs	r3, #5
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001222:	2304      	movs	r3, #4
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	; (800131c <HAL_GPIO_Init+0x328>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <HAL_GPIO_Init+0x354>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a34      	ldr	r2, [pc, #208]	; (8001348 <HAL_GPIO_Init+0x354>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b32      	ldr	r3, [pc, #200]	; (8001348 <HAL_GPIO_Init+0x354>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f ae84 	bls.w	8001010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40021400 	.word	0x40021400
 8001338:	40021800 	.word	0x40021800
 800133c:	40021c00 	.word	0x40021c00
 8001340:	40022000 	.word	0x40022000
 8001344:	40022400 	.word	0x40022400
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e267      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d075      	beq.n	800148a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139e:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d00c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d112      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4b82      	ldr	r3, [pc, #520]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013c2:	d10b      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d05b      	beq.n	8001488 <HAL_RCC_OscConfig+0x108>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d157      	bne.n	8001488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e242      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x74>
 80013e6:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a75      	ldr	r2, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b70      	ldr	r3, [pc, #448]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6f      	ldr	r2, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6c      	ldr	r2, [pc, #432]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 8001418:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a68      	ldr	r2, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a65      	ldr	r2, [pc, #404]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fcee 	bl	8000e18 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fcea 	bl	8000e18 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e207      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xc0>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fcda 	bl	8000e18 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fcd6 	bl	8000e18 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1f3      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0xe8>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001496:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1c7      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4937      	ldr	r1, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e03a      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_RCC_OscConfig+0x244>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fc8f 	bl	8000e18 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc8b 	bl	8000e18 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1a8      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4925      	ldr	r1, [pc, #148]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_RCC_OscConfig+0x244>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fc6e 	bl	8000e18 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fc6a 	bl	8000e18 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e187      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d036      	beq.n	80015d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d016      	beq.n	80015a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_RCC_OscConfig+0x248>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fc4e 	bl	8000e18 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fc4a 	bl	8000e18 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e167      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x240>)
 8001594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x200>
 800159e:	e01b      	b.n	80015d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_OscConfig+0x248>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fc37 	bl	8000e18 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	e00e      	b.n	80015cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fc33 	bl	8000e18 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d907      	bls.n	80015cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e150      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
 80015c0:	40023800 	.word	0x40023800
 80015c4:	42470000 	.word	0x42470000
 80015c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ea      	bne.n	80015ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 8097 	beq.w	8001714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b81      	ldr	r3, [pc, #516]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b7d      	ldr	r3, [pc, #500]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a7c      	ldr	r2, [pc, #496]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b77      	ldr	r3, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b74      	ldr	r3, [pc, #464]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a73      	ldr	r2, [pc, #460]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff fbf3 	bl	8000e18 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7ff fbef 	bl	8000e18 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e10c      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <HAL_RCC_OscConfig+0x474>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x2ea>
 800165c:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	4a63      	ldr	r2, [pc, #396]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6713      	str	r3, [r2, #112]	; 0x70
 8001668:	e01c      	b.n	80016a4 <HAL_RCC_OscConfig+0x324>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x30c>
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a5e      	ldr	r2, [pc, #376]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a5b      	ldr	r2, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0x324>
 800168c:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169c:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800169e:	f023 0304 	bic.w	r3, r3, #4
 80016a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d015      	beq.n	80016d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fbb4 	bl	8000e18 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fbb0 	bl	8000e18 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e0cb      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0ee      	beq.n	80016b4 <HAL_RCC_OscConfig+0x334>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d8:	f7ff fb9e 	bl	8000e18 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb9a 	bl	8000e18 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0b5      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f6:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ee      	bne.n	80016e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 800170e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a1 	beq.w	8001860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b08      	cmp	r3, #8
 8001728:	d05c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d141      	bne.n	80017b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_RCC_OscConfig+0x478>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fb6e 	bl	8000e18 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff fb6a 	bl	8000e18 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e087      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69da      	ldr	r2, [r3, #28]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	019b      	lsls	r3, r3, #6
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	3b01      	subs	r3, #1
 8001778:	041b      	lsls	r3, r3, #16
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	061b      	lsls	r3, r3, #24
 8001782:	491b      	ldr	r1, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x478>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fb43 	bl	8000e18 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff fb3f 	bl	8000e18 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e05c      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x416>
 80017b4:	e054      	b.n	8001860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_RCC_OscConfig+0x478>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fb2c 	bl	8000e18 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff fb28 	bl	8000e18 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e045      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_RCC_OscConfig+0x470>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x444>
 80017e2:	e03d      	b.n	8001860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e038      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000
 80017f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x4ec>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d028      	beq.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d121      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d11a      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	4293      	cmp	r3, r2
 8001836:	d111      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	3b01      	subs	r3, #1
 8001846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0cc      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d90c      	bls.n	80018ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0b8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	494d      	ldr	r1, [pc, #308]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d044      	beq.n	8001990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d119      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e07f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	2b03      	cmp	r3, #3
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e067      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4934      	ldr	r1, [pc, #208]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fa5a 	bl	8000e18 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff fa56 	bl	8000e18 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e04f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d20c      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e032      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4916      	ldr	r1, [pc, #88]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	490e      	ldr	r1, [pc, #56]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f6:	f000 f821 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f8f0 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08004574 	.word	0x08004574
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a40:	b094      	sub	sp, #80	; 0x50
 8001a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
 8001a48:	2300      	movs	r3, #0
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a54:	4b79      	ldr	r3, [pc, #484]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d00d      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	f200 80e1 	bhi.w	8001c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a6e:	e0db      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a74:	e0db      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a76:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7a:	e0d8      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	2200      	movs	r2, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aae:	4622      	mov	r2, r4
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	0159      	lsls	r1, r3, #5
 8001abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac0:	0150      	lsls	r0, r2, #5
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	1a51      	subs	r1, r2, r1
 8001aca:	6139      	str	r1, [r7, #16]
 8001acc:	4629      	mov	r1, r5
 8001ace:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	018b      	lsls	r3, r1, #6
 8001ae4:	4651      	mov	r1, sl
 8001ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aea:	4651      	mov	r1, sl
 8001aec:	018a      	lsls	r2, r1, #6
 8001aee:	4651      	mov	r1, sl
 8001af0:	ebb2 0801 	subs.w	r8, r2, r1
 8001af4:	4659      	mov	r1, fp
 8001af6:	eb63 0901 	sbc.w	r9, r3, r1
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b0e:	4690      	mov	r8, r2
 8001b10:	4699      	mov	r9, r3
 8001b12:	4623      	mov	r3, r4
 8001b14:	eb18 0303 	adds.w	r3, r8, r3
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	eb49 0303 	adc.w	r3, r9, r3
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b2e:	4629      	mov	r1, r5
 8001b30:	024b      	lsls	r3, r1, #9
 8001b32:	4621      	mov	r1, r4
 8001b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b38:	4621      	mov	r1, r4
 8001b3a:	024a      	lsls	r2, r1, #9
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b42:	2200      	movs	r2, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b4c:	f7fe fb50 	bl	80001f0 <__aeabi_uldivmod>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4613      	mov	r3, r2
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b58:	e058      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	2200      	movs	r2, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	4611      	mov	r1, r2
 8001b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b74:	4642      	mov	r2, r8
 8001b76:	464b      	mov	r3, r9
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0159      	lsls	r1, r3, #5
 8001b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b86:	0150      	lsls	r0, r2, #5
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b92:	4649      	mov	r1, r9
 8001b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bac:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	00eb      	lsls	r3, r5, #3
 8001bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc2:	00e2      	lsls	r2, r4, #3
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	4643      	mov	r3, r8
 8001bca:	18e3      	adds	r3, r4, r3
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	464b      	mov	r3, r9
 8001bd0:	eb45 0303 	adc.w	r3, r5, r3
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be2:	4629      	mov	r1, r5
 8001be4:	028b      	lsls	r3, r1, #10
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bec:	4621      	mov	r1, r4
 8001bee:	028a      	lsls	r2, r1, #10
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	61fa      	str	r2, [r7, #28]
 8001bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c00:	f7fe faf6 	bl	80001f0 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c26:	e002      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3750      	adds	r7, #80	; 0x50
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08004584 	.word	0x08004584

08001c88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	220f      	movs	r2, #15
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_RCC_GetClockConfig+0x60>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	601a      	str	r2, [r3, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40023c00 	.word	0x40023c00

08001cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e041      	b.n	8001d82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f839 	bl	8001d8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3304      	adds	r3, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f000 f9d8 	bl	80020e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d001      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e04e      	b.n	8001e56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d022      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de2:	d01d      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d018      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <HAL_TIM_Base_Start_IT+0xcc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00e      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d010      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	e007      	b.n	8001e54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40000c00 	.word	0x40000c00
 8001e74:	40010400 	.word	0x40010400
 8001e78:	40014000 	.word	0x40014000
 8001e7c:	40001800 	.word	0x40001800

08001e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d122      	bne.n	8001edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d11b      	bne.n	8001edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0202 	mvn.w	r2, #2
 8001eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8ee 	bl	80020a4 <HAL_TIM_IC_CaptureCallback>
 8001ec8:	e005      	b.n	8001ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8e0 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8f1 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d122      	bne.n	8001f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d11b      	bne.n	8001f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0204 	mvn.w	r2, #4
 8001f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8c4 	bl	80020a4 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8b6 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8c7 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0208 	mvn.w	r2, #8
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f89a 	bl	80020a4 <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f88c 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f89d 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0210 	mvn.w	r2, #16
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2208      	movs	r2, #8
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f870 	bl	80020a4 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f862 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f873 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10e      	bne.n	8002004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0201 	mvn.w	r2, #1
 8001ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fdbc 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	2b80      	cmp	r3, #128	; 0x80
 8002010:	d10e      	bne.n	8002030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	2b80      	cmp	r3, #128	; 0x80
 800201e:	d107      	bne.n	8002030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f902 	bl	8002234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d10e      	bne.n	800205c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d107      	bne.n	800205c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f838 	bl	80020cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b20      	cmp	r3, #32
 8002068:	d10e      	bne.n	8002088 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b20      	cmp	r3, #32
 8002076:	d107      	bne.n	8002088 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0220 	mvn.w	r2, #32
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8cc 	bl	8002220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a40      	ldr	r2, [pc, #256]	; (80021f4 <TIM_Base_SetConfig+0x114>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fe:	d00f      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3d      	ldr	r2, [pc, #244]	; (80021f8 <TIM_Base_SetConfig+0x118>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00b      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3c      	ldr	r2, [pc, #240]	; (80021fc <TIM_Base_SetConfig+0x11c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d007      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3b      	ldr	r2, [pc, #236]	; (8002200 <TIM_Base_SetConfig+0x120>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3a      	ldr	r2, [pc, #232]	; (8002204 <TIM_Base_SetConfig+0x124>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d108      	bne.n	8002132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <TIM_Base_SetConfig+0x114>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d02b      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002140:	d027      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a2c      	ldr	r2, [pc, #176]	; (80021f8 <TIM_Base_SetConfig+0x118>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d023      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <TIM_Base_SetConfig+0x11c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01f      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <TIM_Base_SetConfig+0x120>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01b      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a29      	ldr	r2, [pc, #164]	; (8002204 <TIM_Base_SetConfig+0x124>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d017      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a28      	ldr	r2, [pc, #160]	; (8002208 <TIM_Base_SetConfig+0x128>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a27      	ldr	r2, [pc, #156]	; (800220c <TIM_Base_SetConfig+0x12c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00f      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a26      	ldr	r2, [pc, #152]	; (8002210 <TIM_Base_SetConfig+0x130>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00b      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a25      	ldr	r2, [pc, #148]	; (8002214 <TIM_Base_SetConfig+0x134>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a24      	ldr	r2, [pc, #144]	; (8002218 <TIM_Base_SetConfig+0x138>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d003      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a23      	ldr	r2, [pc, #140]	; (800221c <TIM_Base_SetConfig+0x13c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d108      	bne.n	80021a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <TIM_Base_SetConfig+0x114>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_Base_SetConfig+0xf8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <TIM_Base_SetConfig+0x124>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d103      	bne.n	80021e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	615a      	str	r2, [r3, #20]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40010000 	.word	0x40010000
 80021f8:	40000400 	.word	0x40000400
 80021fc:	40000800 	.word	0x40000800
 8002200:	40000c00 	.word	0x40000c00
 8002204:	40010400 	.word	0x40010400
 8002208:	40014000 	.word	0x40014000
 800220c:	40014400 	.word	0x40014400
 8002210:	40014800 	.word	0x40014800
 8002214:	40001800 	.word	0x40001800
 8002218:	40001c00 	.word	0x40001c00
 800221c:	40002000 	.word	0x40002000

08002220 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002254:	f000 ff02 	bl	800305c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <pvPortMalloc+0x160>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002260:	f000 f908 	bl	8002474 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800226a:	2208      	movs	r2, #8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	3308      	adds	r3, #8
 8002276:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	43db      	mvns	r3, r3
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	d804      	bhi.n	800228c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4413      	add	r3, r2
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	e001      	b.n	8002290 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db70      	blt.n	8002378 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d06d      	beq.n	8002378 <pvPortMalloc+0x130>
 800229c:	4b43      	ldr	r3, [pc, #268]	; (80023ac <pvPortMalloc+0x164>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d868      	bhi.n	8002378 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80022a6:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <pvPortMalloc+0x168>)
 80022a8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <pvPortMalloc+0x168>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022b0:	e004      	b.n	80022bc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d903      	bls.n	80022ce <pvPortMalloc+0x86>
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f1      	bne.n	80022b2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80022ce:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <pvPortMalloc+0x160>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d04f      	beq.n	8002378 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2208      	movs	r2, #8
 80022de:	4413      	add	r3, r2
 80022e0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	1ad2      	subs	r2, r2, r3
 80022f2:	2308      	movs	r3, #8
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d91f      	bls.n	800233a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <pvPortMalloc+0xda>
        __asm volatile
 800230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	613b      	str	r3, [r7, #16]
    }
 800231e:	bf00      	nop
 8002320:	e7fe      	b.n	8002320 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1ad2      	subs	r2, r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002334:	6978      	ldr	r0, [r7, #20]
 8002336:	f000 f8f9 	bl	800252c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800233a:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <pvPortMalloc+0x164>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <pvPortMalloc+0x164>)
 8002346:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <pvPortMalloc+0x164>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <pvPortMalloc+0x16c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d203      	bcs.n	800235c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <pvPortMalloc+0x164>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <pvPortMalloc+0x16c>)
 800235a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <pvPortMalloc+0x170>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <pvPortMalloc+0x170>)
 8002376:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002378:	f000 fe7e 	bl	8003078 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <pvPortMalloc+0x154>
        __asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	60fb      	str	r3, [r7, #12]
    }
 8002398:	bf00      	nop
 800239a:	e7fe      	b.n	800239a <pvPortMalloc+0x152>
    return pvReturn;
 800239c:	69fb      	ldr	r3, [r7, #28]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3728      	adds	r7, #40	; 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20012c90 	.word	0x20012c90
 80023ac:	20012c94 	.word	0x20012c94
 80023b0:	20012c88 	.word	0x20012c88
 80023b4:	20012c98 	.word	0x20012c98
 80023b8:	20012c9c 	.word	0x20012c9c

080023bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d049      	beq.n	8002462 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80023ce:	2308      	movs	r3, #8
 80023d0:	425b      	negs	r3, r3
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4413      	add	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <vPortFree+0x3e>
        __asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	60fb      	str	r3, [r7, #12]
    }
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <vPortFree+0x5c>
        __asm volatile
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	60bb      	str	r3, [r7, #8]
    }
 8002414:	bf00      	nop
 8002416:	e7fe      	b.n	8002416 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0fdb      	lsrs	r3, r3, #31
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01c      	beq.n	8002462 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d118      	bne.n	8002462 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800243c:	f000 fe0e 	bl	800305c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <vPortFree+0xb0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4413      	add	r3, r2
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <vPortFree+0xb0>)
 800244c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800244e:	6938      	ldr	r0, [r7, #16]
 8002450:	f000 f86c 	bl	800252c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <vPortFree+0xb4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <vPortFree+0xb4>)
 800245c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800245e:	f000 fe0b 	bl	8003078 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20012c94 	.word	0x20012c94
 8002470:	20012ca0 	.word	0x20012ca0

08002474 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800247a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800247e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <prvHeapInit+0xa4>)
 8002482:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3307      	adds	r3, #7
 8002492:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0307 	bic.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	4a1d      	ldr	r2, [pc, #116]	; (8002518 <prvHeapInit+0xa4>)
 80024a4:	4413      	add	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024ac:	4a1b      	ldr	r2, [pc, #108]	; (800251c <prvHeapInit+0xa8>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <prvHeapInit+0xa8>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80024c0:	2208      	movs	r2, #8
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0307 	bic.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <prvHeapInit+0xac>)
 80024d4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <prvHeapInit+0xac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <prvHeapInit+0xac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	1ad2      	subs	r2, r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <prvHeapInit+0xac>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a08      	ldr	r2, [pc, #32]	; (8002524 <prvHeapInit+0xb0>)
 8002502:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a07      	ldr	r2, [pc, #28]	; (8002528 <prvHeapInit+0xb4>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	20000088 	.word	0x20000088
 800251c:	20012c88 	.word	0x20012c88
 8002520:	20012c90 	.word	0x20012c90
 8002524:	20012c98 	.word	0x20012c98
 8002528:	20012c94 	.word	0x20012c94

0800252c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <prvInsertBlockIntoFreeList+0xac>)
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e002      	b.n	8002540 <prvInsertBlockIntoFreeList+0x14>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d8f7      	bhi.n	800253a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4413      	add	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d108      	bne.n	800256e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	441a      	add	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	441a      	add	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d118      	bne.n	80025b4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <prvInsertBlockIntoFreeList+0xb0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d00d      	beq.n	80025aa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	441a      	add	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e008      	b.n	80025bc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <prvInsertBlockIntoFreeList+0xb0>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e003      	b.n	80025bc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d002      	beq.n	80025ca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20012c88 	.word	0x20012c88
 80025dc:	20012c90 	.word	0x20012c90

080025e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f103 0208 	add.w	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f103 0208 	add.w	r2, r3, #8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f103 0208 	add.w	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d103      	bne.n	800265a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e00c      	b.n	8002674 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3308      	adds	r3, #8
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e002      	b.n	8002668 <vListInsert+0x2e>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	429a      	cmp	r2, r3
 8002672:	d2f6      	bcs.n	8002662 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6892      	ldr	r2, [r2, #8]
 80026c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6852      	ldr	r2, [r2, #4]
 80026cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d103      	bne.n	80026e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800270a:	2301      	movs	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <xQueueGenericReset+0x2e>
        __asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	60fb      	str	r3, [r7, #12]
    }
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05d      	beq.n	80027f0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d059      	beq.n	80027f0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	2100      	movs	r1, #0
 8002746:	fba3 2302 	umull	r2, r3, r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d000      	beq.n	8002750 <xQueueGenericReset+0x50>
 800274e:	2101      	movs	r1, #1
 8002750:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002752:	2b00      	cmp	r3, #0
 8002754:	d14c      	bne.n	80027f0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002756:	f001 fdd7 	bl	8004308 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	6939      	ldr	r1, [r7, #16]
 8002764:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	441a      	add	r2, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2200      	movs	r2, #0
 8002774:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	3b01      	subs	r3, #1
 8002788:	6939      	ldr	r1, [r7, #16]
 800278a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	441a      	add	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	22ff      	movs	r2, #255	; 0xff
 800279a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	22ff      	movs	r2, #255	; 0xff
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d114      	bne.n	80027d6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01a      	beq.n	80027ea <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	3310      	adds	r3, #16
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 ff45 	bl	8003648 <xTaskRemoveFromEventList>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d012      	beq.n	80027ea <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <xQueueGenericReset+0x11c>)
 80027c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	e009      	b.n	80027ea <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	3310      	adds	r3, #16
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff00 	bl	80025e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	3324      	adds	r3, #36	; 0x24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fefb 	bl	80025e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80027ea:	f001 fdbd 	bl	8004368 <vPortExitCritical>
 80027ee:	e001      	b.n	80027f4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <xQueueGenericReset+0x110>
        __asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	60bb      	str	r3, [r7, #8]
    }
 800280c:	bf00      	nop
 800280e:	e7fe      	b.n	800280e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002810:	697b      	ldr	r3, [r7, #20]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000ed04 	.word	0xe000ed04

08002820 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02e      	beq.n	8002896 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002838:	2100      	movs	r1, #0
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	fba3 2302 	umull	r2, r3, r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d000      	beq.n	8002848 <xQueueGenericCreate+0x28>
 8002846:	2101      	movs	r1, #1
 8002848:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800284a:	2b00      	cmp	r3, #0
 800284c:	d123      	bne.n	8002896 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002856:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800285a:	d81c      	bhi.n	8002896 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	3350      	adds	r3, #80	; 0x50
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fcec 	bl	8002248 <pvPortMalloc>
 8002870:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01c      	beq.n	80028b2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3350      	adds	r3, #80	; 0x50
 8002880:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002882:	79fa      	ldrb	r2, [r7, #7]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f814 	bl	80028bc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002894:	e00d      	b.n	80028b2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <xQueueGenericCreate+0x92>
        __asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	613b      	str	r3, [r7, #16]
    }
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80028b2:	69fb      	ldr	r3, [r7, #28]
    }
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d103      	bne.n	80028d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e002      	b.n	80028de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028ea:	2101      	movs	r1, #1
 80028ec:	69b8      	ldr	r0, [r7, #24]
 80028ee:	f7ff ff07 	bl	8002700 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002910:	2300      	movs	r3, #0
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <xQueueReceive+0x30>
        __asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	623b      	str	r3, [r7, #32]
    }
 8002930:	bf00      	nop
 8002932:	e7fe      	b.n	8002932 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <xQueueReceive+0x3e>
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <xQueueReceive+0x42>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <xQueueReceive+0x44>
 8002946:	2300      	movs	r3, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <xQueueReceive+0x5e>
        __asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	61fb      	str	r3, [r7, #28]
    }
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002962:	f001 f881 	bl	8003a68 <xTaskGetSchedulerState>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <xQueueReceive+0x6e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <xQueueReceive+0x72>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <xQueueReceive+0x74>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <xQueueReceive+0x8e>
        __asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	61bb      	str	r3, [r7, #24]
    }
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002992:	f001 fcb9 	bl	8004308 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01f      	beq.n	80029e2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a6:	f000 f88d 	bl	8002ac4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00f      	beq.n	80029da <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	3310      	adds	r3, #16
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fe42 	bl	8003648 <xTaskRemoveFromEventList>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80029ca:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <xQueueReceive+0x1bc>)
 80029cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80029da:	f001 fcc5 	bl	8004368 <vPortExitCritical>
                return pdPASS;
 80029de:	2301      	movs	r3, #1
 80029e0:	e069      	b.n	8002ab6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029e8:	f001 fcbe 	bl	8004368 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e062      	b.n	8002ab6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029f6:	f107 0310 	add.w	r3, r7, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fefa 	bl	80037f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a04:	f001 fcb0 	bl	8004368 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a08:	f000 fb28 	bl	800305c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a0c:	f001 fc7c 	bl	8004308 <vPortEnterCritical>
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d103      	bne.n	8002a26 <xQueueReceive+0x122>
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d103      	bne.n	8002a3c <xQueueReceive+0x138>
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a3c:	f001 fc94 	bl	8004368 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a40:	1d3a      	adds	r2, r7, #4
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fee9 	bl	8003820 <xTaskCheckForTimeOut>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d123      	bne.n	8002a9c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a56:	f000 f8ad 	bl	8002bb4 <prvIsQueueEmpty>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d017      	beq.n	8002a90 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	3324      	adds	r3, #36	; 0x24
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fd83 	bl	8003574 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a70:	f000 f84e 	bl	8002b10 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a74:	f000 fb00 	bl	8003078 <xTaskResumeAll>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d189      	bne.n	8002992 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <xQueueReceive+0x1bc>)
 8002a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	e780      	b.n	8002992 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a92:	f000 f83d 	bl	8002b10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a96:	f000 faef 	bl	8003078 <xTaskResumeAll>
 8002a9a:	e77a      	b.n	8002992 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9e:	f000 f837 	bl	8002b10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002aa2:	f000 fae9 	bl	8003078 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aa8:	f000 f884 	bl	8002bb4 <prvIsQueueEmpty>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f43f af6f 	beq.w	8002992 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002ab4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3730      	adds	r7, #48	; 0x30
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	e000ed04 	.word	0xe000ed04

08002ac4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d018      	beq.n	8002b08 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	441a      	add	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d303      	bcc.n	8002af8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68d9      	ldr	r1, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	461a      	mov	r2, r3
 8002b02:	6838      	ldr	r0, [r7, #0]
 8002b04:	f001 fd00 	bl	8004508 <memcpy>
    }
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b18:	f001 fbf6 	bl	8004308 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b22:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b24:	e011      	b.n	8002b4a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d012      	beq.n	8002b54 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3324      	adds	r3, #36	; 0x24
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fd88 	bl	8003648 <xTaskRemoveFromEventList>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002b3e:	f000 fed5 	bl	80038ec <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	dce9      	bgt.n	8002b26 <prvUnlockQueue+0x16>
 8002b52:	e000      	b.n	8002b56 <prvUnlockQueue+0x46>
                    break;
 8002b54:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	22ff      	movs	r2, #255	; 0xff
 8002b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b5e:	f001 fc03 	bl	8004368 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b62:	f001 fbd1 	bl	8004308 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b6c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b6e:	e011      	b.n	8002b94 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3310      	adds	r3, #16
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fd63 	bl	8003648 <xTaskRemoveFromEventList>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b88:	f000 feb0 	bl	80038ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	dce9      	bgt.n	8002b70 <prvUnlockQueue+0x60>
 8002b9c:	e000      	b.n	8002ba0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b9e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	22ff      	movs	r2, #255	; 0xff
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ba8:	f001 fbde 	bl	8004368 <vPortExitCritical>
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bbc:	f001 fba4 	bl	8004308 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e001      	b.n	8002bd2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bd2:	f001 fbc9 	bl	8004368 <vPortExitCritical>

    return xReturn;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	60fb      	str	r3, [r7, #12]
    }
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d024      	beq.n	8002c5a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e01e      	b.n	8002c54 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002c16:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <vQueueAddToRegistry+0x98>)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d105      	bne.n	8002c32 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <vQueueAddToRegistry+0x98>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
                    break;
 8002c30:	e013      	b.n	8002c5a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <vQueueAddToRegistry+0x6e>
 8002c38:	4a0f      	ldr	r2, [pc, #60]	; (8002c78 <vQueueAddToRegistry+0x98>)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <vQueueAddToRegistry+0x98>)
 8002c4a:	4413      	add	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3301      	adds	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b07      	cmp	r3, #7
 8002c58:	d9dd      	bls.n	8002c16 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	20012ca4 	.word	0x20012ca4

08002c7c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c8c:	f001 fb3c 	bl	8004308 <vPortEnterCritical>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d103      	bne.n	8002ca6 <vQueueWaitForMessageRestricted+0x2a>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d103      	bne.n	8002cbc <vQueueWaitForMessageRestricted+0x40>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cbc:	f001 fb54 	bl	8004368 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3324      	adds	r3, #36	; 0x24
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fc73 	bl	80035bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff1a 	bl	8002b10 <prvUnlockQueue>
    }
 8002cdc:	bf00      	nop
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af04      	add	r7, sp, #16
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff faa5 	bl	8002248 <pvPortMalloc>
 8002cfe:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d013      	beq.n	8002d2e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d06:	2058      	movs	r0, #88	; 0x58
 8002d08:	f7ff fa9e 	bl	8002248 <pvPortMalloc>
 8002d0c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002d14:	2258      	movs	r2, #88	; 0x58
 8002d16:	2100      	movs	r1, #0
 8002d18:	69f8      	ldr	r0, [r7, #28]
 8002d1a:	f001 fc03 	bl	8004524 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
 8002d24:	e005      	b.n	8002d32 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002d26:	6978      	ldr	r0, [r7, #20]
 8002d28:	f7ff fb48 	bl	80023bc <vPortFree>
 8002d2c:	e001      	b.n	8002d32 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9303      	str	r3, [sp, #12]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	9302      	str	r3, [sp, #8]
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f80e 	bl	8002d70 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d54:	69f8      	ldr	r0, [r7, #28]
 8002d56:	f000 f899 	bl	8002e8c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	e002      	b.n	8002d66 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d66:	69bb      	ldr	r3, [r7, #24]
    }
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	461a      	mov	r2, r3
 8002d88:	21a5      	movs	r1, #165	; 0xa5
 8002d8a:	f001 fbcb 	bl	8004524 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f023 0307 	bic.w	r3, r3, #7
 8002da6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	617b      	str	r3, [r7, #20]
    }
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01e      	beq.n	8002e0c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e012      	b.n	8002dfa <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	7819      	ldrb	r1, [r3, #0]
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	4413      	add	r3, r2
 8002de2:	3334      	adds	r3, #52	; 0x34
 8002de4:	460a      	mov	r2, r1
 8002de6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	4413      	add	r3, r2
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d006      	beq.n	8002e02 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	3301      	adds	r3, #1
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2b09      	cmp	r3, #9
 8002dfe:	d9e9      	bls.n	8002dd4 <prvInitialiseNewTask+0x64>
 8002e00:	e000      	b.n	8002e04 <prvInitialiseNewTask+0x94>
            {
                break;
 8002e02:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d90a      	bls.n	8002e28 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	613b      	str	r3, [r7, #16]
    }
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d901      	bls.n	8002e32 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e2e:	2304      	movs	r3, #4
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	3304      	adds	r3, #4
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fbec 	bl	8002620 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	3318      	adds	r3, #24
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fbe7 	bl	8002620 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e56:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	f1c3 0205 	rsb	r2, r3, #5
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	68f9      	ldr	r1, [r7, #12]
 8002e6c:	69b8      	ldr	r0, [r7, #24]
 8002e6e:	f001 f91d 	bl	80040ac <pxPortInitialiseStack>
 8002e72:	4602      	mov	r2, r0
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e82:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e84:	bf00      	nop
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e94:	f001 fa38 	bl	8004308 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e98:	4b40      	ldr	r3, [pc, #256]	; (8002f9c <prvAddNewTaskToReadyList+0x110>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a3f      	ldr	r2, [pc, #252]	; (8002f9c <prvAddNewTaskToReadyList+0x110>)
 8002ea0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <prvAddNewTaskToReadyList+0x114>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <prvAddNewTaskToReadyList+0x114>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002eb0:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <prvAddNewTaskToReadyList+0x110>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d110      	bne.n	8002eda <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002eb8:	f000 fd3c 	bl	8003934 <prvInitialiseTaskLists>
 8002ebc:	e00d      	b.n	8002eda <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <prvAddNewTaskToReadyList+0x118>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <prvAddNewTaskToReadyList+0x114>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d802      	bhi.n	8002eda <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ed4:	4a32      	ldr	r2, [pc, #200]	; (8002fa0 <prvAddNewTaskToReadyList+0x114>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002eda:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <prvAddNewTaskToReadyList+0x11c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4a31      	ldr	r2, [pc, #196]	; (8002fa8 <prvAddNewTaskToReadyList+0x11c>)
 8002ee2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <prvAddNewTaskToReadyList+0x11c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <prvAddNewTaskToReadyList+0x120>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <prvAddNewTaskToReadyList+0x120>)
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	492b      	ldr	r1, [pc, #172]	; (8002fb0 <prvAddNewTaskToReadyList+0x124>)
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3304      	adds	r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	3204      	adds	r2, #4
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <prvAddNewTaskToReadyList+0x124>)
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	615a      	str	r2, [r3, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	4918      	ldr	r1, [pc, #96]	; (8002fb0 <prvAddNewTaskToReadyList+0x124>)
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	4814      	ldr	r0, [pc, #80]	; (8002fb0 <prvAddNewTaskToReadyList+0x124>)
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4403      	add	r3, r0
 8002f68:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f6a:	f001 f9fd 	bl	8004368 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <prvAddNewTaskToReadyList+0x118>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00e      	beq.n	8002f94 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <prvAddNewTaskToReadyList+0x114>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d207      	bcs.n	8002f94 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <prvAddNewTaskToReadyList+0x128>)
 8002f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20012dbc 	.word	0x20012dbc
 8002fa0:	20012ce4 	.word	0x20012ce4
 8002fa4:	20012dc8 	.word	0x20012dc8
 8002fa8:	20012dd8 	.word	0x20012dd8
 8002fac:	20012dc4 	.word	0x20012dc4
 8002fb0:	20012ce8 	.word	0x20012ce8
 8002fb4:	e000ed04 	.word	0xe000ed04

08002fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <vTaskStartScheduler+0x88>)
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2282      	movs	r2, #130	; 0x82
 8002fca:	491e      	ldr	r1, [pc, #120]	; (8003044 <vTaskStartScheduler+0x8c>)
 8002fcc:	481e      	ldr	r0, [pc, #120]	; (8003048 <vTaskStartScheduler+0x90>)
 8002fce:	f7ff fe89 	bl	8002ce4 <xTaskCreate>
 8002fd2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002fda:	f000 fde3 	bl	8003ba4 <xTimerCreateTimerTask>
 8002fde:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d116      	bne.n	8003014 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	60bb      	str	r3, [r7, #8]
    }
 8002ff8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <vTaskStartScheduler+0x94>)
 8002ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8003000:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <vTaskStartScheduler+0x98>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <vTaskStartScheduler+0x9c>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800300e:	f001 f8d9 	bl	80041c4 <xPortStartScheduler>
 8003012:	e00e      	b.n	8003032 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	d10a      	bne.n	8003032 <vTaskStartScheduler+0x7a>
        __asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	607b      	str	r3, [r7, #4]
    }
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <vTaskStartScheduler+0xa0>)
 8003034:	681b      	ldr	r3, [r3, #0]
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20012de0 	.word	0x20012de0
 8003044:	0800455c 	.word	0x0800455c
 8003048:	08003905 	.word	0x08003905
 800304c:	20012ddc 	.word	0x20012ddc
 8003050:	20012dc8 	.word	0x20012dc8
 8003054:	20012dc0 	.word	0x20012dc0
 8003058:	2000000c 	.word	0x2000000c

0800305c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <vTaskSuspendAll+0x18>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a03      	ldr	r2, [pc, #12]	; (8003074 <vTaskSuspendAll+0x18>)
 8003068:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800306a:	bf00      	nop
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	20012de4 	.word	0x20012de4

08003078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003086:	4b71      	ldr	r3, [pc, #452]	; (800324c <xTaskResumeAll+0x1d4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10a      	bne.n	80030a4 <xTaskResumeAll+0x2c>
        __asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	607b      	str	r3, [r7, #4]
    }
 80030a0:	bf00      	nop
 80030a2:	e7fe      	b.n	80030a2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030a4:	f001 f930 	bl	8004308 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030a8:	4b68      	ldr	r3, [pc, #416]	; (800324c <xTaskResumeAll+0x1d4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	4a67      	ldr	r2, [pc, #412]	; (800324c <xTaskResumeAll+0x1d4>)
 80030b0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030b2:	4b66      	ldr	r3, [pc, #408]	; (800324c <xTaskResumeAll+0x1d4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 80c0 	bne.w	800323c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <xTaskResumeAll+0x1d8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80bb 	beq.w	800323c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030c6:	e08a      	b.n	80031de <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c8:	4b62      	ldr	r3, [pc, #392]	; (8003254 <xTaskResumeAll+0x1dc>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	6a12      	ldr	r2, [r2, #32]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	69d2      	ldr	r2, [r2, #28]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3318      	adds	r3, #24
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d103      	bne.n	80030fe <xTaskResumeAll+0x86>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	6a1a      	ldr	r2, [r3, #32]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2200      	movs	r2, #0
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	1e5a      	subs	r2, r3, #1
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	68d2      	ldr	r2, [r2, #12]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	6892      	ldr	r2, [r2, #8]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	3304      	adds	r3, #4
 8003130:	429a      	cmp	r2, r3
 8003132:	d103      	bne.n	800313c <xTaskResumeAll+0xc4>
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2200      	movs	r2, #0
 8003140:	615a      	str	r2, [r3, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <xTaskResumeAll+0x1e0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	4a3f      	ldr	r2, [pc, #252]	; (8003258 <xTaskResumeAll+0x1e0>)
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	493e      	ldr	r1, [pc, #248]	; (800325c <xTaskResumeAll+0x1e4>)
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3304      	adds	r3, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	3204      	adds	r2, #4
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	1d1a      	adds	r2, r3, #4
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4a2e      	ldr	r2, [pc, #184]	; (800325c <xTaskResumeAll+0x1e4>)
 80031a2:	441a      	add	r2, r3
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	615a      	str	r2, [r3, #20]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	492b      	ldr	r1, [pc, #172]	; (800325c <xTaskResumeAll+0x1e4>)
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	1c59      	adds	r1, r3, #1
 80031bc:	4827      	ldr	r0, [pc, #156]	; (800325c <xTaskResumeAll+0x1e4>)
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4403      	add	r3, r0
 80031c8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <xTaskResumeAll+0x1e8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d302      	bcc.n	80031de <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <xTaskResumeAll+0x1ec>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <xTaskResumeAll+0x1dc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f47f af70 	bne.w	80030c8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80031ee:	f000 fc1f 	bl	8003a30 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <xTaskResumeAll+0x1f0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d010      	beq.n	8003220 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80031fe:	f000 f847 	bl	8003290 <xTaskIncrementTick>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <xTaskResumeAll+0x1ec>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3b01      	subs	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f1      	bne.n	80031fe <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <xTaskResumeAll+0x1f0>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <xTaskResumeAll+0x1ec>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003228:	2301      	movs	r3, #1
 800322a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <xTaskResumeAll+0x1f4>)
 800322e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800323c:	f001 f894 	bl	8004368 <vPortExitCritical>

    return xAlreadyYielded;
 8003240:	69bb      	ldr	r3, [r7, #24]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20012de4 	.word	0x20012de4
 8003250:	20012dbc 	.word	0x20012dbc
 8003254:	20012d7c 	.word	0x20012d7c
 8003258:	20012dc4 	.word	0x20012dc4
 800325c:	20012ce8 	.word	0x20012ce8
 8003260:	20012ce4 	.word	0x20012ce4
 8003264:	20012dd0 	.word	0x20012dd0
 8003268:	20012dcc 	.word	0x20012dcc
 800326c:	e000ed04 	.word	0xe000ed04

08003270 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <xTaskGetTickCount+0x1c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800327c:	687b      	ldr	r3, [r7, #4]
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20012dc0 	.word	0x20012dc0

08003290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800329a:	4b7d      	ldr	r3, [pc, #500]	; (8003490 <xTaskIncrementTick+0x200>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80ec 	bne.w	800347c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032a4:	4b7b      	ldr	r3, [pc, #492]	; (8003494 <xTaskIncrementTick+0x204>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032ac:	4a79      	ldr	r2, [pc, #484]	; (8003494 <xTaskIncrementTick+0x204>)
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d120      	bne.n	80032fa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80032b8:	4b77      	ldr	r3, [pc, #476]	; (8003498 <xTaskIncrementTick+0x208>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <xTaskIncrementTick+0x48>
        __asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	607b      	str	r3, [r7, #4]
    }
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <xTaskIncrementTick+0x46>
 80032d8:	4b6f      	ldr	r3, [pc, #444]	; (8003498 <xTaskIncrementTick+0x208>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	4b6f      	ldr	r3, [pc, #444]	; (800349c <xTaskIncrementTick+0x20c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6d      	ldr	r2, [pc, #436]	; (8003498 <xTaskIncrementTick+0x208>)
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4a6d      	ldr	r2, [pc, #436]	; (800349c <xTaskIncrementTick+0x20c>)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b6c      	ldr	r3, [pc, #432]	; (80034a0 <xTaskIncrementTick+0x210>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a6b      	ldr	r2, [pc, #428]	; (80034a0 <xTaskIncrementTick+0x210>)
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	f000 fb9b 	bl	8003a30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032fa:	4b6a      	ldr	r3, [pc, #424]	; (80034a4 <xTaskIncrementTick+0x214>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a3a      	ldr	r2, [r7, #32]
 8003300:	429a      	cmp	r2, r3
 8003302:	f0c0 80a6 	bcc.w	8003452 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003306:	4b64      	ldr	r3, [pc, #400]	; (8003498 <xTaskIncrementTick+0x208>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003310:	4b64      	ldr	r3, [pc, #400]	; (80034a4 <xTaskIncrementTick+0x214>)
 8003312:	f04f 32ff 	mov.w	r2, #4294967295
 8003316:	601a      	str	r2, [r3, #0]
                    break;
 8003318:	e09b      	b.n	8003452 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800331a:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <xTaskIncrementTick+0x208>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800332a:	6a3a      	ldr	r2, [r7, #32]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	429a      	cmp	r2, r3
 8003330:	d203      	bcs.n	800333a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003332:	4a5c      	ldr	r2, [pc, #368]	; (80034a4 <xTaskIncrementTick+0x214>)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003338:	e08b      	b.n	8003452 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	68d2      	ldr	r2, [r2, #12]
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	6892      	ldr	r2, [r2, #8]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	3304      	adds	r3, #4
 800335c:	429a      	cmp	r2, r3
 800335e:	d103      	bne.n	8003368 <xTaskIncrementTick+0xd8>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2200      	movs	r2, #0
 800336c:	615a      	str	r2, [r3, #20]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	1e5a      	subs	r2, r3, #1
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01e      	beq.n	80033be <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	6a12      	ldr	r2, [r2, #32]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	69d2      	ldr	r2, [r2, #28]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3318      	adds	r3, #24
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d103      	bne.n	80033ae <xTaskIncrementTick+0x11e>
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2200      	movs	r2, #0
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <xTaskIncrementTick+0x218>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	4a36      	ldr	r2, [pc, #216]	; (80034a8 <xTaskIncrementTick+0x218>)
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d4:	4935      	ldr	r1, [pc, #212]	; (80034ac <xTaskIncrementTick+0x21c>)
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3304      	adds	r3, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	60da      	str	r2, [r3, #12]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	3204      	adds	r2, #4
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1d1a      	adds	r2, r3, #4
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4a26      	ldr	r2, [pc, #152]	; (80034ac <xTaskIncrementTick+0x21c>)
 8003414:	441a      	add	r2, r3
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	615a      	str	r2, [r3, #20]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341e:	4923      	ldr	r1, [pc, #140]	; (80034ac <xTaskIncrementTick+0x21c>)
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1c59      	adds	r1, r3, #1
 800342e:	481f      	ldr	r0, [pc, #124]	; (80034ac <xTaskIncrementTick+0x21c>)
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4403      	add	r3, r0
 800343a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <xTaskIncrementTick+0x220>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	429a      	cmp	r2, r3
 8003448:	f67f af5d 	bls.w	8003306 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800344c:	2301      	movs	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003450:	e759      	b.n	8003306 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <xTaskIncrementTick+0x220>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003458:	4914      	ldr	r1, [pc, #80]	; (80034ac <xTaskIncrementTick+0x21c>)
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d901      	bls.n	800346e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800346a:	2301      	movs	r3, #1
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <xTaskIncrementTick+0x224>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8003476:	2301      	movs	r3, #1
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	e004      	b.n	8003486 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <xTaskIncrementTick+0x228>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <xTaskIncrementTick+0x228>)
 8003484:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003488:	4618      	mov	r0, r3
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20012de4 	.word	0x20012de4
 8003494:	20012dc0 	.word	0x20012dc0
 8003498:	20012d74 	.word	0x20012d74
 800349c:	20012d78 	.word	0x20012d78
 80034a0:	20012dd4 	.word	0x20012dd4
 80034a4:	20012ddc 	.word	0x20012ddc
 80034a8:	20012dc4 	.word	0x20012dc4
 80034ac:	20012ce8 	.word	0x20012ce8
 80034b0:	20012ce4 	.word	0x20012ce4
 80034b4:	20012dd0 	.word	0x20012dd0
 80034b8:	20012dcc 	.word	0x20012dcc

080034bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034c2:	4b27      	ldr	r3, [pc, #156]	; (8003560 <vTaskSwitchContext+0xa4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80034ca:	4b26      	ldr	r3, [pc, #152]	; (8003564 <vTaskSwitchContext+0xa8>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80034d0:	e03f      	b.n	8003552 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80034d2:	4b24      	ldr	r3, [pc, #144]	; (8003564 <vTaskSwitchContext+0xa8>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d8:	4b23      	ldr	r3, [pc, #140]	; (8003568 <vTaskSwitchContext+0xac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80034e6:	7afb      	ldrb	r3, [r7, #11]
 80034e8:	f1c3 031f 	rsb	r3, r3, #31
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	491f      	ldr	r1, [pc, #124]	; (800356c <vTaskSwitchContext+0xb0>)
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	607b      	str	r3, [r7, #4]
    }
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <vTaskSwitchContext+0x5a>
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <vTaskSwitchContext+0xb0>)
 8003524:	4413      	add	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3308      	adds	r3, #8
 800353a:	429a      	cmp	r2, r3
 800353c:	d104      	bne.n	8003548 <vTaskSwitchContext+0x8c>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <vTaskSwitchContext+0xb4>)
 8003550:	6013      	str	r3, [r2, #0]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20012de4 	.word	0x20012de4
 8003564:	20012dd0 	.word	0x20012dd0
 8003568:	20012dc4 	.word	0x20012dc4
 800356c:	20012ce8 	.word	0x20012ce8
 8003570:	20012ce4 	.word	0x20012ce4

08003574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	60fb      	str	r3, [r7, #12]
    }
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <vTaskPlaceOnEventList+0x44>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3318      	adds	r3, #24
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff f849 	bl	800263a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035a8:	2101      	movs	r1, #1
 80035aa:	6838      	ldr	r0, [r7, #0]
 80035ac:	f000 fa7a 	bl	8003aa4 <prvAddCurrentTaskToDelayedList>
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20012ce4 	.word	0x20012ce4

080035bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	613b      	str	r3, [r7, #16]
    }
 80035e0:	bf00      	nop
 80035e2:	e7fe      	b.n	80035e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <vTaskPlaceOnEventListRestricted+0x88>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	61da      	str	r2, [r3, #28]
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <vTaskPlaceOnEventListRestricted+0x88>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	621a      	str	r2, [r3, #32]
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <vTaskPlaceOnEventListRestricted+0x88>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	3218      	adds	r2, #24
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <vTaskPlaceOnEventListRestricted+0x88>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f103 0218 	add.w	r2, r3, #24
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <vTaskPlaceOnEventListRestricted+0x88>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800362c:	f04f 33ff 	mov.w	r3, #4294967295
 8003630:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	68b8      	ldr	r0, [r7, #8]
 8003636:	f000 fa35 	bl	8003aa4 <prvAddCurrentTaskToDelayedList>
    }
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20012ce4 	.word	0x20012ce4

08003648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003648:	b480      	push	{r7}
 800364a:	b08b      	sub	sp, #44	; 0x2c
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	60fb      	str	r3, [r7, #12]
    }
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	6a12      	ldr	r2, [r2, #32]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	69d2      	ldr	r2, [r2, #28]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	3318      	adds	r3, #24
 8003696:	429a      	cmp	r2, r3
 8003698:	d103      	bne.n	80036a2 <xTaskRemoveFromEventList+0x5a>
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	6a1a      	ldr	r2, [r3, #32]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	2200      	movs	r2, #0
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036b2:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <xTaskRemoveFromEventList+0x194>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d15e      	bne.n	8003778 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	6a3a      	ldr	r2, [r7, #32]
 80036c6:	68d2      	ldr	r2, [r2, #12]
 80036c8:	609a      	str	r2, [r3, #8]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	6892      	ldr	r2, [r2, #8]
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	3304      	adds	r3, #4
 80036dc:	429a      	cmp	r2, r3
 80036de:	d103      	bne.n	80036e8 <xTaskRemoveFromEventList+0xa0>
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	2200      	movs	r2, #0
 80036ec:	615a      	str	r2, [r3, #20]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <xTaskRemoveFromEventList+0x198>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	4a36      	ldr	r2, [pc, #216]	; (80037e0 <xTaskRemoveFromEventList+0x198>)
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	4935      	ldr	r1, [pc, #212]	; (80037e4 <xTaskRemoveFromEventList+0x19c>)
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3304      	adds	r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	6a3a      	ldr	r2, [r7, #32]
 8003734:	3204      	adds	r2, #4
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	1d1a      	adds	r2, r3, #4
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <xTaskRemoveFromEventList+0x19c>)
 800374e:	441a      	add	r2, r3
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	615a      	str	r2, [r3, #20]
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	4922      	ldr	r1, [pc, #136]	; (80037e4 <xTaskRemoveFromEventList+0x19c>)
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	1c59      	adds	r1, r3, #1
 8003768:	481e      	ldr	r0, [pc, #120]	; (80037e4 <xTaskRemoveFromEventList+0x19c>)
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4403      	add	r3, r0
 8003774:	6019      	str	r1, [r3, #0]
 8003776:	e01b      	b.n	80037b0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <xTaskRemoveFromEventList+0x1a0>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	61da      	str	r2, [r3, #28]
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	621a      	str	r2, [r3, #32]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	3218      	adds	r2, #24
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f103 0218 	add.w	r2, r3, #24
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <xTaskRemoveFromEventList+0x1a0>)
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <xTaskRemoveFromEventList+0x1a0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3301      	adds	r3, #1
 80037ac:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <xTaskRemoveFromEventList+0x1a0>)
 80037ae:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <xTaskRemoveFromEventList+0x1a4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d905      	bls.n	80037ca <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <xTaskRemoveFromEventList+0x1a8>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e001      	b.n	80037ce <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	372c      	adds	r7, #44	; 0x2c
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20012de4 	.word	0x20012de4
 80037e0:	20012dc4 	.word	0x20012dc4
 80037e4:	20012ce8 	.word	0x20012ce8
 80037e8:	20012d7c 	.word	0x20012d7c
 80037ec:	20012ce4 	.word	0x20012ce4
 80037f0:	20012dd0 	.word	0x20012dd0

080037f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <vTaskInternalSetTimeOutState+0x24>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <vTaskInternalSetTimeOutState+0x28>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	605a      	str	r2, [r3, #4]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	20012dd4 	.word	0x20012dd4
 800381c:	20012dc0 	.word	0x20012dc0

08003820 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	613b      	str	r3, [r7, #16]
    }
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	60fb      	str	r3, [r7, #12]
    }
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003862:	f000 fd51 	bl	8004308 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003866:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <xTaskCheckForTimeOut+0xc4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d102      	bne.n	8003886 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	e026      	b.n	80038d4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <xTaskCheckForTimeOut+0xc8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d00a      	beq.n	80038a8 <xTaskCheckForTimeOut+0x88>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	429a      	cmp	r2, r3
 800389a:	d305      	bcc.n	80038a8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800389c:	2301      	movs	r3, #1
 800389e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e015      	b.n	80038d4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d20b      	bcs.n	80038ca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ff98 	bl	80037f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	e004      	b.n	80038d4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80038d4:	f000 fd48 	bl	8004368 <vPortExitCritical>

    return xReturn;
 80038d8:	69fb      	ldr	r3, [r7, #28]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20012dc0 	.word	0x20012dc0
 80038e8:	20012dd4 	.word	0x20012dd4

080038ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <vTaskMissedYield+0x14>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	20012dd0 	.word	0x20012dd0

08003904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800390c:	f000 f852 	bl	80039b4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <prvIdleTask+0x28>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d9f9      	bls.n	800390c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <prvIdleTask+0x2c>)
 800391a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003928:	e7f0      	b.n	800390c <prvIdleTask+0x8>
 800392a:	bf00      	nop
 800392c:	20012ce8 	.word	0x20012ce8
 8003930:	e000ed04 	.word	0xe000ed04

08003934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	e00c      	b.n	800395a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <prvInitialiseTaskLists+0x60>)
 800394c:	4413      	add	r3, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fe46 	bl	80025e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3301      	adds	r3, #1
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d9ef      	bls.n	8003940 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003960:	480d      	ldr	r0, [pc, #52]	; (8003998 <prvInitialiseTaskLists+0x64>)
 8003962:	f7fe fe3d 	bl	80025e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003966:	480d      	ldr	r0, [pc, #52]	; (800399c <prvInitialiseTaskLists+0x68>)
 8003968:	f7fe fe3a 	bl	80025e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800396c:	480c      	ldr	r0, [pc, #48]	; (80039a0 <prvInitialiseTaskLists+0x6c>)
 800396e:	f7fe fe37 	bl	80025e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003972:	480c      	ldr	r0, [pc, #48]	; (80039a4 <prvInitialiseTaskLists+0x70>)
 8003974:	f7fe fe34 	bl	80025e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003978:	480b      	ldr	r0, [pc, #44]	; (80039a8 <prvInitialiseTaskLists+0x74>)
 800397a:	f7fe fe31 	bl	80025e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <prvInitialiseTaskLists+0x78>)
 8003980:	4a05      	ldr	r2, [pc, #20]	; (8003998 <prvInitialiseTaskLists+0x64>)
 8003982:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <prvInitialiseTaskLists+0x7c>)
 8003986:	4a05      	ldr	r2, [pc, #20]	; (800399c <prvInitialiseTaskLists+0x68>)
 8003988:	601a      	str	r2, [r3, #0]
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20012ce8 	.word	0x20012ce8
 8003998:	20012d4c 	.word	0x20012d4c
 800399c:	20012d60 	.word	0x20012d60
 80039a0:	20012d7c 	.word	0x20012d7c
 80039a4:	20012d90 	.word	0x20012d90
 80039a8:	20012da8 	.word	0x20012da8
 80039ac:	20012d74 	.word	0x20012d74
 80039b0:	20012d78 	.word	0x20012d78

080039b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039ba:	e019      	b.n	80039f0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80039bc:	f000 fca4 	bl	8004308 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <prvCheckTasksWaitingTermination+0x50>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fe6d 	bl	80026ac <uxListRemove>
                --uxCurrentNumberOfTasks;
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <prvCheckTasksWaitingTermination+0x54>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	4a0b      	ldr	r2, [pc, #44]	; (8003a08 <prvCheckTasksWaitingTermination+0x54>)
 80039da:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <prvCheckTasksWaitingTermination+0x58>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <prvCheckTasksWaitingTermination+0x58>)
 80039e4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80039e6:	f000 fcbf 	bl	8004368 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f810 	bl	8003a10 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <prvCheckTasksWaitingTermination+0x58>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e1      	bne.n	80039bc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20012d90 	.word	0x20012d90
 8003a08:	20012dbc 	.word	0x20012dbc
 8003a0c:	20012da4 	.word	0x20012da4

08003a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fccd 	bl	80023bc <vPortFree>
            vPortFree( pxTCB );
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe fcca 	bl	80023bc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <prvResetNextTaskUnblockTime+0x30>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <prvResetNextTaskUnblockTime+0x34>)
 8003a40:	f04f 32ff 	mov.w	r2, #4294967295
 8003a44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a46:	e005      	b.n	8003a54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <prvResetNextTaskUnblockTime+0x30>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <prvResetNextTaskUnblockTime+0x34>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20012d74 	.word	0x20012d74
 8003a64:	20012ddc 	.word	0x20012ddc

08003a68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <xTaskGetSchedulerState+0x34>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a76:	2301      	movs	r3, #1
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	e008      	b.n	8003a8e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <xTaskGetSchedulerState+0x38>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a84:	2302      	movs	r3, #2
 8003a86:	607b      	str	r3, [r7, #4]
 8003a88:	e001      	b.n	8003a8e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a8e:	687b      	ldr	r3, [r7, #4]
    }
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	20012dc8 	.word	0x20012dc8
 8003aa0:	20012de4 	.word	0x20012de4

08003aa4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003aae:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ab4:	4b35      	ldr	r3, [pc, #212]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fdf6 	bl	80026ac <uxListRemove>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ac6:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	2201      	movs	r2, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	4b2e      	ldr	r3, [pc, #184]	; (8003b90 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	4a2d      	ldr	r2, [pc, #180]	; (8003b90 <prvAddCurrentTaskToDelayedList+0xec>)
 8003adc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d124      	bne.n	8003b30 <prvAddCurrentTaskToDelayedList+0x8c>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d021      	beq.n	8003b30 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aec:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	6892      	ldr	r2, [r2, #8]
 8003b02:	60da      	str	r2, [r3, #12]
 8003b04:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	3204      	adds	r2, #4
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	1d1a      	adds	r2, r3, #4
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	609a      	str	r2, [r3, #8]
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b20:	615a      	str	r2, [r3, #20]
 8003b22:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b2e:	e026      	b.n	8003b7e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d209      	bcs.n	8003b5c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4610      	mov	r0, r2
 8003b56:	f7fe fd70 	bl	800263a <vListInsert>
}
 8003b5a:	e010      	b.n	8003b7e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xf8>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f7fe fd66 	bl	800263a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d202      	bcs.n	8003b7e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003b78:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6013      	str	r3, [r2, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20012dc0 	.word	0x20012dc0
 8003b8c:	20012ce4 	.word	0x20012ce4
 8003b90:	20012dc4 	.word	0x20012dc4
 8003b94:	20012da8 	.word	0x20012da8
 8003b98:	20012d78 	.word	0x20012d78
 8003b9c:	20012d74 	.word	0x20012d74
 8003ba0:	20012ddc 	.word	0x20012ddc

08003ba4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003bae:	f000 fa47 	bl	8004040 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <xTimerCreateTimerTask+0x54>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <xTimerCreateTimerTask+0x58>)
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bc8:	490d      	ldr	r1, [pc, #52]	; (8003c00 <xTimerCreateTimerTask+0x5c>)
 8003bca:	480e      	ldr	r0, [pc, #56]	; (8003c04 <xTimerCreateTimerTask+0x60>)
 8003bcc:	f7ff f88a 	bl	8002ce4 <xTaskCreate>
 8003bd0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	603b      	str	r3, [r7, #0]
    }
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003bee:	687b      	ldr	r3, [r7, #4]
    }
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20012e18 	.word	0x20012e18
 8003bfc:	20012e1c 	.word	0x20012e1c
 8003c00:	08004564 	.word	0x08004564
 8003c04:	08003cad 	.word	0x08003cad

08003c08 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c14:	e008      	b.n	8003c28 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	18d1      	adds	r1, r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f8dd 	bl	8003df4 <prvInsertTimerInActiveList>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ea      	bne.n	8003c16 <prvReloadTimer+0xe>
        }
    }
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <prvProcessExpiredTimer+0x5c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe fd21 	bl	80026ac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff ffc3 	bl	8003c08 <prvReloadTimer>
 8003c82:	e008      	b.n	8003c96 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	4798      	blx	r3
    }
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20012e10 	.word	0x20012e10

08003cac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cb4:	f107 0308 	add.w	r3, r7, #8
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f857 	bl	8003d6c <prvGetNextExpireTime>
 8003cbe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f803 	bl	8003cd0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003cca:	f000 f8d5 	bl	8003e78 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cce:	e7f1      	b.n	8003cb4 <prvTimerTask+0x8>

08003cd0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003cda:	f7ff f9bf 	bl	800305c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f866 	bl	8003db4 <prvSampleTimeNow>
 8003ce8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d130      	bne.n	8003d52 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <prvProcessTimerOrBlockTask+0x3c>
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d806      	bhi.n	8003d0c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003cfe:	f7ff f9bb 	bl	8003078 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ffa1 	bl	8003c4c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d0a:	e024      	b.n	8003d56 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d12:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <prvProcessTimerOrBlockTask+0x90>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <prvProcessTimerOrBlockTask+0x50>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <prvProcessTimerOrBlockTask+0x52>
 8003d20:	2300      	movs	r3, #0
 8003d22:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <prvProcessTimerOrBlockTask+0x94>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4619      	mov	r1, r3
 8003d32:	f7fe ffa3 	bl	8002c7c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d36:	f7ff f99f 	bl	8003078 <xTaskResumeAll>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <prvProcessTimerOrBlockTask+0x98>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
    }
 8003d50:	e001      	b.n	8003d56 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d52:	f7ff f991 	bl	8003078 <xTaskResumeAll>
    }
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20012e14 	.word	0x20012e14
 8003d64:	20012e18 	.word	0x20012e18
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <prvGetNextExpireTime+0x44>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <prvGetNextExpireTime+0x16>
 8003d7e:	2201      	movs	r2, #1
 8003d80:	e000      	b.n	8003d84 <prvGetNextExpireTime+0x18>
 8003d82:	2200      	movs	r2, #0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d90:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <prvGetNextExpireTime+0x44>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e001      	b.n	8003da0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003da0:	68fb      	ldr	r3, [r7, #12]
    }
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20012e10 	.word	0x20012e10

08003db4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003dbc:	f7ff fa58 	bl	8003270 <xTaskGetTickCount>
 8003dc0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <prvSampleTimeNow+0x3c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d205      	bcs.n	8003dd8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003dcc:	f000 f912 	bl	8003ff4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e002      	b.n	8003dde <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003dde:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <prvSampleTimeNow+0x3c>)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003de4:	68fb      	ldr	r3, [r7, #12]
    }
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20012e20 	.word	0x20012e20

08003df4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d812      	bhi.n	8003e40 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d302      	bcc.n	8003e2e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e01b      	b.n	8003e66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <prvInsertTimerInActiveList+0x7c>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f7fe fbfe 	bl	800263a <vListInsert>
 8003e3e:	e012      	b.n	8003e66 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d206      	bcs.n	8003e56 <prvInsertTimerInActiveList+0x62>
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d302      	bcc.n	8003e56 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e007      	b.n	8003e66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <prvInsertTimerInActiveList+0x80>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7fe fbea 	bl	800263a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e66:	697b      	ldr	r3, [r7, #20]
    }
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20012e14 	.word	0x20012e14
 8003e74:	20012e10 	.word	0x20012e10

08003e78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e7e:	e0a6      	b.n	8003fce <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f2c0 80a2 	blt.w	8003fcc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fc07 	bl	80026ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff87 	bl	8003db4 <prvSampleTimeNow>
 8003ea6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	f200 808e 	bhi.w	8003fce <prvProcessReceivedCommands+0x156>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <prvProcessReceivedCommands+0x40>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003edd 	.word	0x08003edd
 8003ebc:	08003edd 	.word	0x08003edd
 8003ec0:	08003f45 	.word	0x08003f45
 8003ec4:	08003f59 	.word	0x08003f59
 8003ec8:	08003fa3 	.word	0x08003fa3
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003edd 	.word	0x08003edd
 8003ed4:	08003f45 	.word	0x08003f45
 8003ed8:	08003f59 	.word	0x08003f59
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	18d1      	adds	r1, r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	69f8      	ldr	r0, [r7, #28]
 8003efc:	f7ff ff7a 	bl	8003df4 <prvInsertTimerInActiveList>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d063      	beq.n	8003fce <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	69f8      	ldr	r0, [r7, #28]
 8003f22:	f7ff fe71 	bl	8003c08 <prvReloadTimer>
 8003f26:	e008      	b.n	8003f3a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	69f8      	ldr	r0, [r7, #28]
 8003f40:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003f42:	e044      	b.n	8003fce <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003f56:	e03a      	b.n	8003fce <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	617b      	str	r3, [r7, #20]
    }
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	18d1      	adds	r1, r2, r3
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	69f8      	ldr	r0, [r7, #28]
 8003f9c:	f7ff ff2a 	bl	8003df4 <prvInsertTimerInActiveList>
                        break;
 8003fa0:	e015      	b.n	8003fce <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003fb0:	69f8      	ldr	r0, [r7, #28]
 8003fb2:	f7fe fa03 	bl	80023bc <vPortFree>
 8003fb6:	e00a      	b.n	8003fce <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003fca:	e000      	b.n	8003fce <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003fcc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <prvProcessReceivedCommands+0x178>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f107 0108 	add.w	r1, r7, #8
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fc93 	bl	8002904 <xQueueReceive>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f af4d 	bne.w	8003e80 <prvProcessReceivedCommands+0x8>
        }
    }
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20012e18 	.word	0x20012e18

08003ff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ffa:	e009      	b.n	8004010 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <prvSwitchTimerLists+0x44>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004006:	f04f 31ff 	mov.w	r1, #4294967295
 800400a:	6838      	ldr	r0, [r7, #0]
 800400c:	f7ff fe1e 	bl	8003c4c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <prvSwitchTimerLists+0x44>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800401a:	4b07      	ldr	r3, [pc, #28]	; (8004038 <prvSwitchTimerLists+0x44>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <prvSwitchTimerLists+0x48>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <prvSwitchTimerLists+0x44>)
 8004026:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <prvSwitchTimerLists+0x48>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6013      	str	r3, [r2, #0]
    }
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20012e10 	.word	0x20012e10
 800403c:	20012e14 	.word	0x20012e14

08004040 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004044:	f000 f960 	bl	8004308 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004048:	4b12      	ldr	r3, [pc, #72]	; (8004094 <prvCheckForValidListAndQueue+0x54>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d11d      	bne.n	800408c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004050:	4811      	ldr	r0, [pc, #68]	; (8004098 <prvCheckForValidListAndQueue+0x58>)
 8004052:	f7fe fac5 	bl	80025e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004056:	4811      	ldr	r0, [pc, #68]	; (800409c <prvCheckForValidListAndQueue+0x5c>)
 8004058:	f7fe fac2 	bl	80025e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800405c:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <prvCheckForValidListAndQueue+0x60>)
 800405e:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <prvCheckForValidListAndQueue+0x58>)
 8004060:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <prvCheckForValidListAndQueue+0x64>)
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <prvCheckForValidListAndQueue+0x5c>)
 8004066:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004068:	2200      	movs	r2, #0
 800406a:	210c      	movs	r1, #12
 800406c:	200a      	movs	r0, #10
 800406e:	f7fe fbd7 	bl	8002820 <xQueueGenericCreate>
 8004072:	4603      	mov	r3, r0
 8004074:	4a07      	ldr	r2, [pc, #28]	; (8004094 <prvCheckForValidListAndQueue+0x54>)
 8004076:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <prvCheckForValidListAndQueue+0x54>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <prvCheckForValidListAndQueue+0x54>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4908      	ldr	r1, [pc, #32]	; (80040a8 <prvCheckForValidListAndQueue+0x68>)
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fdaa 	bl	8002be0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800408c:	f000 f96c 	bl	8004368 <vPortExitCritical>
    }
 8004090:	bf00      	nop
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20012e18 	.word	0x20012e18
 8004098:	20012de8 	.word	0x20012de8
 800409c:	20012dfc 	.word	0x20012dfc
 80040a0:	20012e10 	.word	0x20012e10
 80040a4:	20012e14 	.word	0x20012e14
 80040a8:	0800456c 	.word	0x0800456c

080040ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3b04      	subs	r3, #4
 80040bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3b04      	subs	r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f023 0201 	bic.w	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b04      	subs	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040dc:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <pxPortInitialiseStack+0x64>)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b14      	subs	r3, #20
 80040e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b04      	subs	r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f06f 0202 	mvn.w	r2, #2
 80040fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3b20      	subs	r3, #32
 8004100:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	08004115 	.word	0x08004115

08004114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <prvTaskExitError+0x54>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d00a      	beq.n	800413e <prvTaskExitError+0x2a>
        __asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60fb      	str	r3, [r7, #12]
    }
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <prvTaskExitError+0x28>
        __asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	60bb      	str	r3, [r7, #8]
    }
 8004150:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004152:	bf00      	nop
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0fc      	beq.n	8004154 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	20000010 	.word	0x20000010
 800416c:	00000000 	.word	0x00000000

08004170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <pxCurrentTCBConst2>)
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	6808      	ldr	r0, [r1, #0]
 8004176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	f380 8809 	msr	PSP, r0
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f380 8811 	msr	BASEPRI, r0
 800418a:	4770      	bx	lr
 800418c:	f3af 8000 	nop.w

08004190 <pxCurrentTCBConst2>:
 8004190:	20012ce4 	.word	0x20012ce4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop

08004198 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004198:	4808      	ldr	r0, [pc, #32]	; (80041bc <prvPortStartFirstTask+0x24>)
 800419a:	6800      	ldr	r0, [r0, #0]
 800419c:	6800      	ldr	r0, [r0, #0]
 800419e:	f380 8808 	msr	MSP, r0
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f380 8814 	msr	CONTROL, r0
 80041aa:	b662      	cpsie	i
 80041ac:	b661      	cpsie	f
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	df00      	svc	0
 80041b8:	bf00      	nop
 80041ba:	0000      	.short	0x0000
 80041bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop

080041c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041ca:	4b46      	ldr	r3, [pc, #280]	; (80042e4 <xPortStartScheduler+0x120>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a46      	ldr	r2, [pc, #280]	; (80042e8 <xPortStartScheduler+0x124>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10a      	bne.n	80041ea <xPortStartScheduler+0x26>
        __asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	613b      	str	r3, [r7, #16]
    }
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041ea:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <xPortStartScheduler+0x120>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a3f      	ldr	r2, [pc, #252]	; (80042ec <xPortStartScheduler+0x128>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10a      	bne.n	800420a <xPortStartScheduler+0x46>
        __asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60fb      	str	r3, [r7, #12]
    }
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <xPortStartScheduler+0x12c>)
 800420c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800422c:	b2da      	uxtb	r2, r3
 800422e:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <xPortStartScheduler+0x130>)
 8004230:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004232:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <xPortStartScheduler+0x134>)
 8004234:	2207      	movs	r2, #7
 8004236:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004238:	e009      	b.n	800424e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800423a:	4b2f      	ldr	r3, [pc, #188]	; (80042f8 <xPortStartScheduler+0x134>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3b01      	subs	r3, #1
 8004240:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <xPortStartScheduler+0x134>)
 8004242:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	2b80      	cmp	r3, #128	; 0x80
 8004258:	d0ef      	beq.n	800423a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800425a:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <xPortStartScheduler+0x134>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1c3 0307 	rsb	r3, r3, #7
 8004262:	2b04      	cmp	r3, #4
 8004264:	d00a      	beq.n	800427c <xPortStartScheduler+0xb8>
        __asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	60bb      	str	r3, [r7, #8]
    }
 8004278:	bf00      	nop
 800427a:	e7fe      	b.n	800427a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800427c:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <xPortStartScheduler+0x134>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <xPortStartScheduler+0x134>)
 8004284:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004286:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <xPortStartScheduler+0x134>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800428e:	4a1a      	ldr	r2, [pc, #104]	; (80042f8 <xPortStartScheduler+0x134>)
 8004290:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800429a:	4b18      	ldr	r3, [pc, #96]	; (80042fc <xPortStartScheduler+0x138>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a17      	ldr	r2, [pc, #92]	; (80042fc <xPortStartScheduler+0x138>)
 80042a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80042a6:	4b15      	ldr	r3, [pc, #84]	; (80042fc <xPortStartScheduler+0x138>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a14      	ldr	r2, [pc, #80]	; (80042fc <xPortStartScheduler+0x138>)
 80042ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042b2:	f000 f8db 	bl	800446c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <xPortStartScheduler+0x13c>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042bc:	f000 f8f4 	bl	80044a8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042c0:	4b10      	ldr	r3, [pc, #64]	; (8004304 <xPortStartScheduler+0x140>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <xPortStartScheduler+0x140>)
 80042c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042cc:	f7ff ff64 	bl	8004198 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042d0:	f7ff f8f4 	bl	80034bc <vTaskSwitchContext>
    prvTaskExitError();
 80042d4:	f7ff ff1e 	bl	8004114 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	e000ed00 	.word	0xe000ed00
 80042e8:	410fc271 	.word	0x410fc271
 80042ec:	410fc270 	.word	0x410fc270
 80042f0:	e000e400 	.word	0xe000e400
 80042f4:	20012e24 	.word	0x20012e24
 80042f8:	20012e28 	.word	0x20012e28
 80042fc:	e000ed20 	.word	0xe000ed20
 8004300:	20000010 	.word	0x20000010
 8004304:	e000ef34 	.word	0xe000ef34

08004308 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
        __asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	607b      	str	r3, [r7, #4]
    }
 8004320:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <vPortEnterCritical+0x58>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <vPortEnterCritical+0x58>)
 800432a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <vPortEnterCritical+0x58>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10f      	bne.n	8004354 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <vPortEnterCritical+0x5c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <vPortEnterCritical+0x4c>
        __asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	603b      	str	r3, [r7, #0]
    }
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <vPortEnterCritical+0x4a>
    }
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	20000010 	.word	0x20000010
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <vPortExitCritical+0x50>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <vPortExitCritical+0x24>
        __asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	607b      	str	r3, [r7, #4]
    }
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <vPortExitCritical+0x50>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3b01      	subs	r3, #1
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <vPortExitCritical+0x50>)
 8004394:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <vPortExitCritical+0x50>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d105      	bne.n	80043aa <vPortExitCritical+0x42>
 800439e:	2300      	movs	r3, #0
 80043a0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80043a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000010 	.word	0x20000010
 80043bc:	00000000 	.word	0x00000000

080043c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043c0:	f3ef 8009 	mrs	r0, PSP
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <pxCurrentTCBConst>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	f01e 0f10 	tst.w	lr, #16
 80043d0:	bf08      	it	eq
 80043d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	6010      	str	r0, [r2, #0]
 80043dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043e4:	f380 8811 	msr	BASEPRI, r0
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f7ff f864 	bl	80034bc <vTaskSwitchContext>
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f380 8811 	msr	BASEPRI, r0
 80043fc:	bc09      	pop	{r0, r3}
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	6808      	ldr	r0, [r1, #0]
 8004402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004406:	f01e 0f10 	tst.w	lr, #16
 800440a:	bf08      	it	eq
 800440c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004410:	f380 8809 	msr	PSP, r0
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w

08004420 <pxCurrentTCBConst>:
 8004420:	20012ce4 	.word	0x20012ce4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
        __asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
    }
 8004440:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004442:	f7fe ff25 	bl	8003290 <xTaskIncrementTick>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <SysTick_Handler+0x40>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	2300      	movs	r3, #0
 8004456:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f383 8811 	msr	BASEPRI, r3
    }
 800445e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <vPortSetupTimerInterrupt+0x2c>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <vPortSetupTimerInterrupt+0x30>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800447c:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <vPortSetupTimerInterrupt+0x34>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a08      	ldr	r2, [pc, #32]	; (80044a4 <vPortSetupTimerInterrupt+0x38>)
 8004482:	3b01      	subs	r3, #1
 8004484:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004486:	4b04      	ldr	r3, [pc, #16]	; (8004498 <vPortSetupTimerInterrupt+0x2c>)
 8004488:	2207      	movs	r2, #7
 800448a:	601a      	str	r2, [r3, #0]
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000e010 	.word	0xe000e010
 800449c:	e000e018 	.word	0xe000e018
 80044a0:	20000000 	.word	0x20000000
 80044a4:	e000e014 	.word	0xe000e014

080044a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80044a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044b8 <vPortEnableVFP+0x10>
 80044ac:	6801      	ldr	r1, [r0, #0]
 80044ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044b2:	6001      	str	r1, [r0, #0]
 80044b4:	4770      	bx	lr
 80044b6:	0000      	.short	0x0000
 80044b8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop

080044c0 <__libc_init_array>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4d0d      	ldr	r5, [pc, #52]	; (80044f8 <__libc_init_array+0x38>)
 80044c4:	4c0d      	ldr	r4, [pc, #52]	; (80044fc <__libc_init_array+0x3c>)
 80044c6:	1b64      	subs	r4, r4, r5
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	2600      	movs	r6, #0
 80044cc:	42a6      	cmp	r6, r4
 80044ce:	d109      	bne.n	80044e4 <__libc_init_array+0x24>
 80044d0:	4d0b      	ldr	r5, [pc, #44]	; (8004500 <__libc_init_array+0x40>)
 80044d2:	4c0c      	ldr	r4, [pc, #48]	; (8004504 <__libc_init_array+0x44>)
 80044d4:	f000 f82e 	bl	8004534 <_init>
 80044d8:	1b64      	subs	r4, r4, r5
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	2600      	movs	r6, #0
 80044de:	42a6      	cmp	r6, r4
 80044e0:	d105      	bne.n	80044ee <__libc_init_array+0x2e>
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e8:	4798      	blx	r3
 80044ea:	3601      	adds	r6, #1
 80044ec:	e7ee      	b.n	80044cc <__libc_init_array+0xc>
 80044ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f2:	4798      	blx	r3
 80044f4:	3601      	adds	r6, #1
 80044f6:	e7f2      	b.n	80044de <__libc_init_array+0x1e>
 80044f8:	08004594 	.word	0x08004594
 80044fc:	08004594 	.word	0x08004594
 8004500:	08004594 	.word	0x08004594
 8004504:	08004598 	.word	0x08004598

08004508 <memcpy>:
 8004508:	440a      	add	r2, r1
 800450a:	4291      	cmp	r1, r2
 800450c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004510:	d100      	bne.n	8004514 <memcpy+0xc>
 8004512:	4770      	bx	lr
 8004514:	b510      	push	{r4, lr}
 8004516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800451a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800451e:	4291      	cmp	r1, r2
 8004520:	d1f9      	bne.n	8004516 <memcpy+0xe>
 8004522:	bd10      	pop	{r4, pc}

08004524 <memset>:
 8004524:	4402      	add	r2, r0
 8004526:	4603      	mov	r3, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <_init>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr

08004540 <_fini>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr
